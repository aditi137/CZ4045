You can certainly add weights to edges in NetworkX. In fact, you can set arbitrary data for edges, since it is basically a dict. 
Furthermore you can change the parameters of edges (or nodes) after you added them.
And you can of course calculate path according to weights (or any other attribute specified in the weight parameter).
For your case, deciding edge weights might be tricky. Bear in mind that weighted shortest path is calculated usually with Djikstra's Algorithm and it favors smaller weights. It also requires positive weights. One possible solution would be assigning a weight of 1/max(k_i,k_j) to edge (i,j) where k_i, k_j is the degree of nodes i and j.
The correct way to compute shortest paths over transition probabilities is to transform the edge weights to represent surprisal: that is, the negative log of the probability. This results in weights that are positive, and any given shortest path is then interpreted as minimizing surprisal. And since Dijkstra's algorithm sums up weights, it does so in log space, which means it really is multiplying probabilities. To recover the joint probability of observing any given shortest path, then, you just take the exponential of the negative surprisal.
