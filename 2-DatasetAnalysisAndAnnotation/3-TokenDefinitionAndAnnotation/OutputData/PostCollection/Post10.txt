I need to classify some values between two classes.
I have about 30 values that I can use as a training set and each value has 10 different dimensions.
I am using libSVM (in Python) and it seems that it works quite well.
I am trying also to give an interpretation to the model computed by libSVM, because I think that some dimensions are more "important" than others in the classification process.
For instance, consider the following example:
y, x = [1,1,1,-1,-1,-1],[[1,-1],[1,0],[1,1],[-1,-1],[-1,0],[-1,1]]
prob  = svm_problem(y, x)
param = svm_parameter()
param.kernel_type = LINEAR
param.C = 10
m = svm_train(prob, param)
svm_save_model('model_file', m)

It is clear that the second dimension of x list's elements is useless to classify this data set.
My question is:
is there any systematic way to detect these kind of situations analyzing the model generated by libSVM?

