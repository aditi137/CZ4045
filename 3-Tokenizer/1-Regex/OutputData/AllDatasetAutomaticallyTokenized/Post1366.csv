This
is
because
name
mangling
is
happening
.
expressionType
is
defined
in
Expression
.
n.__expressionType
will
translate
to
n._Expression__expressionType
.
if
you
copy-paste
the
same
expressionType
method
to
the
class
Number
","
then
because
of
method
resolution
order
","
it
would
go
the
the
definition
that
appears
in
Number
where
self.__expressionType
would
mean
self._Number__expressionType
.
n._Expression__expressionType
!
=
n._Number__expressionType
.
This
would
actually
work
:
However
","
there
is
code
duplication
","
so
using
a
single
underscore
is
better
because
it
won't
mangle
the
name
of
the
attribute
.
