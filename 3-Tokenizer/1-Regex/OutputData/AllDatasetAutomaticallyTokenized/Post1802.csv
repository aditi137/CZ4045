I'm
developing
a
package
that
requires
Python
bindings
for
the
dgtsv
subroutine
from
the
LAPACK
Fortran
library
.
At
the
moment
","
I'm
distributing
the
Fortran
source
file
","
dgtsv.f
","
alongside
my
Python
code
","
and
using
numpy.distutils
to
automatically
wrap
it
and
compile
it
into
a
shared
library
","
_gtsv.so
","
that
is
callable
from
Python
.
Here's
what
my
setup.py
file
looks
like
at
the
moment
:
Note
that
in
order
to
actually
use
_gtsv.so
","
I
still
have
to
link
against
a
pre-existing
LAPACK
shared
library
(
extra_link_args
=
[
'
-
llapack
'
]
)
.
Since
this
library
should
already
contain
the
dgtsv
subroutine
","
it
seems
to
me
that
it
would
be
cleaner
to
just
wrap
the
function
in
the
existing
shared
library
","
rather
than
having
to
distribute
the
actual
Fortran
source
.
However
I've
never
come
across
any
examples
of
using
F2PY
to
wrap
functions
that
are
part
of
a
shared
library
rather
than
just
raw
Fortran
source
code
.
Is
this
possible
?
