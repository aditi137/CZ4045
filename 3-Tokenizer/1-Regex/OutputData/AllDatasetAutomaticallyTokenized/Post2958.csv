As
general
rule
","
iterative
operations
on
numpy
arrays
is
slower
than
equivalent
ones
on
lists
.
In
part
that's
because
creating
an
array
from
a
list
takes
time
","
whether
it's
the
initial
creation
or
some
intermediate
step
.
Numpy
arrays
gain
their
speed
advantage
when
you
perform
compiled
operations
on
them
-
ones
where
the
iteration
takes
place
at
compiled
speeds
rather
than
interpreted
ones
.
In
your
example
","
the
dictionary
source
isn't
important
Take
the
simple
task
of
adding
1
to
all
values
:
Your
string
formatting
case
:
or
with
list
comprehensions
instead
of
map
:
Performing
this
same
action
on
narr.tolist()
is
nearly
as
good
","
and
better
than
iterating
on
narr
directly
.
[
c
for
c
on
narr
]
produces
a
list
of
4
arrays
;
[
str(i)
for
i
in
c
]
then
requires
iterating
on
each
of
those
subarrays
.
Making
a
list
of
Point
objects
from
a
numpy
array
is
a
poor
use
of
the
structure
.
You
could
make
a
structured
array
","
and
access
'
x
'
values
for
a
whole
set
of
points
.
That's
the
key
-
use
arrays
when
you
want
to
work
with
the
whole
structure
","
or
at
least
whole
rows
and
columns
.
