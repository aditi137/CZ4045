If
you
could
slightly
modify
your
call
patterns
","
I
could
imagine
that
it
is
feasible
:
In
this
way
","
you
could
perfectly
make
it
work
with
__getattr__
if
you
make
boot()
return
an
object
which
provides
these
methods
.
If
not
","
you
could
try
one
of
the
following
:
Just
call
cfg.instance.get('a')
Give
Service
a
metaclass
:
Here
the
metaclass
provides
an
appropriate
way
to
deflect
attribute
accesses
to
the
class
to
one
of
its
attributes
.
Be
aware
that
under
Py3
","
the
syntax
is
slightly
different
.
IIRC
","
it
is
(
However
","
it
seems
slightly
wrong
to
me
to
use
the
Service
class
just
for
this
kind
of
encapsulation
.
You
can
do
this
cfg
=
boot(...)
from
my
first
idea
at
one
place
and
subsequently
use
cfg
for
every
access
.
You
might
even
(
misleadingly
)
name
it
Config
:
or
and
subsequently
use
cfg
(
or
Config
)
everywhere
you
want
.
)
