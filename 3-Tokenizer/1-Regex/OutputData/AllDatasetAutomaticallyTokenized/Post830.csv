Your
implementation
of
this
scheme
is
reasonable
.
I
would
not
choose
this
scheme
to
implement
automated
FTP
messaging
","
if
that
is
what
you're
doing
.
There
are
two
weaknesses
of
this
approach
:
It
does
not
support
filenames
that
repeat
.
Any
filename
that
occurs
in
the
""""
old
""""
history
will
not
be
detected
as
a
new
file
.
Maybe
this
is
a
problem
for
you
","
maybe
not
.
But
even
if
filenames
are
guaranteed
unique
now
","
that
may
not
always
be
true
.
It
does
not
tell
you
whether
a
new
file
is
ready
to
be
consumed
or
not
.
It
is
possible
that
a
new
file
will
be
processed
while
it
is
still
being
uploaded
.
Some
people
apply
a
""""
no
change
in
size
for
X
seconds
""""
rule
","
but
that
just
increases
delay
and
still
leaves
a
vulnerability
to
severed
connections
.
One
scheme
that
is
similar
but
does
not
have
either
of
these
two
problems
is
to
actually
store
a
file
on
the
server
with
a
reserved
name
","
or
in
a
separate
place
","
and
use
its
timestamp
(
preferably
the
modification
time
of
the
file
itself
)
to
decide
which
files
can
be
safely
processed
.
This
""""
semaphore
""""
file
is
updated
to
the
current
time
as
the
last
step
in
uploading
a
file
.
All
files
with
a
modification
time
older
than
the
semaphore
timestamp
can
be
processed
.
Once
processed
","
all
files
must
be
deleted
out
of
the
upload
folder
so
they
won't
be
processed
twice
.
I
have
seen
this
scheme
work
well
in
an
automated
production
data
flow
.
