In
my
python
application
I
have
a
big
list
(
now
with
almost
9000
indexes
)
.
I
need
to
find
the
two
most
similar
items
in
this
list
.
So
","
what
I
have
now
is
something
like
:
In
the
code
","
weights
is
a
dict
","
obj1
and
obj2
are
both
objects
in
which
the
__getitem__
is
implemented
and
the
return
value
also
comes
from
a
dict
.
And
self.__fields
is
a
list
with
the
selected
fields
(
it
has
now
9
items
)
.
My
problem
is
","
this
loop
is
taking
too
much
time
to
complete
.
Even
after
5
hours
","
the
i
variable
still
in
the
first
100th
list
items
.
With
this
next
silly
code
","
I
come
to
the
conclusion
that
the
problem
is
not
the
size
of
the
list
(
the
silly
code
finishes
with
5
minutes
of
difference
)
.
Therefore
","
the
problem
seems
to
be
in
the
most
internal
loop
of
my
code
:
I
know
Python
","
but
I'm
not
a
Python
specialist
.
I
conclude
that
the
access
to
the
values
of
three
objects
through
their
key
is
a
slow
operation
.
Some
time
ago
","
I
saw
in
some
blog
that
list
comprehensions
and
/
or
lambda
operations
can
be
faster
.
So
","
my
question
is
:
how
do
I
make
this
most
internal
loop
faster
using
list
comprehensions
and
/
or
lambda
?
Feel
free
to
give
any
other
advice
if
you
want
.
