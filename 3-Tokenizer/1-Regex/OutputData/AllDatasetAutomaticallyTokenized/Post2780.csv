Solution
:
you
have
__all__
set
to
empty
list
i.e.
from
package
import
*
basically
imports
nothing
set
it
to
__all__
=
[
'
submodule
'
]
in
__init__.py
What
exactly
is
__all__
?
In
simplest
words
all
help
customizing
the
from
package
import
*
i.e.
with
all
we
can
set
what
will
be
imported
and
what
not
.
From
the
docs
:
The
public
names
defined
by
a
module
are
determined
by
checking
the
module’s
namespace
for
a
variable
named
all
;
if
defined
","
it
must
be
a
sequence
of
strings
which
are
names
defined
or
imported
by
that
module
.
The
names
given
in
all
are
all
considered
public
and
are
required
to
exist
.
If
all
is
not
defined
","
the
set
of
public
names
includes
all
names
found
in
the
module’s
namespace
which
do
not
begin
with
an
underscore
character
(
'
_
'
)
.
all
should
contain
the
entire
public
API
.
It
is
intended
to
avoid
accidentally
exporting
items
that
are
not
part
of
the
API
(
such
as
library
modules
which
were
imported
and
used
within
the
module
)
.
One
important
thing
to
note
here
is
-
Imports
without
*
are
not
affected
by
__all__
i.e.
Members
that
are
not
mentioned
in
__all__
are
accessible
from
outside
the
module
using
direct
import
-
from
<
module
>
import
<
member
>
.
An
Example
:
the
following
code
in
a
module.py
explicitly
exports
the
symbols
foo
and
bar
:
These
symbols
can
then
be
imported
like
so
:
