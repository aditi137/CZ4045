Option
1
:
For
sendmailR
","
it
seems
that
you're
having
issues
with
the
appending
of
port
25
.
You
should
be
able
to
specify
the
destination
port
via
sendmail_options(smtpPort = 587)
","
prior
to
using
the
sendmail()
command
.
I
am
not
sure
that
this
will
resolve
your
other
issues
","
but
it
should
get
you
the
right
port
.
Option
2
:
If
you'd
like
to
invoke
a
Python
script
","
this
one
looks
most
relevant
.
You
may
find
it
easiest
to
do
token
substitution
","
i.e.
take
a
base
script
","
put
in
strings
that
you'll
simply
find
(
i.e.
the
tokens
)
&
replace
(
i.e.
substitution
with
your
desired
strings
)
","
and
then
execute
the
revised
script
.
For
instance
","
using
the
script
at
the
link
above
(
saved
in
a
local
directory
as
""""
sendmail_base.py
""""
)
:
and
so
on
","
replacing
the
header
","
recipient
","
etc.
","
with
the
text
strings
you'd
like
to
use
","
and
the
same
for
specification
of
the
attachment
file
name
.
Finally
","
you
can
save
the
output
to
a
new
Python
file
and
execute
it
:
Although
this
is
a
very
naive
approach
","
it
is
simple
and
debugging
of
the
script
involves
only
examination
of
whether
your
output
Python
program
is
working
and
whether
or
not
R
is
generating
the
right
output
Python
program
.
This
is
in
contrast
to
debugging
what's
going
on
with
R
passing
objects
to
and
from
various
packages
and
languages
.
