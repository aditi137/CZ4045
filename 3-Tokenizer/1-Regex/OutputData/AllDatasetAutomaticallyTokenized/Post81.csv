List
comprehensions
.
I
often
find
myself
filtering
/
mapping
lists
","
and
being
able
to
say
[
"line.replace(""spam"",""eggs"")"
for
line
in
"open(""somefile.txt"")"
if
"line.startswith(""nee"")"
]
is
really
nice
.
Functions
are
first
class
objects
.
They
can
be
passed
as
parameters
to
other
functions
","
defined
inside
other
function
","
and
have
lexical
scope
.
This
makes
it
really
easy
to
say
things
like
people.sort(key=lambda p: p.age)
and
thus
sort
a
bunch
of
people
on
their
age
without
having
to
define
a
custom
comparator
class
or
something
equally
verbose
.
Everything
is
an
object
.
Java
has
basic
types
which
aren't
objects
","
which
is
why
many
classes
in
the
standard
library
define
9
different
versions
of
functions
(
for
boolean
","
byte
","
char
","
double
","
float
","
int
","
long
","
Object
","
short
)
.
Array.sort
is
a
good
example
.
Autoboxing
helps
","
although
it
makes
things
awkward
when
something
turns
out
to
be
null
.
Properties
.
Python
lets
you
create
classes
with
read-only
fields
","
lazily-generated
fields
","
as
well
as
fields
which
are
checked
upon
assignment
to
make
sure
they're
never
0
or
null
or
whatever
you
want
to
guard
against
","
etc.
'
Default
and
keyword
arguments
.
In
Java
if
you
want
a
constructor
that
can
take
up
to
5
optional
arguments
","
you
must
define
6
different
versions
of
that
constructor
.
And
there's
no
way
at
all
to
say
"Student(name=""Eli"", age=25)"
Functions
can
only
return
1
thing
.
In
Python
you
have
tuple
assignment
","
so
you
can
say
spam
","
eggs
=
nee()
but
in
Java
you'd
need
to
either
resort
to
mutable
out
parameters
or
have
a
custom
class
with
2
fields
and
then
have
two
additional
lines
of
code
to
extract
those
fields
.
Built-in
syntax
for
lists
and
dictionaries
.
Operator
Overloading
.
Generally
better
designed
libraries
.
For
example
","
to
parse
an
XML
document
in
Java
","
you
say
Document
doc
=
DocumentBuilderFactory.newInstance()
.
newDocumentBuilder()
.
"parse(""test.xml"")"
;
and
in
Python
you
say
doc
=
"parse(""test.xml"")"
Anyway
","
I
could
go
on
and
on
with
further
examples
","
but
Python
is
just
overall
a
much
more
flexible
and
expressive
language
.
It's
also
dynamically
typed
","
which
I
really
like
","
but
which
comes
with
some
disadvantages
.
Java
has
much
better
performance
than
Python
and
has
way
better
tool
support
.
Sometimes
those
things
matter
a
lot
and
Java
is
the
better
language
than
Python
for
a
task
;
I
continue
to
use
Java
for
some
new
projects
despite
liking
Python
a
lot
more
.
But
as
a
language
I
think
Python
is
superior
for
most
things
I
find
myself
needing
to
accomplish
.
