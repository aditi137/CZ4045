Guido's
explanation
is
here
:
First
of
all
","
I
chose
len(x)
over
x.len()
for
HCI
reasons
(
def
__len__()
came
much
later
)
.
There
are
two
intertwined
reasons
actually
","
both
HCI
:
(
a
)
For
some
operations
","
prefix
notation
just
reads
better
than
postfix
—
prefix
(
and
infix
!
)
operations
have
a
long
tradition
in
mathematics
which
likes
notations
where
the
visuals
help
the
mathematician
thinking
about
a
problem
.
Compare
the
easy
with
which
we
rewrite
a
formula
like
x*(a+b
)
into
xa
+
xb
to
the
clumsiness
of
doing
the
same
thing
using
a
raw
OO
notation
.
(
b
)
When
I
read
code
that
says
len(x)
I
know
that
it
is
asking
for
the
length
of
something
.
This
tells
me
two
things
:
the
result
is
an
integer
","
and
the
argument
is
some
kind
of
container
.
To
the
contrary
","
when
I
read
x.len()
","
I
have
to
already
know
that
x
is
some
kind
of
container
implementing
an
interface
or
inheriting
from
a
class
that
has
a
standard
len()
.
Witness
the
confusion
we
occasionally
have
when
a
class
that
is
not
implementing
a
mapping
has
a
get()
or
keys()
method
","
or
something
that
isn’t
a
file
has
a
write()
method
.
Saying
the
same
thing
in
another
way
","
I
see
‘
len
‘
as
a
built-in
operation
.
I’d
hate
to
lose
that
.
/
…
/
