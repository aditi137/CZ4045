In
the
context
of
a
model
I'm
generating
","
I
at
one
point
need
to
generate
a
probability
distribution
from
a
an
array
of
real
numbers
.
I'll
leave
out
the
relevant
details
","
but
essentially
have
a
function
(
we'll
just
call
it
""""
f
""""
for
now
)
","
that
generates
an
array
of
n
floats
:
Now
","
these
values
are
proportional
to
probabilities
I
next
need
to
use
in
a
multinomial
sampling
procedure
","
so
the
obvious
approach
is
simply
this
:
But
this
(
sometimes
)
doesn't
work
!
Basically
the
sum
of
arr
/
arr.sum()
ends
up
being
greater
than
1
.
In
principle
this
should
be
mathematically
impossible
","
but
I'm
assuming
this
boils
down
to
a
floating-point
precision
issue
.
Here's
a
trivial
example
of
how
this
can
happen
:
So
long
story
short
","
my
question
is
how
best
to
deal
with
this
.
I
can
cheat
by
simply
adding
a
very
small
number
to
the
sum
","
i.e.
:
But
this
is
really
hackish
","
and
I
fear
it
may
introduce
further
unwanted
precision
issues
.
Is
there
a
better
solution
?
