I
am
not
sure
about
your
setup.py
requirement
(
I
don’t
know
why
you
would
need
that
)
but
as
for
the
runtime
import issue
","
I
wrote
a
decorator
to
do
just
that
:
…
this
lets
you
decorate
functions
as
@external
–
and
they
are
replaced
at
runtime
automatically
with
the
Cython-optimized
versions
you’ve
provided
.
If
you
wanted
to
extend
this
idea
to
replacing
entire
Cythonized
classes
","
it’d
be
straightforward
to
use
the
same
logic
in
the
__new__
method
of
a
metaclass
(
e.g
.
opportunistic
find-and-replace
in
the
optimized
module
)
.
