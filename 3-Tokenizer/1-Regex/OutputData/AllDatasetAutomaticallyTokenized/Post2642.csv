This
isn't
logically
correct
","
as
the
following
simple
counterexample
shows
:
This
array
contains
no
bordered
square
","
but
your
code
reports
that
it
contains
a
square
of
edge
length
3
.
You
need
either
a
third
nested
loop
through
all
candidate
square
sizes
down
from
x
to
1
(
making
the
solution
O(n^3)
-
time
)
or
","
possibly
","
some
more
sophisticated
data
structure
that
enables
an
equivalent
check
to
be
performed
faster
.
[
EDIT
to
address
updated
algorithm
]
The
new
algorithm
thinks
there
is
no
bordered
square
in
either
despite
there
being
a
3x3
one
in
each
.
Stop
guessing
at
fixes
and
think
about
how
to
break
down
the
set
of
all
possible
locations
of
bordered
squares
into
sets
that
you
can
efficiently
(
or
even
not-so-efficiently
)
check
.
As
I
tried
to
say
at
the
top
:
For
each
possible
bottom-right
corner
of
a
bordered
square
","
your
code
is
currently
only
checking
one
rectangle
.
But
many
more
rectangles
could
have
(
i
","
j
)
as
a
bottom-right
corner
-
-
where
are
the
tests
for
them
?
