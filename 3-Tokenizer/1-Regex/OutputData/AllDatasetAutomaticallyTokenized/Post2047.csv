I
am
working
with
PyZMQ
and
I
have
what
seems
to
be
a
rather
peculiar
issue
.
I
have
two
classes
that
are
wrapping
sockets
for
communication
","
MZLSubscriber
and
MZLRequester
.
There
is
a
class
that
contains
both
of
them
","
MZLLink
.
For
each
of
these
","
I
also
have
tests
MZLSubscriberTest
","
MZLRequesterTest
","
and
MZLinkTest
.
The
tests
for
the
subscriber
and
requester
work
as
they
should
","
but
MZLinkTest
does
not
receive
any
subscriber
messages
.
Below
is
what
seems
to
be
the
relative
code
","
which
are
the
constructors
for
the
3
classes
as
well
as
run()
for
MZLSubscriber
and
the
tests
for
MZLink
and
MZLSubscriber
.
MZLink
Constructor
:
MZLink
Test
:
MZLRequester
Constructor
:
MZLSubscriber
Constructor
:
MZLSubscriber.run()
:
MZLSubscriber
Test
:
The
subscriber
thread
seems
to
block
at
datum
=
self.socket.recv()
","
which
makes
me
think
it
could
be
some
issue
with
the
socket
creation
.
However
","
it
does
seem
to
work
when
only
working
with
the
subscriber
.
The
requester
seems
to
work
in
both
cases
.
In
addition
","
everything
goes
smoothly
by
just
commenting
out
the
two
lines
dealing
with
requester
.
I
apologize
for
the
wall
of
code
","
but
I
can't
even
narrow
what
code
the
issue
is
coming
from
at
this
point
.
When
I
do
","
I'll
remove
the
irrelevant
code
.
The
test
code
that
deals
with
the
incoming
data
has
been
removed
.
As
a
bit
of
clarification
","
I
am
using
Python
2.7
with
PyZMQ
14.3.1
.
UPDATE
:
It
seems
that
running
MZLSubscriber
in
the
main
thread
rather
than
creating
another
Process
results
in
the
expected
result
","
so
it
seems
that
this
could
be
some
sort
of
thread
safety
.
To
my
knowledge
","
zmq
contexts
are
thread-safe
","
but
sockets
are
not
.
I
thought
this
wouldn't
cause
an
issue
because
I'm
explicitly
making
sure
there
is
a
socket
for
each
thread
.
UPDATE
2
:
If
the
calls
setting
up
the
socket
in
MZLSubscriber
are
moved
from
run()
to
__init__
","
the
socket
seems
to
receive
a
small
portion
of
the
published
message
","
but
does
have
an
error
:
I
have
gotten
a
workaround
to
this
by
creating
a
new
zmq.Context
in
MZLSubscriber.run()
","
although
I
feel
that
this
shouldn't
be
necessary
if
zmq
contexts
are
thread-safe
.
