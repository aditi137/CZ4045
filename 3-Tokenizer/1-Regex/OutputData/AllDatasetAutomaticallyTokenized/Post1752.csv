I'm
trying
to
solve
a
second
order
ODE
using
odeint
from
scipy
.
The
issue
I'm
having
is
the
function
is
implicitly
coupled
to
the
second
order
term
","
as
seen
in
the
simplified
snippet
(
please
ignore
the
pretend
physics
of
the
example
)
:
in
this
case
I
realise
it
is
possible
to
algebraically
solve
for
the
implicit
variable
","
however
in
my
actual
scenario
there
is
a
lot
of
logic
between
F_r
and
the
evaluation
of
a
and
algebraic
manipulation
fails
.
I
believe
the
DAE
could
be
solved
using
MATLAB's
ode15i
function
","
but
I'm
trying
to
avoid
that
scenario
if
at
all
possible
.
My
question
is
-
is
there
a
way
to
solve
implicit
ODE
functions
(
DAE
)
in
python( scipy preferably)
?
And
is
there
a
better
way
to
pose
the
problem
above
to
do
so
?
As
a
last
resort
","
it
may
be
acceptable
to
pass
a
from
the
previous
time-step
.
How
could
I
pass
dydt
[1]
back
into
the
function
after
each
time-step
?
