A
lot
of
times
some
quick
task
comes
up
that
isn't
part
of
the
main
software
you
are
developing
.
Sometimes
the
task
is
one
off
ie
compare
this
file
to
the
database
and
let
me
know
the
differences
.
It
is
a
lot
easier
to
do
text
parsing
in
Perl
/
Ruby
/
Python
than
it
is
in
Java
or
C
#
(
partially
because
it
is
a
lot
easier
to
use
regular
expressions
)
.
It
will
probably
take
a
lot
less
time
to
parse
the
text
file
using
Perl
/
Ruby
/
Python
(
or
maybe
even
vbscript
cringe
and
then
load
it
into
the
database
than
it
would
to
create
a
Java
/
C
#
program
to
do
it
or
to
do
it
by
hand
.
Also
","
due
to
the
ease
at
which
most
of
the
dynamic
languages
parse
text
","
they
are
great
for
code
generation
.
Sure
your
final
project
must
be
in
C
#
/
Java
/
Transact
SQL
but
instead
of
cutting
and
pasting
100
times
","
finding
errors
","
and
cutting
and
pasting
another
100
times
it
is
often
(
but
not
always
)
easier
just
to
use
a
code
generator
.
A
recent
example
at
work
is
we
needed
to
get
data
from
one
accounting
system
into
our
accounting
system
.
The
system
has
an
import format
","
but
the
old
system
had
a
completely
different
format
(
fixed
width
although
some
things
had
to
be
matched
)
.
The
task
is
not
to
create
a
program
to
migrate
the
data
over
and
over
again
.
It
is
to
shove
the
data
into
our
system
and
then
maintain
it
there
going
forward
.
So
even
though
we
are
a
C
#
and
SQL
Server
shop
","
I
used
Python
to
convert
the
data
into
the
format
that
could
be
imported
by
our
application
.
Ultimately
it
doesn't
matter
that
I
used
python
","
it
matters
that
the
data
is
in
the
system
.
My
boss
was
pretty
impressed
.
Where
I
often
see
the
dynamic
languages
used
for
is
testing
.
It
is
much
easier
to
create
a
Python
/
Perl
/
Ruby
program
to
link
to
a
web
service
and
throw
some
data
against
it
than
it
is
to
create
the
equivalent
Java
program
.
You
can
also
use
python
to
hit
against
command
line
programs
","
generate
a
ton
of
garbage
(
but
still
valid
)
test
data
","
etc..
quite
easily
.
The
other
thing
that
dynamic
languages
are
big
on
is
code
generation
.
Creating
the
C
#
/
C
+
+
/
Java
code
.
Some
examples
follow
:
The
first
code
generation
task
I
often
see
is
people
using
dynamic
languages
to
maintain
constants
in
the
system
.
Instead
of
hand
coding
a
bunch
of
enums
","
a
dynamic
language
can
be
used
to
fairly
easily
parse
a
text
file
and
create
the
Java
/
C
#
code
with
the
enums
.
SQL
is
a
whole
other
ball
game
but
often
you
get
better
performance
by
cut
and
pasting
100
times
instead
of
trying
to
do
a
function
(
due
to
caching
of
execution
plans
or
putting
complicated
logic
in
a
function
causing
you
to
go
row
by
row
instead
of
in
a
set
)
.
In
fact
it
is
quite
useful
to
use
the
table
definition
to
create
certain
stored
procedures
automatically
.
It
is
always
better
to
get
buy
in
for
a
code
generator
.
But
even
if
you
don't
","
is
it
more
fun
to
spend
time
cutting
/
pasting
or
is
it
more
fun
to
create
a
Perl
/
Python
/
Ruby
script
once
and
then
have
that
generate
the
code
?
If
it
takes
you
hours
to
hand
code
something
but
less
time
to
create
a
code
generator
","
then
even
if
you
use
it
once
you
have
saved
time
and
hence
money
.
If
it
takes
you
longer
to
create
a
code
generator
than
it
takes
to
hand
code
once
but
you
know
you
will
have
to
update
the
code
more
than
once
","
it
may
still
make
sense
.
If
it
takes
you
2
hours
to
hand
code
","
4
hours
to
do
the
generator
but
you
know
you'll
have
to
hand
code
equivalent
work
another
5
or
6
times
than
it
is
obviously
better
to
create
the
generator
.
Also
some
things
are
easier
with
dynamic
languages
than
Java
/
C
#
/
C
/
C
+
+
.
In
particular
regular
expressions
come
to
mind
.
If
you
start
using
regular
expressions
in
Perl
and
realize
their
value
","
you
may
suddenly
start
making
use
of
the
Java
regular
expression
library
if
you
haven't
before
.
If
you
have
then
there
may
be
something
else
.
I
will
leave
you
with
one
last
example
of
a
task
that
would
have
been
great
for
a
dynamic
language
.
My
work
mate
had
to
take
a
directory
full
of
files
and
burn
them
to
various
cd's
for
various
customers
.
There
were
a
few
customers
but
a
lot
of
files
and
you
had
to
look
in
them
to
see
what
they
were
.
He
did
this
task
by
hand....A
Java
/
C
#
program
would
have
saved
time
","
but
for
one
time
and
with
all
the
development
overhead
it
isn't
worth
it
.
However
slapping
something
together
in
Perl
/
Python
/
Ruby
probably
would
have
been
worth
it
.
He
spent
several
hours
doing
it
.
It
would
have
taken
less
than
one
to
create
the
Python
script
to
inspect
each
file
","
match
which
customer
it
goes
to
","
and
then
move
the
file
to
the
appropriate
place.....Again
","
not
part
of
the
standard
job
.
But
the
task
came
up
as
a
one
off
.
Is
it
better
to
do
it
yourself
","
spend
the
larger
amount
of
time
to
make
Java
/
C
#
do
the
task
","
or
spend
a
much
smaller
amount
of
time
doing
it
in
Python
/
Perl
/
Ruby
.
If
you
are
using
C
or
C
+
+
the
point
is
even
more
dramatic
due
to
the
extra
concerns
of
programming
in
C
or
C
+
+
(
pointers
","
no
array
bounds
checking
","
etc.
)
.
