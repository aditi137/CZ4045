,0
0,Scipy
1,implements
2,standard
3,N
4,-dimensional
5,convolutions
6,","
7,so
8,that
9,the
10,matrix
11,to
12,be
13,convolved
14,and
15,the
16,kernel
17,are
18,both
19,N
20,-dimensional.
21,A
22,quick
23,fix
24,would
25,be
26,to
27,add
28,an
29,extra
30,dimension
31,to
32,Y
33,so
34,that
35,Y
36,is
37,3
38,-Dimensional:
39,I
40,'m
41,assuming
42,here
43,that
44,the
45,last
46,axis
47,corresponds
48,to
49,the
50,image
51,index
52,as
53,in
54,your
55,example
56,"[width, height, image_idx]"
57,(or
58,"[height, width, image_idx]"
59,).
60,If
61,it
62,is
63,the
64,other
65,way
66,around
67,and
68,the
69,images
70,are
71,indexed
72,in
73,the
74,first
75,axis
76,(as
77,it
78,is
79,more
80,common
81,in
82,C
83,-ordering
84,arrays
85,)
86,you
87,should
88,replace
89,Y
90,"[...,"
91,None
92,]
93,with
94,Y
95,"[None,"
96,...].
97,The
98,line
99,Y
100,"[...,"
101,None
102,]
103,will
104,add
105,an
106,extra
107,axis
108,to
109,Y
110,","
111,making
112,it
113,3
114,-dimensional
115,"[kernel_width, kernel_height, 1]"
116,and
117,thus
118,","
119,converting
120,it
121,to
122,a
123,valid
124,3
125,-Dimensional
126,convolution
127,kernel
128,.
129,"NOTE: This assumes that all your input mini-batches have the same width x height, which is standard in CNN's.
EDIT: Some timings as @Divakar suggested.
The testing framework is setup as follows:
Find bellow tests for different configurations:
Varying image size S:
Varying number of images N:
Varying kernel size K:
So, in short, ndimage.convolve is always faster, except when the kernel size is very large (as K = 31 in the last test)"
130,.
