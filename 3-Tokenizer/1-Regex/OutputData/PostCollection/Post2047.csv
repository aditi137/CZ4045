,0
0,I
1,am
2,working
3,with
4,PyZMQ
5,and
6,I
7,have
8,what
9,seems
10,to
11,be
12,a
13,rather
14,peculiar
15,issue
16,.
17,I
18,have
19,two
20,classes
21,that
22,are
23,wrapping
24,sockets
25,for
26,communication
27,","
28,MZLSubscriber
29,and
30,MZLRequester
31,.
32,There
33,is
34,a
35,class
36,that
37,contains
38,both
39,of
40,them
41,","
42,MZLLink
43,.
44,For
45,each
46,of
47,these
48,","
49,I
50,also
51,have
52,tests
53,MZLSubscriberTest
54,","
55,MZLRequesterTest
56,","
57,and
58,MZLinkTest
59,.
60,The
61,tests
62,for
63,the
64,subscriber
65,and
66,requester
67,work
68,as
69,they
70,should
71,","
72,but
73,MZLinkTest
74,does
75,not
76,receive
77,any
78,subscriber
79,messages
80,.
81,Below
82,is
83,what
84,seems
85,to
86,be
87,the
88,relative
89,code
90,","
91,which
92,are
93,the
94,constructors
95,for
96,the
97,3
98,classes
99,as
100,well
101,as
102,run
103,()
104,for
105,MZLSubscriber
106,and
107,the
108,tests
109,for
110,MZLink
111,and
112,MZLSubscriber
113,.
114,MZLink
115,"Constructor:
MZLink Test:
MZLRequester Constructor:
MZLSubscriber Constructor:
MZLSubscriber.run()"
116,:
117,MZLSubscriber
118,"Test:
The subscriber thread seems to block at datum = self.socket.recv()"
119,","
120,which
121,makes
122,me
123,think
124,it
125,could
126,be
127,some
128,issue
129,with
130,the
131,socket
132,creation
133,.
134,However
135,","
136,it
137,does
138,seem
139,to
140,work
141,when
142,only
143,working
144,with
145,the
146,subscriber
147,.
148,The
149,requester
150,seems
151,to
152,work
153,in
154,both
155,cases
156,.
157,In
158,addition
159,","
160,everything
161,goes
162,smoothly
163,by
164,just
165,commenting
166,out
167,the
168,two
169,lines
170,dealing
171,with
172,requester
173,.
174,I
175,apologize
176,for
177,the
178,wall
179,of
180,code
181,","
182,but
183,I
184,can
185,'t
186,even
187,narrow
188,what
189,code
190,the
191,issue
192,is
193,coming
194,from
195,at
196,this
197,point
198,.
199,When
200,I
201,do
202,","
203,I
204,'ll
205,remove
206,the
207,irrelevant
208,code
209,.
210,The
211,test
212,code
213,that
214,deals
215,with
216,the
217,incoming
218,data
219,has
220,been
221,removed
222,.
223,As
224,a
225,bit
226,of
227,clarification
228,","
229,I
230,am
231,using
232,Python
233,2
234,.7
235,with
236,PyZMQ
237,14
238,.3.1.
239,"UPDATE: It seems that running MZLSubscriber in the main thread rather than creating another Process results in the expected result, so it seems that this could be some sort of thread safety. To my knowledge, zmq contexts are thread-safe, but sockets are not. I thought this wouldn't cause an issue because I'm explicitly making sure there is a socket for each thread.
UPDATE 2: If the calls setting up the socket in MZLSubscriber are moved from run()"
240,to
241,__init__
242,","
243,the
244,socket
245,seems
246,to
247,receive
248,a
249,small
250,portion
251,of
252,the
253,published
254,message
255,","
256,but
257,does
258,have
259,an
260,"error:
I have gotten a workaround to this by creating a new zmq.Context in MZLSubscriber.run()"
261,","
262,although
263,I
264,feel
265,that
266,this
267,shouldn
268,'t
269,be
270,necessary
271,if
272,zmq
273,contexts
274,are
275,thread
276,-safe.
