,0
0,If
1,you
2,could
3,slightly
4,modify
5,your
6,call
7,patterns
8,","
9,I
10,could
11,imagine
12,that
13,it
14,is
15,"feasible:
In this way, you could perfectly make it work with __getattr__ if you make boot()"
16,return
17,an
18,object
19,which
20,provides
21,these
22,methods
23,.
24,If
25,not
26,","
27,you
28,could
29,try
30,one
31,of
32,the
33,"following:
Just call cfg.instance.get('a')"
34,Give
35,Service
36,a
37,"metaclass:
Here the metaclass provides an appropriate way to deflect attribute accesses to the class to one of its attributes.
Be aware that under Py3, the syntax is slightly different. IIRC, it is
(However, it seems slightly wrong to me to use the Service class just for this kind of encapsulation.
You can do this cfg = boot(...)"
38,from
39,my
40,first
41,idea
42,at
43,one
44,place
45,and
46,subsequently
47,use
48,cfg
49,for
50,every
51,access
52,.
53,You
54,might
55,even
56,(misleadingly)
57,name
58,it
59,"Config:
or
and subsequently use cfg (or Config)"
60,everywhere
61,you
62,want
63,.)
