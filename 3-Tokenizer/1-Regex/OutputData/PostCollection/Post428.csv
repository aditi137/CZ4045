,0
0,The
1,answer
2,to
3,the
4,question
5,"is: PEP-8 wants to make a recommendation and has decided that since spaces are more popular it will strongly recommend spaces over tabs.
Notes on PEP-8
PEP-8 says 'Use 4 spaces per indentation level.'
Its clear that this is the standard recommendation.
'For really old code that you don't want to mess up, you can continue to use 8-space tabs.'
Its clear that there are SOME circumstances when tabs can be used.
'Never mix tabs and spaces.'
This is a clear prohibition of mixing - I think we all agree on this.  Python can detect this and often chokes.  Using the -tt argument makes this an explicit error.
'The most popular way of indenting Python is with spaces only.  The second-most popular way is with tabs only.'
This clearly states that both are used.  Just to be ultra-clear: You should still never mix spaces and tabs in same file.
'For new projects, spaces-only are strongly recommended over tabs.'
This is a clear recommendation, and a strong one, but not a prohibition of tabs.
I can't find a good answer to my own question in PEP-8. 
I use tabs, which I have used historically in other languages.
Python accepts source with exclusive use of tabs.  That's good enough for me.
I thought I would have a go at working with spaces.  In my editor, I configured a file type to use spaces exclusively and so it inserts 4 spaces if I press tab.  If I press tab too many times, I have to delete the spaces!  Arrgh!  Four times as many deletes as tabs!  My editor can't tell that I'm using 4 spaces for indents (although AN editor might be able to do this)"
6,and
7,obviously
8,insists
9,on
10,deleting
11,the
12,spaces
13,one
14,at
15,a
16,time
17,.
18,Couldn
19,'t
20,Python
21,be
22,told
23,to
24,consider
25,tabs
26,to
27,be
28,n
29,spaces
30,when
31,its
32,reading
33,indentations
34,?
35,If
36,we
37,could
38,agree
39,on
40,4
41,spaces
42,per
43,indentation
44,and
45,4
46,spaces
47,per
48,tab
49,and
50,allow
51,Python
52,to
53,accept
54,this
55,","
56,then
57,there
58,would
59,be
60,no
61,problems
62,.
63,We
64,should
65,find
66,win
67,-win
68,solutions
69,to
70,problems
71,.
