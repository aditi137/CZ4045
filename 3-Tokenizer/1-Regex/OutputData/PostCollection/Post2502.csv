,0
0,I
1,'ll
2,need
3,to
4,read
5,your
6,post
7,in
8,more
9,detail
10,","
11,but
12,will
13,start
14,with
15,some
16,general
17,observations
18,(from
19,previous
20,iteration
21,questions
22,).
23,There
24,isn
25,'t
26,an
27,efficient
28,way
29,of
30,iterating
31,over
32,arrays
33,in
34,Python
35,","
36,though
37,there
38,are
39,things
40,that
41,slow
42,things
43,down
44,.
45,I
46,like
47,to
48,distinguish
49,between
50,the
51,iteration
52,mechanism
53,"(nditer,"
54,for
55,x
56,in
57,A:)
58,and
59,the
60,action
61,"(alist.append(...),"
62,x
63,[i+1]
64,+=
65,1
66,).
67,The
68,big
69,time
70,consumer
71,is
72,usually
73,the
74,action
75,","
76,done
77,many
78,times
79,","
80,not
81,the
82,iteration
83,mechanism
84,itself
85,.
86,Letting
87,numpy
88,do
89,the
90,iteration
91,in
92,compiled
93,code
94,is
95,the
96,fastest
97,.
98,is
99,much
100,faster
101,than
102,The
103,np
104,.nditer
105,isn
106,'t
107,any
108,faster
109,.
110,nditer
111,is
112,recommended
113,as
114,a
115,general
116,iteration
117,tool
118,in
119,compiled
120,code
121,.
122,But
123,its
124,main
125,value
126,lies
127,in
128,handling
129,broadcasting
130,and
131,coordinating
132,the
133,iteration
134,over
135,several
136,arrays
137,(input/output).
138,And
139,you
140,need
141,to
142,use
143,buffering
144,and
145,c
146,like
147,code
148,to
149,get
150,the
151,best
152,speed
153,from
154,nditer
155,(I'll
156,look
157,up
158,a
159,recent
160,SO
161,question
162,).
163,"https://stackoverflow.com/a/39058906/901925
Don't use nditer without studying the relevant iteration tutorial page (the one that ends with a cython example)"
164,.
165,=========================
166,Just
167,judging
168,from
169,experience
170,","
171,this
172,approach
173,will
174,be
175,fastest
176,.
177,Yes
178,it
179,'s
180,going
181,to
182,iterate
183,over
184,secaxis
185,a
186,number
187,of
188,times
189,","
190,but
191,those
192,are
193,all
194,done
195,in
196,compiled
197,code
198,","
199,and
200,will
201,be
202,much
203,faster
204,than
205,any
206,iteration
207,in
208,Python
209,.
210,And
211,the
212,for
213,f
214,in
215,"X: iteration is just a few times.
@HYRY has explored alternatives for making the where step faster.  But as you can see the differences aren't that big.  Other possible tweaks
If X was an array, res could be an array as well.
But for small N I suspect the list res is just as good.  Don't need to make the arrays any bigger than necessary.  The tweaks are minor, just trying to avoid recalculating things.
=================
This use of np.where is just np.nonzero.  That actually makes two passes of the array, once with np.count_nonzero to determine how many values it will return, and create the return structure (list of arrays of now known length)"
216,.
217,And
218,a
219,second
220,loop
221,to
222,fill
223,in
224,those
225,indices
226,.
227,So
228,multiple
229,iterations
230,are
231,fine
232,if
233,it
234,keeps
235,action
236,simple
237,.
