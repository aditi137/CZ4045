,0
0,"Solution: you have __all__ set to empty list i.e. from package import * basically imports nothing
set it to __all__ = ['submodule'] in __init__.py
What exactly is __all__ ?
In simplest words all help customizing the from package import * i.e. with all we can set what will be imported and what not.
From the docs:
The public names defined by a module are determined by checking the
  module’s namespace for a variable named all; if defined, it must
  be a sequence of strings which are names defined or imported by that
  module. The names given in all are all considered public and are
  required to exist. If all is not defined, the set of public names
  includes all names found in the module’s namespace which do not begin
  with an underscore character ('_')"
1,.
2,all
3,should
4,contain
5,the
6,entire
7,public
8,API
9,.
10,It
11,is
12,intended
13,to
14,avoid
15,accidentally
16,exporting
17,items
18,that
19,are
20,not
21,part
22,of
23,the
24,API
25,(such
26,as
27,library
28,modules
29,which
30,were
31,imported
32,and
33,used
34,within
35,the
36,module
37,).
38,One
39,important
40,thing
41,to
42,note
43,here
44,is
45,-
46,Imports
47,without
48,*
49,are
50,not
51,affected
52,by
53,__all__
54,i
55,.e.
56,Members
57,that
58,are
59,not
60,mentioned
61,in
62,__all__
63,are
64,accessible
65,from
66,outside
67,the
68,module
69,using
70,direct
71,import
72,-
73,from
74,<module>
75,import
76,<member>.
77,An
78,Example
79,:
80,the
81,following
82,code
83,in
84,a
85,module
86,.py
87,explicitly
88,exports
89,the
90,symbols
91,foo
92,and
93,bar
94,:
95,These
96,symbols
97,can
98,then
99,be
100,imported
101,like
102,so
103,:
