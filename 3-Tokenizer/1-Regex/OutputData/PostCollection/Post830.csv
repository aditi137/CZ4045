,0
0,Your
1,implementation
2,of
3,this
4,scheme
5,is
6,reasonable
7,.
8,I
9,would
10,not
11,choose
12,this
13,scheme
14,to
15,implement
16,automated
17,FTP
18,messaging
19,","
20,if
21,that
22,is
23,what
24,you
25,'re
26,doing
27,.
28,There
29,are
30,two
31,weaknesses
32,of
33,this
34,"approach:
It does not support filenames that repeat.  Any filename that occurs in the ""old"" history will not be detected as a new file.  Maybe this is a problem for you, maybe not.  But even if filenames are guaranteed unique now, that may not always be true.
It does not tell you whether a new file is ready to be consumed or not.  It is possible that a new file will be processed while it is still being uploaded.  Some people apply a ""no change in size for X seconds"" rule, but that just increases delay and still leaves a vulnerability to severed connections.
One scheme that is similar but does not have either of these two problems is to actually store a file on the server with a reserved name, or in a separate place, and use its timestamp (preferably the modification time of the file itself)"
35,to
36,decide
37,which
38,files
39,can
40,be
41,safely
42,processed
43,.
44,This
45,"""semaphore"""
46,file
47,is
48,updated
49,to
50,the
51,current
52,time
53,as
54,the
55,last
56,step
57,in
58,uploading
59,a
60,file
61,.
62,All
63,files
64,with
65,a
66,modification
67,time
68,older
69,than
70,the
71,semaphore
72,timestamp
73,can
74,be
75,processed
76,.
77,Once
78,processed
79,","
80,all
81,files
82,must
83,be
84,deleted
85,out
86,of
87,the
88,upload
89,folder
90,so
91,they
92,won
93,'t
94,be
95,processed
96,twice
97,.
98,I
99,have
100,seen
101,this
102,scheme
103,work
104,well
105,in
106,an
107,automated
108,production
109,data
110,flow
111,.
