,0
0,You
1,'re
2,doing
3,some
4,very
5,odd
6,things
7,here
8,.
9,Let
10,'s
11,go
12,through
13,a
14,few
15,of
16,them
17,.
18,1
19,-
20,name = jobs
21,[j]
22,['Job_Name'][0]
23,It
24,seems
25,to
26,me
27,that
28,perhaps
29,jobs
30,is
31,a
32,container
33,of
34,dictionaries
35,","
36,which
37,have
38,a
39,key
40,"'Job_Name',"
41,and
42,that
43,key
44,'s
45,value
46,is
47,a
48,list
49,or
50,tuple
51,.
52,I
53,think
54,what
55,you
56,might
57,mean
58,"is:
name = j['Job_name'][0]
If jobs is just a list of strings, being job names, all you need is this:
name = j, which you can just skip - and just use j when you want to refer to it.
2 - p=re.compile(""(\\w*)"
59,":?\\w*-?\\d*"")"
60,You
61,'re
62,compiling
63,your
64,regex
65,every
66,time
67,you
68,go
69,through
70,the
71,loop
72,","
73,where
74,it
75,is
76,exactly
77,the
78,same
79,each
80,time
81,","
82,and
83,you
84,use
85,it
86,exactly
87,once
88,.
89,Do
90,this
91,compilation
92,before
93,the
94,loop
95,begins
96,.
97,3
98,-
99,You
100,don
101,'t
102,need
103,your
104,else
105,clause
106,at
107,all
108,.
109,And
110,if
111,you
112,want
113,"""else"
114,if
115,""""
116,in
117,Python
118,","
119,you
120,use
121,"""elif""."
122,4
123,-
124,Your
125,regex
126,could
127,be
128,simplified
129,by
130,using
131,a
132,raw
133,string
134,to
135,eliminate
136,all
137,the
138,double
139,"escapes: p=re.compile(r""(\w*)"
140,":?\w*-?\d*"")"
141,5
142,-
143,Your
144,whole
145,regex
146,may
147,be
148,unnecessary
149,.
150,If
151,you
152,'re
153,doing
154,what
155,I
156,think
157,you
158,'re
159,doing
160,","
161,you
162,just
163,want
164,what
165,appears
166,before
167,the
168,first
169,colon
170,","
171,if
172,there
173,is
174,one
175,.
176,(Unless
177,you
178,really
179,mean
180,group
181,"(1),"
182,which
183,I
184,think
185,you
186,don
187,'t.)
188,Which
189,means
190,you
191,could
192,skip
193,the
194,regex
195,(since
196,you
197,'re
198,matching
199,with
200,in
201,anyhow
202,"),"
203,and
204,just
205,use
206,something
207,like
208,name = name
209,.split(':')[0]
