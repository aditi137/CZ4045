,0
0,I
1,have
2,two
3,"models:
The relationship is one-to-many (one answer has many photos)"
4,I
5,need
6,to
7,write
8,a
9,reporting
10,function
11,that
12,outputs
13,all
14,answers
15,along
16,with
17,corresponding
18,photos
19,.
20,Here
21,is
22,what
23,I
24,"have:
This works, but as you can see it already, the number of times for photo in answer.photos.all()"
25,will
26,be
27,executed
28,equal
29,to
30,the
31,number
32,of
33,answers
34,in
35,the
36,db
37,.
38,Preferably
39,","
40,I
41,would
42,like
43,to
44,only
45,execute
46,two
47,db
48,querys
49,","
50,one
51,fetches
52,all
53,of
54,the
55,answers
56,and
57,the
58,other
59,fetches
60,all
61,of
62,the
63,photos
64,.
65,So
66,I
67,tried
68,"this:
This approach has decreased the number of db queries down to two but it takes even longer to execute as whole. 9.5 seconds for this approach vs 7.5 seconds for the 1st approach.
Any suggestions on how to be more effcient?
Thank you!
P.S. I am using Django 1.8.2
UPDATE: I used the method suggested by @Mark Galloway, and the execution time has dropped to 1.6 seconds. The number of queries becomes 3. Django performed the following query:
select * from answer
select * from photo
select * from photo where 'photo.answer_id' in (19,20,3...)"
69,#
70,the
71,numbers
72,inside
73,the
74,()
75,does
76,not
77,seem
78,to
79,be
80,continous
81,I
82,wonder
83,what
84,is
85,the
86,purpose
87,of
88,the
89,last
90,query
91,?
