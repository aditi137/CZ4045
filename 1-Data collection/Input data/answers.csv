Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate
"4958","2","","4942","2008-08-07 16:50:43","","2","","<p>Focus on the shorter time needed for development/prototype and possibly easier maintenance (none of this may apply against Ruby).</p>
","613","","","","","2008-08-07 16:50:43","","","","0","","",""
"4978","2","","4942","2008-08-07 17:04:25","","11","","<p>This is one of those cases that really boil down to personal preference or situational details. If you're more comfortable and experienced with Python, then say so. Are they asking you to justify it because they're more comfortable with one of the other environments? After you're done, will the system be passed off to someone else for long-term maintenance?</p>

<p>If they ask you to use a technology or language that you're not as familiar with, then make sure they know up-front that it's going to take you longer.</p>
","676","","","","","2008-08-07 17:04:25","","","","0","","",""
"5014","2","","4942","2008-08-07 17:30:10","","3","","<p>I would consider that using python on a new project is completely dependent on what problem you are trying to solve with python.  If you want someone to agree with you that you should use python, then show them how python's features apply specifically to that problem.</p>

<p>In the case of web development with python, talk about WSGI and other web libraries and frameworks you could use that would make your life easier.  One note for python is that most of the frameworks for python web development can be plugged right into any current project. With ruby on rails, you're practically working in a DSL that anyone who uses your project will have to learn.  If they know python, then they can figure out what you are doing with django, etc in a day.</p>

<p>I'm only talking about web development because it appears that's what you are going to be working on seeing ruby, python and PHP in the same list.  The real message that's important is applying to whatever it is you like about python <em>directly</em> to some problem you are trying to solve.</p>
","660","","","","","2008-08-07 17:30:10","","","","0","","",""
"15291","2","","4942","2008-08-18 22:06:02","","0","","<p>I agree with mreggen. Tell them by working in Python you can get things done faster. Getting things done faster possibly means money saved by the client. In the least it means that you are working with a language you a more comfortable in, meaning faster development, debugging, and refactoring time. There will be less time spent looking up documentation on what function to use to find the length of a string, etc. </p>
","1797","mk","","","","2008-08-18 22:06:02","","","","0","","",""
"15296","2","","4942","2008-08-18 22:10:13","","4","","<p>It's one of the preferred languages over at Google - It's several years ahead of Ruby in terms of ""maturity"" (what ever that really means - but managers like that). Since it's prefered by Google you can also run it on the Google App Engine.</p>

<p>Mircosoft is also embracing Python, and will have a v2.0 of IronPython coming out shortly. They are working on a Ruby implementation as well, but the Python version is way ahead, and is actually ""ready for primetime"". That give you the possibility for easy integration with .NET code, as well as being able to write client side RIAs in Python when Silverlight 2 ships.</p>
","1199387","Jonas Folles√∏","","","","2008-08-18 22:10:13","","","","0","","",""
"21221","2","","4942","2008-08-21 21:24:10","","6","","<p>The best sell of Python I've ever seen was by a manager in our group who had a young daughter.  He used a quote attributed to Einstein:</p>

<blockquote>
  <p>If you can't explain something to a six-year-old, you really don't understand it yourself.</p>
</blockquote>

<p>The next few slides of his presentation demonstrated how he was able to teach his young daughter some basic Python in less than 30 minutes, with examples of the code she wrote and an explanation of what it did.</p>

<p>He ended the presentation with a picture of his daughter and her quote ""Programming is fun!""</p>

<p>I would focus on Python's user friendliness and wealth of libraries and frameworks.  There are also a lot of little libraries that you might not get in other languages, and would have to write yourself (i.e. <a href=""http://blog.programmerslog.com/?p=124"" rel=""noreferrer"">How a C++ developer writes Python</a>).</p>

<p>Good luck!</p>
","2363","Tyler","","","","2008-08-21 21:24:10","","","","1","","",""
"9420311","2","","4942","2012-02-23 19:59:12","","0","","<p>Give them a snippet of code in each (no more than a page) that performs some cool function that they will like. (e.g show outliers in a data set).</p>

<p>Show them each page. One in PHP, Ruby and Python.</p>

<p>Ask them which they find easiest to understand/read.</p>

<p>Tell them thats why you want to use Python. It's easier to read if you've not written it, more manageable, less buggy and quicker to build features because it is the most elegant (pythonic)</p>
","200983","","","","","2012-02-23 19:59:12","","","","0","","",""
"32847801","2","","4942","2015-09-29 15:18:37","","0","","<p>Though <em>All 3 languages are versatile and used worldwide by programmers</em>, Python still have some advantages over the other two. Like From my personal experience :-</p>

<blockquote>
  <ol>
  <li>Non-programmers love it (most of 'em choose Python as their first computer language,check this infographic <a href=""https://blog.udemy.com/wp-content/uploads/2012/01/PROGRAMMING-LANGUAGE-3.png"" rel=""nofollow"">php vs python vs ruby</a> here)</li>
  <li>Multiple frameworks (You can automate your system tasks, can develop apps for web and windows/mac/android OSes)</li>
  <li>Making OpenCV apps easily than MATLAB </li>
  <li>Testing done easy (you can work on Selenium for all kind of web testing)</li>
  </ol>
</blockquote>

<p>OOPS concepts are followed by most languages now , so how come Python can stay behind! Inheritance, Abstraction and Encapsulation are followed by Python as well.</p>

<p>Python as of now is divided into two versions popularly that are not much different in terms of performance but features. <strong>Python2.x and Python 3.x</strong> both have same syntax ,except for some statements like :-</p>

<ol>
<li><strong>print ""...""</strong> in Python2.x and <strong>print()</strong> in Python3.x</li>
<li><strong>raw_input()</strong> in Python2.x and <strong>input()</strong> in Python3.x (<em>for getting user input</em>)</li>
</ol>

<p>In the end, client only cares about money and Python helps you save a lot as compared to PHP and Ruby , because instead of hiring experienced programmers , you can make a newbie learn and use Python expertly.</p>
","5014339","","","","","2015-09-29 15:18:37","","","","0","","",""
"13040","2","","12591","2008-08-16 07:57:53","","1","","<p>Can you give an example? According to the <a href=""http://codespeak.net/lxml/validation.html"" rel=""nofollow noreferrer"">lxml validation docs</a>, lxml can handle DTD validation (specified in the XML doc or externally in code) and system catalogs, which covers most cases I can think of.</p>

<pre><code>f = StringIO(""&lt;!ELEMENT b EMPTY&gt;"")
dtd = etree.DTD(f)
dtd = etree.DTD(external_id = ""-//OASIS//DTD DocBook XML V4.2//EN"")
</code></pre>
","995","micktwomey","","","","2008-08-16 07:57:53","","","","0","","",""
"36219","2","","12591","2008-08-30 18:10:33","","0","","<p>It seems that lxml does not expose this libxml2 feature, grepping the source only turns up some #defines for the error handling:</p>

<pre><code>C:\Dev&gt;grep -ir --include=*.px[id] catalog lxml-2.1.1/src | sed -r ""s/\s+/ /g""
lxml-2.1.1/src/lxml/dtd.pxi: catalog.
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_FROM_CATALOG = 20 # The Catalog module
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_WAR_CATALOG_PI = 93 # 93
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_MISSING_ATTR = 1650
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_ENTRY_BROKEN = 1651 # 1651
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_PREFER_VALUE = 1652 # 1652
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_NOT_CATALOG = 1653 # 1653
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_RECURSION = 1654 # 1654
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG=20
lxml-2.1.1/src/lxml/xmlerror.pxi:WAR_CATALOG_PI=93
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_MISSING_ATTR=1650
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_ENTRY_BROKEN=1651
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_PREFER_VALUE=1652
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_NOT_CATALOG=1653
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_RECURSION=1654
</code></pre>

<p>From the <a href=""http://xmlsoft.org/catalog.html"" rel=""nofollow noreferrer"">catalog implementation in libxml2 page</a> it seems possible that the 'transparent' handling through installation in /etc/xml/catalog may still work in lxml, but if you need more than that you can always abandon lxml and use the default python bindings, which do expose the catalog functions.</p>
","3665","gz","","","","2008-08-30 18:10:33","","","","0","","",""
"8391738","2","","12591","2011-12-05 20:54:36","","5","","<p>You can add the catalog to the <code>XML_CATALOG_FILES</code> environment variable:</p>

<pre><code>os.environ['XML_CATALOG_FILES'] = 'file:///to/my/catalog.xml'
</code></pre>

<p>See <a href=""http://thread.gmane.org/gmane.comp.python.lxml.devel/5907"" rel=""nofollow"">this thread</a>. Note that entries in <code>XML_CATALOG_FILES</code> are space-separated URLs. You can use Python's <code>pathname2url</code> and <code>urljoin</code> (with <code>file:</code>) to generate the URL from a pathname.</p>
","438249","","438249","","2012-04-19 15:16:54","2012-04-19 15:16:54","","","","0","","",""
"12609","2","","12592","2008-08-15 19:04:13","","56","","<p>Yes. You can do it. The <a href=""https://docs.python.org/3/library/doctest.html"" rel=""noreferrer"">doctest module documentation</a> and Wikipedia has an <a href=""http://en.wikipedia.org/wiki/Doctest#Example_2:_doctests_embedded_in_a_README.txt_file"" rel=""noreferrer"">example</a> of it.</p>

<pre><code>   &gt;&gt;&gt; x
   Traceback (most recent call last):
     ...
   NameError: name 'x' is not defined
</code></pre>
","1448","cnu","1752050","","2014-06-11 23:55:51","2014-06-11 23:55:51","","","","0","","",""
"33787471","2","","12592","2015-11-18 18:22:25","","2","","<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.log(-2)
Traceback (most recent call last):
 ...
ValueError: math domain error
</code></pre>

<p>ellipsis flag <em># doctest: +ELLIPSIS</em> is not required to use ... in Traceback doctest </p>
","5577962","","5577962","","2015-11-18 18:31:29","2015-11-18 18:31:29","","","","0","","",""
"12713","2","","12692","2008-08-15 20:37:24","","7","","<p>The current version of ASP.NET integration for IronPython is not very up-to-date and is more of a ""proof-of-concept."" I don't think I'd build a production website based on it.</p>

<p><strong>Edit:</strong>: I have a very high level of expectation for how things like this should work, and might setting the bar a little high.  Maybe you should take what's in ""ASP.NET Futures"", write a test application for it and see how it works for you.  If you're successful, I'd like to hear about it.  Otherwise, I think there should be a newer CTP of this in the next six months.</p>

<p>(I'm a developer on IronPython and IronRuby.)</p>

<p><strong>Edit 2:</strong> Since I originally posted this, a <a href=""http://www.codeplex.com/aspnet/Wiki/View.aspx?title=Dynamic%20Language%20Support"" rel=""nofollow noreferrer"">newer version</a> has been released.</p>
","533","Curt Hagenlocher","533","Curt Hagenlocher","2008-09-24 17:57:40","2008-09-24 17:57:40","","","","0","","",""
"21149","2","","12692","2008-08-21 20:48:29","","0","","<p>Keep a look out for ASP.NET MVC</p>

<p>The IronRuby guys have got some internal builds of MVC to work with IronRuby, and IronPython 2 and IronRuby have a lot of code in common with the DLR.</p>

<p>I'm not sure if they'll support IronPython/IronRuby when MVC is released, but it's definitely worth keeping your eye on anyway - The old ASP.NET forms-based development model is old, busted, and the sooner it goes away the better.</p>
","234","Orion Edwards","","","","2008-08-21 20:48:29","","","","0","","",""
"239346","2","","12692","2008-10-27 08:41:47","","1","","<p>Check out the <a href=""http://www.codeplex.com/aspnet/Wiki/View.aspx?title=Dynamic%20Language%20Support&amp;referringTitle=Home"" rel=""nofollow noreferrer"">Dynamic Languages in ASP.NET</a> page on Codeplex. This has the newest IronPython bits. It doesn't give you any Visual Studio integration, other than the sample website project, but that's coming.</p>
","5721","Jimmy Schementi","","","","2008-10-27 08:41:47","","","","0","","",""
"13949","2","","13941","2008-08-17 21:46:02","","57","","<p>Have you tried :</p>

<pre><code>import sys
sys.stdout.write('\a')
sys.stdout.flush()
</code></pre>

<p>That works for me here on Mac OS 10.5</p>

<p>Actually, I think your original attempt works also with a little modification:</p>

<pre><code>print('\a')
</code></pre>

<p>(You just need the single quotes around the character sequence).</p>
","1667","gbc","","","","2008-08-17 21:46:02","","","","3","","",""
"13959","2","","13941","2008-08-17 21:56:10","","5","","<p>I had to turn off the ""Silence terminal bell"" option in my active Terminal Profile in iTerm for <code>print('\a')</code> to work. It seemed to work fine by default in Terminal.</p>

<p>You can also use the Mac module <code>Carbon.Snd</code> to play the system beep:</p>

<pre><code>&gt;&gt;&gt; import Carbon.Snd
&gt;&gt;&gt; Carbon.Snd.SysBeep(1)
&gt;&gt;&gt; 
</code></pre>

<p>The Carbon modules don't have any documentation, so I had to use <code>help(Carbon.Snd)</code> to see what functions were available. It seems to be a direct interface onto Carbon, so the docs on Apple Developer Connection probably help.</p>
","1472","markpasc","","","","2008-08-17 21:56:10","","","","0","","",""
"34482","2","","13941","2008-08-29 15:47:05","","9","","<p>If you have PyObjC (the Python - Objective-C bridge) installed or are running on OS X 10.5's system python (which ships with PyObjC), you can do</p>

<pre><code>from AppKit import NSBeep
NSBeep()
</code></pre>

<p>to play the system alert.</p>
","2140","Barry Wark","","","","2008-08-29 15:47:05","","","","0","","",""
"6110229","2","","13941","2011-05-24 12:14:54","","6","","<p>I tried the mixer from the pygame module, and it works fine. First install the module:</p>

<pre><code>$ sudo apt-get install python-pygame
</code></pre>

<p>Then in the program, write this:</p>

<pre><code>from pygame import mixer
mixer.init() #you must initialize the mixer
alert=mixer.Sound('bell.wav')
alert.play()
</code></pre>

<p>With pygame you have a lot of customization options, which you may additionally experiment with.</p>
","711017","","","","","2011-05-24 12:14:54","","","","0","","",""
"46743047","2","","13941","2017-10-14 09:37:20","","0","","<p>Building on Barry Wark's answer...
<code>NSBeep()</code> from AppKit works fine, but also makes the terminal/app icon in the taskbar jump.
A few extra lines with <code>NSSound()</code> avoids that and gives the opportunity to use another sound:</p>

<pre><code>from AppKit import NSSound
#prepare sound:
sound = NSSound.alloc()
sound.initWithContentsOfFile_byReference_('/System/Library/Sounds/Ping.aiff', True)
#rewind and play whenever you need it:
sound.stop() #rewind
sound.play()
</code></pre>

<p>Standard sound files can be found via commandline <code>locate /System/Library/Sounds/*.aiff</code>
The file used by <code>NSBeep()</code> seems to be <code>'/System/Library/Sounds/Funk.aiff'</code></p>
","6488645","","6488645","","2017-10-14 09:46:37","2017-10-14 09:46:37","","","","0","","",""
"20843","2","","20794","2008-08-21 19:13:46","","3","","<p>Can I mention testing for hardlinks without python? /bin/test has the FILE1 -ef FILE2 condition that is true when files share an inode.</p>

<p>Therefore, something like <code>find . -type f -exec test \{} -ef /path/to/file \; -print</code> works for hard link testing to a specific file.</p>

<p>Which brings me to reading <code>man test</code> and the mentions of <code>-L</code> and <code>-h</code> which both work on one file and return true if that file is a symbolic link, however that doesn't tell you if the target is missing.</p>

<p>I did find that <code>head -0 FILE1</code> would return an exit code of <code>0</code> if the file can be opened and a <code>1</code> if it cannot, which in the case of a symbolic link to a regular file works as a test for whether it's target can be read.</p>
","459","dlamblin","","","","2008-08-21 19:13:46","","","","0","","",""
"20845","2","","20794","2008-08-21 19:14:01","","1","","<p>I'm not a python guy but it looks like os.readlink()?  The logic I would use in perl is to use readlink() to find the target and the use stat() to test to see if the target exists.</p>

<p>Edit: I banged out some perl that demos readlink.  I believe perl's stat and readlink and python's os.stat() and os.readlink()are both wrappers for the system calls, so this should translate reasonable well as proof of concept code:</p>

<pre><code>wembley 0 /home/jj33/swap &gt; cat p
my $f = shift;

while (my $l = readlink($f)) {
  print ""$f -&gt; $l\n"";
  $f = $l;
}

if (!-e $f) {
  print ""$f doesn't exist\n"";
}
wembley 0 /home/jj33/swap &gt; ls -l | grep ^l
lrwxrwxrwx    1 jj33  users          17 Aug 21 14:30 link -&gt; non-existant-file
lrwxrwxrwx    1 root     users          31 Oct 10  2007 mm -&gt; ../systems/mm/20071009-rewrite//
lrwxrwxrwx    1 jj33  users           2 Aug 21 14:34 mmm -&gt; mm/
wembley 0 /home/jj33/swap &gt; perl p mm
mm -&gt; ../systems/mm/20071009-rewrite/
wembley 0 /home/jj33/swap &gt; perl p mmm
mmm -&gt; mm
mm -&gt; ../systems/mm/20071009-rewrite/
wembley 0 /home/jj33/swap &gt; perl p link
link -&gt; non-existant-file
non-existant-file doesn't exist
wembley 0 /home/jj33/swap &gt;
</code></pre>
","430","jj33","430","jj33","2008-08-21 19:56:37","2008-08-21 19:56:37","","","","0","","",""
"20848","2","","20794","2008-08-21 19:15:33","","11","","<p><a href=""https://docs.python.org/2/library/os.html#os.lstat"" rel=""nofollow noreferrer"">os.lstat()</a> may be helpful. If lstat() succeeds and stat() fails, then it's probably a broken link.</p>
","893","Greg Hewgill","768675","","2015-07-02 19:23:20","2015-07-02 19:23:20","","","","0","","",""
"20859","2","","20794","2008-08-21 19:19:24","","2","","<p><a href=""http://docs.python.org/lib/module-os.path.html"" rel=""nofollow noreferrer"">os.path</a></p>

<p>You may try using realpath() to get what the symlink points to, then trying to determine if it's a valid file using is file.</p>

<p>(I'm not able to try that out at the moment, so you'll have to play around with it and see what you get)</p>
","2147","Jason","","","","2008-08-21 19:19:24","","","","0","","",""
"26957","2","","20794","2008-08-25 21:32:20","","20","","<p>A common Python saying is that it's easier to ask forgiveness than permission.  While I'm not a fan of this statement in real life, it does apply in a lot of cases.  Usually you want to avoid code that chains two system calls on the same file, because you never know what will happen to the file in between your two calls in your code.</p>

<p><strong>A typical mistake is to write something like</strong>:</p>

<pre><code>if os.path.exists(path):
    os.unlink(path)
</code></pre>

<p>The second call (os.unlink) may fail if something else deleted it after your if test, raise an Exception, and stop the rest of your function from executing.  (You might think this doesn't happen in real life, but we just fished another bug like that out of our codebase last week - and it was the kind of bug that left a few programmers scratching their head and claiming 'Heisenbug' for the last few months)</p>

<p>So, in your particular case, I would probably do:</p>

<pre><code>try:
    os.stat(path)
except OSError, e:
    if e.errno == errno.ENOENT:
        print 'path %s does not exist or is a broken symlink' % path
    else:
        raise e
</code></pre>

<p>The annoyance here is that stat returns the same error code for a symlink that just isn't there and a broken symlink.</p>

<p>So, I guess you have no choice than to break the atomicity, and do something like</p>

<pre><code>if not os.path.exists(os.readlink(path)):
    print 'path %s is a broken symlink' % path
</code></pre>
","2900","Thomas Vander Stichele","694184","","2012-10-23 13:25:16","2012-10-23 13:25:16","","","","4","","",""
"31102280","2","","20794","2015-06-28 16:49:13","","7","","<p>This is not atomic but it works.</p>

<p><code>os.path.islink(filename) and not os.path.exists(filename)</code></p>

<p>Indeed by <a href=""https://docs.python.org/2/library/os.path.html"" rel=""noreferrer"">RTFM</a>
 (reading the fantastic manual) we see</p>

<blockquote>
  <p>os.path.exists(path)</p>
  
  <p>Return True if path refers to an existing path. Returns False for  broken symbolic links.</p>
</blockquote>

<p>It also says:</p>

<blockquote>
  <p>On some platforms, this function may return False if permission is not granted to execute os.stat() on the requested file, even if the path physically exists.</p>
</blockquote>

<p>So if you are worried about permissions, you should add other clauses.</p>
","5058564","","","","","2015-06-28 16:49:13","","","","1","","",""
"40274852","2","","20794","2016-10-27 01:49:11","","0","","<p>I had a similar problem: how to catch broken symlinks, even when they occur in some parent dir?  I also wanted to log all of them (in an application dealing with a fairly large number of files), but without too many repeats.</p>

<p>Here is what I came up with, including unit tests.</p>

<p><strong>fileutil.py</strong>:</p>

<pre><code>import os
from functools import lru_cache
import logging

logger = logging.getLogger(__name__)

@lru_cache(maxsize=2000)
def check_broken_link(filename):
    """"""
    Check for broken symlinks, either at the file level, or in the
    hierarchy of parent dirs.
    If it finds a broken link, an ERROR message is logged.
    The function is cached, so that the same error messages are not repeated.

    Args:
        filename: file to check

    Returns:
        True if the file (or one of its parents) is a broken symlink.
        False otherwise (i.e. either it exists or not, but no element
        on its path is a broken link).

    """"""
    if os.path.isfile(filename) or os.path.isdir(filename):
        return False
    if os.path.islink(filename):
        # there is a symlink, but it is dead (pointing nowhere)
        link = os.readlink(filename)
        logger.error('broken symlink: {} -&gt; {}'.format(filename, link))
        return True
    # ok, we have either:
    #   1. a filename that simply doesn't exist (but the containing dir
           does exist), or
    #   2. a broken link in some parent dir
    parent = os.path.dirname(filename)
    if parent == filename:
        # reached root
        return False
    return check_broken_link(parent)
</code></pre>

<p>Unit tests:</p>

<pre><code>import logging
import shutil
import tempfile
import os

import unittest
from ..util import fileutil


class TestFile(unittest.TestCase):

    def _mkdir(self, path, create=True):
        d = os.path.join(self.test_dir, path)
        if create:
            os.makedirs(d, exist_ok=True)
        return d

    def _mkfile(self, path, create=True):
        f = os.path.join(self.test_dir, path)
        if create:
            d = os.path.dirname(f)
            os.makedirs(d, exist_ok=True)
            with open(f, mode='w') as fp:
                fp.write('hello')
        return f

    def _mklink(self, target, path):
        f = os.path.join(self.test_dir, path)
        d = os.path.dirname(f)
        os.makedirs(d, exist_ok=True)
        os.symlink(target, f)
        return f

    def setUp(self):
        # reset the lru_cache of check_broken_link
        fileutil.check_broken_link.cache_clear()

        # create a temporary directory for our tests
        self.test_dir = tempfile.mkdtemp()

        # create a small tree of dirs, files, and symlinks
        self._mkfile('a/b/c/foo.txt')
        self._mklink('b', 'a/x')
        self._mklink('b/c/foo.txt', 'a/f')
        self._mklink('../..', 'a/b/c/y')
        self._mklink('not_exist.txt', 'a/b/c/bad_link.txt')
        bad_path = self._mkfile('a/XXX/c/foo.txt', create=False)
        self._mklink(bad_path, 'a/b/c/bad_path.txt')
        self._mklink('not_a_dir', 'a/bad_dir')

    def tearDown(self):
        # Remove the directory after the test
        shutil.rmtree(self.test_dir)

    def catch_check_broken_link(self, expected_errors, expected_result, path):
        filename = self._mkfile(path, create=False)
        with self.assertLogs(level='ERROR') as cm:
            result = fileutil.check_broken_link(filename)
            logging.critical('nothing')  # trick: emit one extra message, so the with assertLogs block doesn't fail
        error_logs = [r for r in cm.records if r.levelname is 'ERROR']
        actual_errors = len(error_logs)
        self.assertEqual(expected_result, result, msg=path)
        self.assertEqual(expected_errors, actual_errors, msg=path)

    def test_check_broken_link_exists(self):
        self.catch_check_broken_link(0, False, 'a/b/c/foo.txt')
        self.catch_check_broken_link(0, False, 'a/x/c/foo.txt')
        self.catch_check_broken_link(0, False, 'a/f')
        self.catch_check_broken_link(0, False, 'a/b/c/y/b/c/y/b/c/foo.txt')

    def test_check_broken_link_notfound(self):
        self.catch_check_broken_link(0, False, 'a/b/c/not_found.txt')

    def test_check_broken_link_badlink(self):
        self.catch_check_broken_link(1, True, 'a/b/c/bad_link.txt')
        self.catch_check_broken_link(0, True, 'a/b/c/bad_link.txt')

    def test_check_broken_link_badpath(self):
        self.catch_check_broken_link(1, True, 'a/b/c/bad_path.txt')
        self.catch_check_broken_link(0, True, 'a/b/c/bad_path.txt')

    def test_check_broken_link_badparent(self):
        self.catch_check_broken_link(1, True, 'a/bad_dir/c/foo.txt')
        self.catch_check_broken_link(0, True, 'a/bad_dir/c/foo.txt')
        # bad link, but shouldn't log a new error:
        self.catch_check_broken_link(0, True, 'a/bad_dir/c')
        # bad link, but shouldn't log a new error:
        self.catch_check_broken_link(0, True, 'a/bad_dir')

if __name__ == '__main__':
    unittest.main()
</code></pre>
","758174","","","","","2016-10-27 01:49:11","","","","0","","",""
"20983","2","","20927","2008-08-21 19:57:36","","6","","<p>You would also need to then save the message.  Then it that should work.</p>
","2168","John","","","","2008-08-21 19:57:36","","","","0","","",""
"72359","2","","20927","2008-09-16 13:44:51","","1","","<p>DateTime fields with auto_now are automatically updated upon calling <code>save()</code>, so you do not need to update them manually. Django will do this work for you.</p>
","12138","zgoda","","","","2008-09-16 13:44:51","","","","0","","",""
"33449486","2","","20927","2015-10-31 08:11:30","","0","","<p>Proper version to work is: (attention to last line <code>self.message.save()</code>)</p>

<pre><code>class Message(models.Model):
    updated = models.DateTimeField(auto_now = True)
    ...

class Attachment(models.Model):
    updated = models.DateTimeField(auto_now = True)
    message = models.ForeignKey(Message)

    def save(self):
        super(Attachment, self).save()
        self.message.save()
</code></pre>
","546822","","546822","","2015-12-01 14:03:26","2015-12-01 14:03:26","","","","0","","",""
"21468","2","","21454","2008-08-21 23:54:52","","88","","<p>From the <a href=""https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.choices"" rel=""noreferrer"">Django documentation</a>:</p>

<pre><code>MAYBECHOICE = (
    ('y', 'Yes'),
    ('n', 'No'),
    ('u', 'Unknown'),
)
</code></pre>

<p>And you define a charfield in your model :</p>

<pre><code>married = models.CharField(max_length=1, choices=MAYBECHOICE)
</code></pre>

<p>You can do the same with integer fields if you don't like to have letters
in your db.</p>

<p>In that case, rewrite your choices:</p>

<pre><code>MAYBECHOICE = (
    (0, 'Yes'),
    (1, 'No'),
    (2, 'Unknown'),
)
</code></pre>
","446497","Paul","1589422","Paul","2016-09-16 13:43:42","2016-09-16 13:43:42","","","","4","","",""
"33932","2","","21454","2008-08-29 03:57:14","","29","","<p>Using the <code>choices</code> parameter won't use the ENUM db type; it will just create a VARCHAR or INTEGER, depending on whether you use <code>choices</code> with a CharField or IntegerField.  Generally, this is just fine.  If it's important to you that the ENUM type is used at the database level, you have three options:</p>

<ol>
<li>Use ""./manage.py sql appname"" to see the SQL Django generates, manually modify it to use the ENUM type, and run it yourself.  If you create the table manually first, ""./manage.py syncdb"" won't mess with it.</li>
<li>If you don't want to do this manually every time you generate your DB, put some custom SQL in appname/sql/modelname.sql to perform the appropriate ALTER TABLE command.</li>
<li>Create a <a href=""http://docs.djangoproject.com/en/dev/howto/custom-model-fields/#howto-custom-model-fields"" rel=""noreferrer"">custom field type</a> and define the db_type method appropriately.</li>
</ol>

<p>With any of these options, it would be your responsibility to deal with the implications for cross-database portability.  In option 2, you could use <a href=""http://www.djangoproject.com/documentation/model-api/#database-backend-specific-sql-data"" rel=""noreferrer"">database-backend-specific custom SQL</a> to ensure your ALTER TABLE is only run on MySQL.  In option 3, your db_type method would need to check the database engine and set the db column type to a type that actually exists in that database.</p>

<p><strong>UPDATE</strong>: Since the migrations framework was added in Django 1.7, options 1 and 2 above are entirely obsolete. Option 3 was always the best option anyway. The new version of options 1/2 would involve a complex custom migration using <code>SeparateDatabaseAndState</code> -- but really you want option 3.</p>
","3207","Carl Meyer","3207","","2015-09-15 14:49:31","2015-09-15 14:49:31","","","","0","","",""
"334932","2","","21454","2008-12-02 18:21:16","","6","","<p>If you really want to use your databases ENUM type:</p>

<ol>
<li>Use Django 1.x</li>
<li>Recognize your application will only work on some databases.</li>
<li>Puzzle through this documentation page:<a href=""http://docs.djangoproject.com/en/dev/howto/custom-model-fields/#howto-custom-model-fields"" rel=""noreferrer"">http://docs.djangoproject.com/en/dev/howto/custom-model-fields/#howto-custom-model-fields</a></li>
</ol>

<p>Good luck!</p>
","1320510","","","","","2008-12-02 18:21:16","","","","0","","",""
"1530858","2","","21454","2009-10-07 10:47:46","","34","","<pre><code>from django.db import models

class EnumField(models.Field):
    """"""
    A field class that maps to MySQL's ENUM type.

    Usage:

    class Card(models.Model):
        suit = EnumField(values=('Clubs', 'Diamonds', 'Spades', 'Hearts'))

    c = Card()
    c.suit = 'Clubs'
    c.save()
    """"""
    def __init__(self, *args, **kwargs):
        self.values = kwargs.pop('values')
        kwargs['choices'] = [(v, v) for v in self.values]
        kwargs['default'] = self.values[0]
        super(EnumField, self).__init__(*args, **kwargs)

    def db_type(self):
        return ""enum({0})"".format( ','.join(""'%s'"" % v for v in self.values) )
</code></pre>
","","user185534","674039","","2014-02-11 23:46:49","2014-02-11 23:46:49","","","","3","","","2009-10-07 10:47:46"
"13089465","2","","21454","2012-10-26 15:03:50","","8","","<p><a href=""http://www.b-list.org/weblog/2007/nov/02/handle-choices-right-way/"">http://www.b-list.org/weblog/2007/nov/02/handle-choices-right-way/</a></p>

<blockquote>
<pre><code>class Entry(models.Model):
    LIVE_STATUS = 1
    DRAFT_STATUS = 2
    HIDDEN_STATUS = 3
    STATUS_CHOICES = (
        (LIVE_STATUS, 'Live'),
        (DRAFT_STATUS, 'Draft'),
        (HIDDEN_STATUS, 'Hidden'),
    )
    # ...some other fields here...
    status = models.IntegerField(choices=STATUS_CHOICES, default=LIVE_STATUS)

live_entries = Entry.objects.filter(status=Entry.LIVE_STATUS)
draft_entries = Entry.objects.filter(status=Entry.DRAFT_STATUS)

if entry_object.status == Entry.LIVE_STATUS:
</code></pre>
</blockquote>

<p>This is another nice and easy way of implementing enums although it doesn't really save enums in the database.</p>

<p>However it does allow you to reference the 'label' whenever querying or specifying defaults as opposed to the top-rated answer where you have to use the 'value' (which may be a number).</p>
","1415352","","","","","2012-10-26 15:03:50","","","","0","","",""
"19040441","2","","21454","2013-09-26 23:38:42","","9","","<p>Setting <code>choices</code> on the field will allow some validation on the Django end, but it <em>won't</em> define any form of an enumerated type on the database end.</p>

<p>As others have mentioned, the solution is to specify <a href=""https://docs.djangoproject.com/en/dev/howto/custom-model-fields/#django.db.models.Field.db_type""><code>db_type</code></a> on a custom field.</p>

<p>If you're using a SQL backend (e.g. MySQL), you can do this like so:</p>

<pre class=""lang-py prettyprint-override""><code>from django.db import models


class EnumField(models.Field):
    def __init__(self, *args, **kwargs):
        super(EnumField, self).__init__(*args, **kwargs)
        assert self.choices, ""Need choices for enumeration""

    def db_type(self, connection):
        if not all(isinstance(col, basestring) for col, _ in self.choices):
            raise ValueError(""MySQL ENUM values should be strings"")
        return ""ENUM({})"".format(','.join(""'{}'"".format(col) 
                                          for col, _ in self.choices))


class IceCreamFlavor(EnumField, models.CharField):
    def __init__(self, *args, **kwargs):
        flavors = [('chocolate', 'Chocolate'),
                   ('vanilla', 'Vanilla'),
                  ]
        super(IceCreamFlavor, self).__init__(*args, choices=flavors, **kwargs)


class IceCream(models.Model):
    price = models.DecimalField(max_digits=4, decimal_places=2)
    flavor = IceCreamFlavor(max_length=20)
</code></pre>

<p>Run <code>syncdb</code>, and inspect your table to see that the <code>ENUM</code> was created properly.</p>

<pre class=""lang-sql prettyprint-override""><code>mysql&gt; SHOW COLUMNS IN icecream;
+--------+-----------------------------+------+-----+---------+----------------+
| Field  | Type                        | Null | Key | Default | Extra          |
+--------+-----------------------------+------+-----+---------+----------------+
| id     | int(11)                     | NO   | PRI | NULL    | auto_increment |
| price  | decimal(4,2)                | NO   |     | NULL    |                |
| flavor | enum('chocolate','vanilla') | NO   |     | NULL    |                |
+--------+-----------------------------+------+-----+---------+----------------+
</code></pre>
","815632","","815632","","2013-09-26 23:44:55","2013-09-26 23:44:55","","","","1","","",""
"22155357","2","","21454","2014-03-03 19:18:56","","0","","<p>A the top of your models.py file, add this line after you do your imports:</p>

<pre><code>    enum = lambda *l: [(s,_(s)) for s in l]
</code></pre>
","1576113","","","","","2014-03-03 19:18:56","","","","1","","",""
"28408589","2","","21454","2015-02-09 11:23:31","","3","","<p>There're currently two github projects based on adding these, though I've not looked into exactly how they're implemented:</p>

<ol>
<li><a href=""https://github.com/5monkeys/django-enumfield"" rel=""nofollow"">Django-EnumField</a>:<br>
Provides an enumeration Django model field (using IntegerField) with reusable enums and transition validation. </li>
<li><a href=""https://github.com/hzdg/django-enumfields"" rel=""nofollow"">Django-EnumFields</a>:<br>
This package lets you use real Python (PEP435-style) enums with Django.</li>
</ol>

<p>I don't think either use DB enum types, but they are <a href=""https://github.com/5monkeys/django-enumfield/issues/18"" rel=""nofollow"">in the works</a> for first one.</p>
","1075247","","","","","2015-02-09 11:23:31","","","","0","","",""
"31358","2","","31340","2008-08-27 23:52:59","","18","","<p>Below is a basic threading sample. It will spawn 20 threads; each thread will output its thread number. Run it and observe the order in which they print.</p>

<pre><code>import threading
class Foo (threading.Thread):
    def __init__(self,x):
        self.__x = x
        threading.Thread.__init__(self)
    def run (self):
          print str(self.__x)

for x in xrange(20):
    Foo(x).start()
</code></pre>

<p>As you have hinted at Python threads are implemented through time-slicing. This is how they get the ""parallel"" effect. </p>

<p>In my example my Foo class extends thread, I then implement the <code>run</code> method, which is where the code that you would like to run in a thread goes. To start the thread you call <code>start()</code> on the thread object, which will automatically invoke the <code>run</code> method...</p>

<p>Of course, this is just the very basics. You will eventually want to learn about semaphores, mutexes, and locks for thread synchronization and message passing.</p>
","1638","mmattax","63550","mmattax","2010-09-11 20:35:37","2010-09-11 20:35:37","","","","0","","",""
"31372","2","","31340","2008-08-28 00:00:18","","33","","<p>Python's a fairly easy language to thread in, but there are caveats.  The biggest thing you need to know about is the Global Interpreter Lock.  This allows only one thread to access the interpreter.  This means two things:  1)  you rarely ever find yourself using a lock statement in python and 2) if you want to take advantage of multi-processor systems, you have to use separate processes.  EDIT:  I should also point out that you can put some of the code in C/C++ if you want to get around the GIL as well.</p>

<p>Thus, you need to re-consider why you want to use threads.  If you want to parallelize your app to take advantage of dual-core architecture, you need to consider breaking your app up into multiple processes.</p>

<p>If you want to improve responsiveness, you should CONSIDER using threads.  There are other alternatives though, namely <a href=""http://en.wikipedia.org/wiki/Microthread"" rel=""noreferrer"">microthreading</a>.  There are also some frameworks that you should look into:</p>

<ul>
<li><a href=""http://www.stackless.com/"" rel=""noreferrer"">stackless python</a></li>
<li><a href=""http://greenlet.readthedocs.org/en/latest/"" rel=""noreferrer"">greenlets</a></li>
<li><a href=""http://www.gevent.org/"" rel=""noreferrer"">gevent</a></li>
<li><a href=""https://github.com/saucelabs/monocle"" rel=""noreferrer"">monocle</a></li>
</ul>
","2147","Jason Baker","2147","Jason Baker","2013-06-27 20:25:13","2013-06-27 20:25:13","","","","3","","",""
"31398","2","","31340","2008-08-28 00:19:50","","46","","<p>Yes, because of the Global Interpreter Lock (GIL) there can only run one thread at a time. Here are some links with some insights about this:</p>

<ul>
<li><a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=214235"" rel=""noreferrer"">http://www.artima.com/weblogs/viewpost.jsp?thread=214235</a></li>
<li><a href=""http://smoothspan.wordpress.com/2007/09/14/guido-is-right-to-leave-the-gil-in-python-not-for-multicore-but-for-utility-computing/"" rel=""noreferrer"">http://smoothspan.wordpress.com/2007/09/14/guido-is-right-to-leave-the-gil-in-python-not-for-multicore-but-for-utility-computing/</a></li>
</ul>

<p>From the last link an interesting quote:</p>

<blockquote>
  <p>Let me explain what all that means. 
  Threads run inside the same virtual
  machine, and hence run on the same
  physical machine.  Processes can run
  on the same physical machine or in
  another physical machine.  If you
  architect your application around
  threads, you‚Äôve done nothing to access
  multiple machines.  So, you can scale
  to as many cores are on the single
  machine (which will be quite a few
  over time), but to really reach web
  scales, you‚Äôll need to solve the
  multiple machine problem anyway.</p>
</blockquote>

<p>If you want to use multi core, <a href=""http://www.python.org/dev/peps/pep-0371/"" rel=""noreferrer"">pyprocessing</a> defines an process based API to do real parallelization. The <a href=""http://en.wikipedia.org/wiki/Python_Enhancement_Proposal#Development"" rel=""noreferrer"">PEP</a> also includes some interesting benchmarks.</p>
","720","hoffmann","551899","","2013-06-26 17:39:16","2013-06-26 17:39:16","","","","5","","",""
"31552","2","","31340","2008-08-28 02:34:18","","9","","<p>Use threads in python if the individual workers are doing I/O bound operations. If you are trying to scale across multiple cores on a machine either find a good <a href=""http://www.python.org/dev/peps/pep-0371/"" rel=""noreferrer"">IPC</a> framework for python or pick a different language.</p>
","1455","kazakdogofspace","","","","2008-08-28 02:34:18","","","","0","","",""
"1197151","2","","31340","2009-07-28 22:40:05","","1","","<p>Try to remember that the GIL is set to poll around every so often in order to do show the appearance of multiple tasks. This setting can be fine tuned, but I offer the suggestion that there should be work that the threads are doing or lots of context switches are going to cause problems.</p>

<p>I would go so far as to suggest multiple parents on processors and try to keep like jobs on the same core(s).</p>
","121718","","","","","2009-07-28 22:40:05","","","","0","","",""
"21608282","2","","31340","2014-02-06 16:19:03","","2","","<p>One easy solution to the GIL is the <a href=""http://docs.python.org/2/library/multiprocessing.html"" rel=""nofollow"" title=""Python docs link"">multiprocessing</a> module. It can be used as a drop in replacement to the threading module but uses multiple Interpreter processes instead of threads. Because of this there is a little more overhead than plain threading for simple things but it gives you the advantage of real parallelization if you need it.
It also easily scales to multiple physical machines.</p>

<p>If you need truly large scale parallelization than I would look further but if you just want to scale to all the cores of one computer or a few different ones without all the work that would go into implementing a more comprehensive framework, than this is for you.</p>
","3280431","","","","","2014-02-06 16:19:03","","","","0","","",""
"31420","2","","31412","2008-08-28 00:32:59","","1","","<p>@Daniel <blockquote>The distinction between fork/exec and dynamic linking, besides being kind of artificial, doesn't carry over to interpreted languages: what about a Python/Perl/Ruby plugin, which gets loaded via import or execfile?</blockquote></p>

<p>I'm not sure that the distinction <strong>is</strong> artificial. After a dynamic load the plugin code shares an execution context with the GPLed code. After a fork/exec it does not.</p>

<p>In anycase I would guess that <code>import</code>ing causes the new code to run in the same execution context as the GPLed bit, and you should treat it like the dynamic link case. No?</p>
","2509","dmckee","","","","2008-08-28 00:32:59","","","","0","","",""
"31421","2","","31412","2008-08-28 00:33:04","","4","","<blockquote>
  <p>he distinction between fork/exec and dynamic linking, besides being kind of artificial,</p>
</blockquote>

<p>I don't think its artificial at all.  Basically they are just making the division based upon the level of integration.  If the program has ""plugins"" which are essentially fire and forget with no API level integration, then the resulting work is unlikely to be considered a derived work.  Generally speaking a plugin which is merely forked/exec'ed would fit this criteria, though there may be cases where it does not.  This case especially applies if the ""plugin"" code would work independently of your code as well.</p>

<p>If, on the other hand, the code is deeply dependent upon the GPL'ed work, such as extensively calling APIs, or tight data structure integration, then things are more likely to be considered a derived work.  Ie, the ""plugin"" cannot exist on its own without the GPL product, and a product with this plugin installed is essentially a derived work of the GPLed product.</p>

<p>So to make it a little more clear, the same principles could apply to your interpreted code.  If the interpreted code relies heavily upon your APIs (or vice-versa) then it would be considered a derived work.  If it is just a script that executes on its own with extremely little integration, then it may not.</p>

<p>Does that make more sense?</p>
","1432","jsight","","","","2008-08-28 00:33:04","","","","0","","",""
"31423","2","","31412","2008-08-28 00:33:40","","1","","<p>How much info are you sharing between the Plugins and the main program? If you are doing anything more than just executing them and waiting for the results (sharing no data between the program and the plugin in the process) then you could most likely get away with them being proprietary, otherwise they would probably need to be GPL'd.</p>
","2654","Alasdair","","","","2008-08-28 00:33:40","","","","0","","",""
"38442","2","","38435","2008-09-01 21:14:43","","1","","<p>My solution to this, that I hope can be bettered, is to use Oracle to explicitly convert the TIMESTAMP into a string:</p>

<pre><code>cursor.execute(""SELECT TO_CHAR(WhenAdded, 'YYYY-MM-DD HH:MI:SSAM') FROM Log"")
</code></pre>

<p>This works, but isn't portable. I'd like to use the same Python script against a SQL Server database, so an Oracle-specific solution (such as TO_CHAR) won't work.</p>
","2193","","","","","2008-09-01 21:14:43","","","","0","","",""
"38718","2","","38435","2008-09-02 02:33:57","","2","","<p>I believe this is a bug in the Oracle ODBC driver. Basically, the Oracle ODBC driver does not support the <code>TIMESTAMP WITH (LOCAL) TIME ZONE</code> data types, only the <code>TIMESTAMP</code> data type. As you have discovered, one workaround is in fact to use the <code>TO_CHAR</code> method.</p>

<p>In your example you are not actually reading the time zone information. If you have control of the table you could convert it to a straight <code>TIMESTAMP</code> column. If you don't have control over the table, another solution may be to create a view that converts from <code>TIMESTAMP WITH TIME ZONE</code> to <code>TIMESTAMP</code> via a string - sorry, I don't know if there is a way to convert directly from <code>TIMESTAMP WITH TIME ZONE</code> to <code>TIMESTAMP</code>.</p>
","3154","David Sykes","","","","2008-09-02 02:33:57","","","","0","","",""
"38513","2","","38508","2008-09-01 22:03:17","","7","","<p>Returning a tuple is the usual way to do this in Python.</p>
","2600","Chris Upchurch","","","","2008-09-01 22:03:17","","","","0","","",""
"38514","2","","38508","2008-09-01 22:03:41","","15","","<p>Return a tuple.</p>

<pre><code>def f(x):
    # do stuff
    return (True, modified_string)

success, modified_string = f(something)
</code></pre>
","3694","sysrqb","","","","2008-09-01 22:03:41","","","","1","","",""
"38516","2","","38508","2008-09-01 22:04:02","","114","","<pre><code>def f(in_str):
    out_str = in_str.upper()
    return True, out_str # Creates tuple automatically

succeeded, b = f(""a"") # Automatic tuple unpacking
</code></pre>
","3560","John Millikin","2491","","2014-01-12 06:21:30","2014-01-12 06:21:30","","","","1","","",""
"38524","2","","38508","2008-09-01 22:09:00","","28","","<p>Why not throw an exception if the operation wasn't successful?  Personally, I tend to be of the opinion that if you need to return more than one value from a function, you should reconsider if you're doing things the right way or use an object.</p>

<p>But more directly to the point, if you throw an exception, you're forcing them to deal with the problem.  If you try to return a value that indicates failure, it's very well possible somebody could not check the value and end up with some potentially hard to debug errors.</p>
","2147","Jason Baker","2147","Jason Baker","2008-09-01 22:14:14","2008-09-01 22:14:14","","","","3","","",""
"38760","2","","38508","2008-09-02 03:15:49","","3","","<p>Throwing an exception for failure is one good way to proceed, and if you're returning a lot of different values, you can return a tuple.  For the specific case you're citing, I often take an intermediate approach: return the modified string on success, and return None on failure.  I'm enough of an unreconstructed C programmer to want to return a NULL pointer to char on failure.</p>

<p>If I were writing a routine to be used as part of a larger library and consumed by other developers, I'd throw an exception on failure.  When I'm eating my own dogfood, I'll probably return different types and test on return.</p>
","3286","tuxedo","","","","2008-09-02 03:15:49","","","","0","","",""
"38916","2","","38601","2008-09-02 06:10:58","","145","","<p>The growing complexity of this answer over time, and the many hacks required, probably ought to caution you against doing this at all. It's relying on undocumented internal implementation details of the admin, is likely to break again in future versions of Django, and is no easier to implement than just finding another JS calendar widget and using that.</p>

<p>That said, here's what you have to do if you're determined to make this work:</p>

<ol>
<li><p>Define your own ModelForm subclass for your model (best to put it in forms.py in your app), and tell it to use the AdminDateWidget / AdminTimeWidget / AdminSplitDateTime (replace 'mydate' etc with the proper field names from your model):</p>

<pre><code>from django import forms
from my_app.models import Product
from django.contrib.admin import widgets                                       

class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
    def __init__(self, *args, **kwargs):
        super(ProductForm, self).__init__(*args, **kwargs)
        self.fields['mydate'].widget = widgets.AdminDateWidget()
        self.fields['mytime'].widget = widgets.AdminTimeWidget()
        self.fields['mydatetime'].widget = widgets.AdminSplitDateTime()
</code></pre></li>
<li><p>Change your URLconf to pass 'form_class': ProductForm instead of 'model': Product to the generic create_object view (that'll mean ""from my_app.forms import ProductForm"" instead of ""from my_app.models import Product"", of course).</p></li>
<li><p>In the head of your template, include {{ form.media }} to output the links to the Javascript files.</p></li>
<li><p>And the hacky part: the admin date/time widgets presume that the i18n JS stuff has been loaded, and also require core.js, but don't provide either one automatically.  So in your template above {{ form.media }} you'll need:</p>

<pre><code>&lt;script type=""text/javascript"" src=""/my_admin/jsi18n/""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""/media/admin/js/core.js""&gt;&lt;/script&gt;
</code></pre>

<p>You may also wish to use the following admin CSS (thanks <a href=""https://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/719583#719583"">Alex</a> for mentioning this):</p>

<pre><code>&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/forms.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/base.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/global.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/widgets.css""/&gt;
</code></pre></li>
</ol>

<p>This implies that Django's admin media (ADMIN_MEDIA_PREFIX) is at /media/admin/ - you can change that for your setup.  Ideally you'd use a context processor to pass this values to your template instead of hardcoding it, but that's beyond the scope of this question.</p>

<p>This also requires that the URL /my_admin/jsi18n/ be manually wired up to the django.views.i18n.javascript_catalog view (or null_javascript_catalog if you aren't using I18N).  You have to do this yourself instead of going through the admin application so it's accessible regardless of whether you're logged into the admin (thanks <a href=""https://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/408230#408230"">Jeremy</a> for pointing this out).  Sample code for your URLconf:</p>

<pre><code>(r'^my_admin/jsi18n', 'django.views.i18n.javascript_catalog'),
</code></pre>

<p>Lastly, if you are using Django 1.2 or later, you need some additional code in your template to help the widgets find their media:</p>

<pre><code>{% load adminmedia %} /* At the top of the template. */

/* In the head section of the template. */
&lt;script type=""text/javascript""&gt;
window.__admin_media_prefix__ = ""{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}"";
&lt;/script&gt;
</code></pre>

<p>Thanks <a href=""https://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/2818128#2818128"">lupefiasco</a> for this addition.</p>
","3207","Carl Meyer","-1","Carl Meyer","2017-05-23 10:31:33","2014-04-01 15:50:27","","","","10","","",""
"72284","2","","38601","2008-09-16 13:39:39","","59","","<p>As the solution is hackish, I think using your own date/time widget with some JavaScript is more feasible.</p>
","12138","zgoda","","","","2008-09-16 13:39:39","","","","2","","",""
"408230","2","","38601","2009-01-02 22:53:21","","11","","<p>Yep, I ended up overriding the /admin/jsi18n/ url.</p>

<p>Here's what I added in my urls.py.  Make sure it's above the /admin/ url</p>

<pre><code>    (r'^admin/jsi18n', i18n_javascript),
</code></pre>

<p>And here is the i18n_javascript function I created.</p>

<pre><code>from django.contrib import admin
def i18n_javascript(request):
  return admin.site.i18n_javascript(request)
</code></pre>
","","Jeremy","","","","2009-01-02 22:53:21","","","","1","","",""
"719583","2","","38601","2009-04-05 20:02:00","","7","","<p>Complementing the answer by Carl Meyer, I would like to comment that you need to put that header in some valid block (inside the header) within your template.</p>

<pre><code>{% block extra_head %}

&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/forms.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/base.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/global.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/widgets.css""/&gt;

&lt;script type=""text/javascript"" src=""/admin/jsi18n/""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""/media/admin/js/core.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""/media/admin/js/admin/RelatedObjectLookups.js""&gt;&lt;/script&gt;

{{ form.media }}

{% endblock %}
</code></pre>
","18300","Alex. S.","","","","2009-04-05 20:02:00","","","","1","","",""
"1392329","2","","38601","2009-09-08 06:42:05","","10","","<p>I find myself referencing this post a lot, and found that the <a href=""http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#overriding-the-default-field-types"" rel=""nofollow noreferrer"">documentation</a> defines a <em>slightly</em> less hacky way to override default widgets. </p>

<p>(<em>No need to override the ModelForm's __init__ method</em>)</p>

<p>However, you still need to wire your JS and CSS appropriately as Carl mentions.</p>

<p><strong>forms.py</strong></p>

<pre><code>from django import forms
from my_app.models import Product
from django.contrib.admin import widgets                                       


class ProductForm(forms.ModelForm):
    mydate = forms.DateField(widget=widgets.AdminDateWidget)
    mytime = forms.TimeField(widget=widgets.AdminTimeWidget)
    mydatetime = forms.SplitDateTimeField(widget=widgets.AdminSplitDateTime)

    class Meta:
        model = Product
</code></pre>

<p>Reference <a href=""http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#field-types"" rel=""nofollow noreferrer"">Field Types</a> to find the default form fields.</p>
","24718","","2653","","2017-01-12 00:09:12","2017-01-12 00:09:12","","","","1","","",""
"1833247","2","","38601","2009-12-02 14:29:53","","1","","<p>Updated solution and workaround for <strong>SplitDateTime</strong> with <strong>required=False</strong>:</p>

<p><em>forms.py</em></p>

<pre><code>from django import forms

class SplitDateTimeJSField(forms.SplitDateTimeField):
    def __init__(self, *args, **kwargs):
        super(SplitDateTimeJSField, self).__init__(*args, **kwargs)
        self.widget.widgets[0].attrs = {'class': 'vDateField'}
        self.widget.widgets[1].attrs = {'class': 'vTimeField'}  


class AnyFormOrModelForm(forms.Form):
    date = forms.DateField(widget=forms.TextInput(attrs={'class':'vDateField'}))
    time = forms.TimeField(widget=forms.TextInput(attrs={'class':'vTimeField'}))
    timestamp = SplitDateTimeJSField(required=False,)
</code></pre>

<p><em>form.html</em></p>

<pre><code>&lt;script type=""text/javascript"" src=""/admin/jsi18n/""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""/admin_media/js/core.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""/admin_media/js/calendar.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""/admin_media/js/admin/DateTimeShortcuts.js""&gt;&lt;/script&gt;
</code></pre>

<p><em>urls.py</em></p>

<pre><code>(r'^admin/jsi18n/', 'django.views.i18n.javascript_catalog'),
</code></pre>
","318368","","318368","","2009-12-02 15:11:42","2009-12-02 15:11:42","","","","1","","",""
"2396907","2","","38601","2010-03-07 16:09:57","","4","","<p>The below will also work as a last resort if the above failed</p>

<pre><code>class PaymentsForm(forms.ModelForm):
    class Meta:
        model = Payments

    def __init__(self, *args, **kwargs):
        super(PaymentsForm, self).__init__(*args, **kwargs)
        self.fields['date'].widget = SelectDateWidget()
</code></pre>

<p>Same as </p>

<pre><code>class PaymentsForm(forms.ModelForm):
    date = forms.DateField(widget=SelectDateWidget())

    class Meta:
        model = Payments
</code></pre>

<p>put this in your forms.py <code>from django.forms.extras.widgets import SelectDateWidget</code></p>
","263501","","3848833","","2017-09-01 18:58:50","2017-09-01 18:58:50","","","","1","","",""
"2716963","2","","38601","2010-04-26 21:17:37","","5","","<p>I finally managed to get this widget working on the dev server, only to have it break on deployment.  I finally decided it wasn't worth shoehorning into my site, and wrote my own widget.  It's not as flexible, but it will probably work well for many: <a href=""http://www.copiesofcopies.org/webl/?p=81"" rel=""noreferrer"">http://www.copiesofcopies.org/webl/?p=81</a></p>
","320902","","","","","2010-04-26 21:17:37","","","","0","","",""
"2818128","2","","38601","2010-05-12 11:03:15","","10","","<p>Starting in Django 1.2 RC1, if you're using the Django admin date picker widge trick, the following has to be added to your template, or you'll see the calendar icon url being referenced through ""/missing-admin-media-prefix/"".</p>

<pre><code>{% load adminmedia %} /* At the top of the template. */

/* In the head section of the template. */
&lt;script type=""text/javascript""&gt;
window.__admin_media_prefix__ = ""{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}"";
&lt;/script&gt;
</code></pre>
","5675","","","","","2010-05-12 11:03:15","","","","0","","",""
"3284874","2","","38601","2010-07-19 20:38:24","","6","","<p>(I'm trying to comment on people suggesting to roll their own Calendar widget, but either I don't see the comment button, or I don't have enough rep.)</p>

<p>What happened to <a href=""http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"" rel=""noreferrer"">DRY</a>? I think it would be best to re-use the admin widget, but perhaps it should be separated from admin, and easier to use. Thanks for this information anyways.</p>
","396202","","","","","2010-07-19 20:38:24","","","","0","","",""
"9139017","2","","38601","2012-02-04 06:50:50","","3","","<p>What about just assigning a class to your widget and then binding that class to the JQuery datepicker?</p>

<p>Django forms.py:</p>

<pre><code>class MyForm(forms.ModelForm):

  class Meta:
    model = MyModel

  def __init__(self, *args, **kwargs):
    super(MyForm, self).__init__(*args, **kwargs)
    self.fields['my_date_field'].widget.attrs['class'] = 'datepicker'
</code></pre>

<p>And some JavaScript for the template:</p>

<pre><code>  $("".datepicker"").datepicker();
</code></pre>
","1060339","","","","","2012-02-04 06:50:50","","","","1","","",""
"11446609","2","","38601","2012-07-12 07:06:08","","9","","<p>My head code for 1.4 version(some new and some removed)</p>

<pre><code>{% block extrahead %}

&lt;link rel=""stylesheet"" type=""text/css"" href=""{{ STATIC_URL }}admin/css/forms.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""{{ STATIC_URL }}admin/css/base.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""{{ STATIC_URL }}admin/css/global.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""{{ STATIC_URL }}admin/css/widgets.css""/&gt;

&lt;script type=""text/javascript"" src=""/admin/jsi18n/""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""{{ STATIC_URL }}admin/js/core.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""{{ STATIC_URL }}admin/js/admin/RelatedObjectLookups.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""{{ STATIC_URL }}admin/js/jquery.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""{{ STATIC_URL }}admin/js/jquery.init.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""{{ STATIC_URL }}admin/js/actions.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""{{ STATIC_URL }}admin/js/calendar.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""{{ STATIC_URL }}admin/js/admin/DateTimeShortcuts.js""&gt;&lt;/script&gt;

{% endblock %}
</code></pre>
","1508578","","","","","2012-07-12 07:06:08","","","","3","","",""
"39946546","2","","38601","2016-10-09 17:39:01","","0","","<p>In Django 10.
myproject/urls.py:
at the beginning of urlpatterns</p>

<pre><code>  from django.views.i18n import JavaScriptCatalog

urlpatterns = [
    url(r'^jsi18n/$', JavaScriptCatalog.as_view(), name='javascript-catalog'),
.
.
.]
</code></pre>

<p>In my template.html:</p>

<pre><code>{% load staticfiles %}

    &lt;script src=""{% static ""js/jquery-2.2.3.min.js"" %}""&gt;&lt;/script&gt;
    &lt;script src=""{% static ""js/bootstrap.min.js"" %}""&gt;&lt;/script&gt;
    {# Loading internazionalization for js #}
    {% load i18n admin_modify %}
    &lt;script type=""text/javascript"" src=""{% url 'javascript-catalog' %}""&gt;&lt;/script&gt;
    &lt;script type=""text/javascript"" src=""{% static ""/admin/js/jquery.init.js"" %}""&gt;&lt;/script&gt;

    &lt;link rel=""stylesheet"" type=""text/css"" href=""{% static ""/admin/css/base.css"" %}""&gt;
    &lt;link rel=""stylesheet"" type=""text/css"" href=""{% static ""/admin/css/forms.css"" %}""&gt;
    &lt;link rel=""stylesheet"" type=""text/css"" href=""{% static ""/admin/css/login.css"" %}""&gt;
    &lt;link rel=""stylesheet"" type=""text/css"" href=""{% static ""/admin/css/widgets.css"" %}""&gt;



    &lt;script type=""text/javascript"" src=""{% static ""/admin/js/core.js"" %}""&gt;&lt;/script&gt;
    &lt;script type=""text/javascript"" src=""{% static ""/admin/js/SelectFilter2.js"" %}""&gt;&lt;/script&gt;
    &lt;script type=""text/javascript"" src=""{% static ""/admin/js/admin/RelatedObjectLookups.js"" %}""&gt;&lt;/script&gt;
    &lt;script type=""text/javascript"" src=""{% static ""/admin/js/actions.js"" %}""&gt;&lt;/script&gt;
    &lt;script type=""text/javascript"" src=""{% static ""/admin/js/calendar.js"" %}""&gt;&lt;/script&gt;
    &lt;script type=""text/javascript"" src=""{% static ""/admin/js/admin/DateTimeShortcuts.js"" %}""&gt;&lt;/script&gt;
</code></pre>
","5833286","","","","","2016-10-09 17:39:01","","","","0","","",""
"38989","2","","38987","2008-09-02 07:49:27","","34","","<pre><code>x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items() + y.items())
print z
</code></pre>

<p>For items with keys in both dictionaries ('b'), you can control which one ends up in the output by putting that one last.</p>
","893","Greg Hewgill","","","","2008-09-02 07:49:27","","","","0","","",""
"38990","2","","38987","2008-09-02 07:50:12","","1375","","<p>In your case, what you can do is:</p>

<pre><code>z = dict(x.items() + y.items())
</code></pre>

<p>This will, as you want it, put the final dict in <code>z</code>, and make the value for key <code>b</code> be properly overridden by the second (<code>y</code>) dict's value:</p>

<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}
&gt;&gt;&gt; y = {'b':10, 'c': 11}
&gt;&gt;&gt; z = dict(x.items() + y.items())
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
</code></pre>

<p>If you use Python 3, it is only a little more complicated.  To create <code>z</code>:</p>

<pre><code>&gt;&gt;&gt; z = dict(list(x.items()) + list(y.items()))
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
</code></pre>
","2900","Thomas Vander Stichele","2900","","2016-03-03 15:52:07","2016-03-03 15:52:07","","","","0","","",""
"39437","2","","38987","2008-09-02 13:00:46","","511","","<p>An alternative:</p>

<pre><code>z = x.copy()
z.update(y)
</code></pre>
","188","Matthew Schinckel","","","","2008-09-02 13:00:46","","","","1","","",""
"39858","2","","38987","2008-09-02 15:52:07","","242","","<p>Another, more concise, option:</p>

<pre><code>z = dict(x, **y)
</code></pre>

<p><strong>Note</strong>: this has become a popular answer, but it is important to point out that if <code>y</code> has any non-string keys, the fact that this works at all is an abuse of a CPython implementation detail, and it does not work in Python 3, or in PyPy, IronPython, or Jython. Also, <a href=""http://mail.python.org/pipermail/python-dev/2010-April/099459.html"" rel=""noreferrer"">Guido is not a fan</a>. So I can't recommend this technique for forward-compatible or cross-implementation portable code, which really means it should be avoided entirely.</p>
","3207","Carl Meyer","3207","Carl Meyer","2016-01-21 06:43:24","2016-01-21 06:43:24","","","","0","","",""
"44512","2","","38987","2008-09-04 19:08:25","","72","","<p>I wanted something similar, but with the ability to specify how the values on duplicate keys were merged, so I hacked this out (but did not heavily test it).  Obviously this is not a single expression, but it is a single function call.</p>

<pre><code>def merge(d1, d2, merge_fn=lambda x,y:y):
    """"""
    Merges two dictionaries, non-destructively, combining 
    values on duplicate keys as defined by the optional merge
    function.  The default behavior replaces the values in d1
    with corresponding values in d2.  (There is no other generally
    applicable merge strategy, but often you'll have homogeneous 
    types in your dicts, so specifying a merge technique can be 
    valuable.)

    Examples:

    &gt;&gt;&gt; d1
    {'a': 1, 'c': 3, 'b': 2}
    &gt;&gt;&gt; merge(d1, d1)
    {'a': 1, 'c': 3, 'b': 2}
    &gt;&gt;&gt; merge(d1, d1, lambda x,y: x+y)
    {'a': 2, 'c': 6, 'b': 4}

    """"""
    result = dict(d1)
    for k,v in d2.iteritems():
        if k in result:
            result[k] = merge_fn(result[k], v)
        else:
            result[k] = v
    return result
</code></pre>
","3446","rcreswick","2748838","","2014-09-13 19:56:21","2014-09-13 19:56:21","","","","0","","",""
"49492","2","","38987","2008-09-08 11:16:54","","151","","<p>This probably won't be a popular answer, but you almost certainly do not want to do this.  If you want a copy that's a merge, then use copy (or <a href=""https://docs.python.org/2/library/copy.html"" rel=""noreferrer"">deepcopy</a>, depending on what you want) and then update.  The two lines of code are much more readable - more Pythonic - than the single line creation with .items() + .items().  Explicit is better than implicit.</p>

<p>In addition, when you use .items() (pre Python 3.0), you're creating a new list that contains the items from the dict.  If your dictionaries are large, then that is quite a lot of overhead (two large lists that will be thrown away as soon as the merged dict is created).  update() can work more efficiently, because it can run through the second dict item-by-item.</p>

<p>In terms of <a href=""https://docs.python.org/2/library/timeit.html"" rel=""noreferrer"">time</a>:</p>

<pre><code>&gt;&gt;&gt; timeit.Timer(""dict(x, **y)"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)
15.52571702003479
&gt;&gt;&gt; timeit.Timer(""temp = x.copy()\ntemp.update(y)"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)
15.694622993469238
&gt;&gt;&gt; timeit.Timer(""dict(x.items() + y.items())"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)
41.484580039978027
</code></pre>

<p>IMO the tiny slowdown between the first two is worth it for the readability.  In addition, keyword arguments for dictionary creation was only added in Python 2.3, whereas copy() and update() will work in older versions.</p>
","4966","tonyandrewmeyer","2213647","","2014-08-05 23:56:02","2014-08-05 23:56:02","","","","0","","",""
"228366","2","","38987","2008-10-23 02:38:56","","97","","<p>In a follow-up answer, you asked about the relative performance of these two alternatives:</p>

<pre><code>z1 = dict(x.items() + y.items())
z2 = dict(x, **y)
</code></pre>

<p>On my machine, at least (a fairly ordinary x86_64 running Python 2.5.2), alternative <code>z2</code> is not only shorter and simpler but also significantly faster.  You can verify this for yourself using the <code>timeit</code> module that comes with Python.</p>

<p>Example 1: identical dictionaries mapping 20 consecutive integers to themselves:</p>

<pre><code>% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z1=dict(x.items() + y.items())'
100000 loops, best of 3: 5.67 usec per loop
% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z2=dict(x, **y)' 
100000 loops, best of 3: 1.53 usec per loop
</code></pre>

<p><code>z2</code> wins by a factor of 3.5 or so.  Different dictionaries seem to yield quite different results, but <code>z2</code> always seems to come out ahead.  (If you get inconsistent results for the <em>same</em> test, try passing in <code>-r</code> with a number larger than the default 3.)</p>

<p>Example 2: non-overlapping dictionaries mapping 252 short strings to integers and vice versa:</p>

<pre><code>% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z1=dict(x.items() + y.items())'
1000 loops, best of 3: 260 usec per loop
% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z2=dict(x, **y)'               
10000 loops, best of 3: 26.9 usec per loop
</code></pre>

<p><code>z2</code> wins by about a factor of 10.  That's a pretty big win in my book!</p>

<p>After comparing those two, I wondered if <code>z1</code>'s poor performance could be attributed to the overhead of constructing the two item lists, which in turn led me to wonder if this variation might work better:</p>

<pre><code>from itertools import chain
z3 = dict(chain(x.iteritems(), y.iteritems()))
</code></pre>

<p>A few quick tests, e.g.</p>

<pre><code>% python -m timeit -s 'from itertools import chain; from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z3=dict(chain(x.iteritems(), y.iteritems()))'
10000 loops, best of 3: 66 usec per loop
</code></pre>

<p>lead me to conclude that <code>z3</code> is somewhat faster than <code>z1</code>, but not nearly as fast as <code>z2</code>.  Definitely not worth all the extra typing.</p>

<p>This discussion is still missing something important, which is a performance comparison of these alternatives with the ""obvious"" way of merging two lists: using the <code>update</code> method.  To try to keep things on an equal footing with the expressions, none of which modify x or y, I'm going to make a copy of x instead of modifying it in-place, as follows:</p>

<pre><code>z0 = dict(x)
z0.update(y)
</code></pre>

<p>A typical result:</p>

<pre><code>% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z0=dict(x); z0.update(y)'
10000 loops, best of 3: 26.9 usec per loop
</code></pre>

<p>In other words, <code>z0</code> and <code>z2</code> seem to have essentially identical performance.  Do you think this might be a coincidence?  I don't....</p>

<p>In fact, I'd go so far as to claim that it's impossible for pure Python code to do any better than this.  And if you can do significantly better in a C extension module, I imagine the Python folks might well be interested in incorporating your code (or a variation on your approach) into the Python core.  Python uses <code>dict</code> in lots of places; optimizing its operations is a big deal.</p>

<p>You could also write this as</p>

<pre><code>z0 = x.copy()
z0.update(y)
</code></pre>

<p>as Tony does, but (not surprisingly) the difference in notation turns out not to have any measurable effect on performance.  Use whichever looks right to you.  Of course, he's absolutely correct to point out that the two-statement version is much easier to understand.</p>
","13871","zaphod","128421","zaphod","2015-01-10 02:32:55","2015-01-10 02:32:55","","","","1","","",""
"3936548","2","","38987","2010-10-14 18:55:15","","48","","<p>The best version I could think while not using copy would be:</p>

<pre><code>from itertools import chain
x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
dict(chain(x.iteritems(), y.iteritems()))
</code></pre>

<p>It's faster than <code>dict(x.items() + y.items())</code> but not as fast as <code>n = copy(a); n.update(b)</code>, at least on CPython. This version also works in Python 3 if you change <code>iteritems()</code> to <code>items()</code>, which is automatically done by the 2to3 tool.</p>

<p>Personally I like this version best because it describes fairly good what I want in a single  functional syntax. The only minor problem is that it doesn't make completely obvious that values from y takes precedence over values from x, but I don't believe it's difficult to figure that out.</p>
","72476","","","","","2010-10-14 18:55:15","","","","0","","",""
"7770473","2","","38987","2011-10-14 16:12:33","","27","","<p>While the question has already been answered several times,
this simple solution to the problem has not been listed yet.</p>

<pre><code>x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z4 = {}
z4.update(x)
z4.update(y)
</code></pre>

<p>It is as fast as z0 and the evil z2 mentioned above, but easy to understand and change.</p>
","509648","","","","","2011-10-14 16:12:33","","","","4","","",""
"8247023","2","","38987","2011-11-23 18:08:23","","20","","<p>If you think lambdas are evil then read no further.
As requested, you can write the fast and memory-efficient solution with one expression:</p>

<pre><code>x = {'a':1, 'b':2}
y = {'b':10, 'c':11}
z = (lambda a, b: (lambda a_copy: a_copy.update(b) or a_copy)(a.copy()))(x, y)
print z
{'a': 1, 'c': 11, 'b': 10}
print x
{'a': 1, 'b': 2}
</code></pre>

<p>As suggested above, using two lines or writing a function is probably a better way to go.</p>
","364984","","364984","","2011-11-23 18:20:48","2011-11-23 18:20:48","","","","0","","",""
"8310229","2","","38987","2011-11-29 11:52:15","","47","","<h1>Recursively/deep update a dict</h1>

<pre><code>def deepupdate(original, update):
    """"""
    Recursively update a dict.
    Subdict's won't be overwritten but also updated.
    """"""
    for key, value in original.iteritems(): 
        if key not in update:
            update[key] = value
        elif isinstance(value, dict):
            deepupdate(value, update[key]) 
    return update</code></pre>

<p>Demonstration:</p>

<pre><code>pluto_original = {
    'name': 'Pluto',
    'details': {
        'tail': True,
        'color': 'orange'
    }
}

pluto_update = {
    'name': 'Pluutoo',
    'details': {
        'color': 'blue'
    }
}

print deepupdate(pluto_original, pluto_update)</code></pre>

<p>Outputs:</p>

<pre><code>{
    'name': 'Pluutoo',
    'details': {
        'color': 'blue',
        'tail': True
    }
}</code></pre>

<p>Thanks rednaw for edits.</p>
","471393","","1392229","","2015-12-18 11:19:15","2015-12-18 11:19:15","","","","0","","",""
"11804613","2","","38987","2012-08-03 23:36:50","","8","","<p>Even though the answers were good for this <em>shallow</em> dictionary, none of the methods defined here actually do a deep dictionary merge.</p>

<p>Examples follow:</p>

<pre><code>a = { 'one': { 'depth_2': True }, 'two': True }
b = { 'one': { 'extra': False } }
print dict(a.items() + b.items())
</code></pre>

<p>One would expect a result of something like this:</p>

<pre><code>{ 'one': { 'extra': False', 'depth_2': True }, 'two': True }
</code></pre>

<p>Instead, we get this:</p>

<pre><code>{'two': True, 'one': {'extra': False}}
</code></pre>

<p>The 'one' entry should have had 'depth_2' and 'extra' as items inside its dictionary if it truly was a merge.</p>

<p>Using chain also, does not work:</p>

<pre><code>from itertools import chain
print dict(chain(a.iteritems(), b.iteritems()))
</code></pre>

<p>Results in:</p>

<pre><code>{'two': True, 'one': {'extra': False}}
</code></pre>

<p>The deep merge that rcwesick gave also creates the same result.</p>

<p>Yes, it will work to merge the sample dictionaries, but none of them are a generic mechanism to merge.  I'll update this later once I write a method that does a true merge.</p>
","1575349","","","","","2012-08-03 23:36:50","","","","0","","",""
"11825563","2","","38987","2012-08-06 09:24:44","","25","","<pre><code>def dict_merge(a, b):
  c = a.copy()
  c.update(b)
  return c

new = dict_merge(old, extras)
</code></pre>

<p>Among such shady and dubious answers, this shining example is the one and only good way to merge dicts in Python, endorsed by dictator for life <em>Guido van Rossum</em> himself!  Someone else suggested half of this, but did not put it in a function.</p>

<pre><code>print dict_merge(
      {'color':'red', 'model':'Mini'},
      {'model':'Ferrari', 'owner':'Carl'})
</code></pre>

<p>gives:</p>

<pre><code>{'color': 'red', 'owner': 'Carl', 'model': 'Ferrari'}
</code></pre>
","218294","","218294","","2012-08-06 09:30:07","2012-08-06 09:30:07","","","","0","","",""
"12926103","2","","38987","2012-10-17 02:09:45","","8","","<p><strong>Two dictionaries</strong></p>

<pre><code>def union2(dict1, dict2):
    return dict(list(dict1.items()) + list(dict2.items()))
</code></pre>

<p><strong><em>n</em> dictionaries</strong></p>

<pre><code>def union(*dicts):
    return dict(itertools.chain.from_iterable(dct.items() for dct in dicts))
</code></pre>

<p><code>sum</code> has bad performance. See <a href=""https://mathieularose.com/how-not-to-flatten-a-list-of-lists-in-python/"" rel=""nofollow"">https://mathieularose.com/how-not-to-flatten-a-list-of-lists-in-python/</a></p>
","122894","","122894","","2016-10-02 18:16:17","2016-10-02 18:16:17","","","","0","","",""
"16259217","2","","38987","2013-04-28 03:15:38","","58","","<p>In Python 3, you can use <a href=""http://docs.python.org/3/library/collections.html#collections.ChainMap""><em>collections.ChainMap</em></a> which groups multiple dicts or other mappings together to create a single, updateable view:</p>

<pre><code>&gt;&gt;&gt; from collections import ChainMap
&gt;&gt;&gt; x = {'a':1, 'b': 2}
&gt;&gt;&gt; y = {'b':10, 'c': 11}
&gt;&gt;&gt; z = ChainMap({}, y, x)
&gt;&gt;&gt; for k, v in z.items():
        print(k, '--&gt;', v)

a --&gt; 1
b --&gt; 10
c --&gt; 11
</code></pre>
","1001643","","1001643","","2014-09-27 08:12:41","2014-09-27 08:12:41","","","","4","","",""
"16769722","2","","38987","2013-05-27 09:04:20","","4","","<p>Using  a dict comprehension, you may</p>

<pre><code>x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}

dc = {xi:(x[xi] if xi not in list(y.keys()) 
           else y[xi]) for xi in list(x.keys())+(list(y.keys()))}
</code></pre>

<p>gives</p>

<pre><code>&gt;&gt;&gt; dc
{'a': 1, 'c': 11, 'b': 10}
</code></pre>

<p>Note the syntax for <code>if else</code> in comprehension </p>

<pre><code>{ (some_key if condition else default_key):(something_if_true if condition 
          else something_if_false) for key, value in dict_.items() }
</code></pre>
","1141493","","","","","2013-05-27 09:04:20","","","","1","","",""
"17587183","2","","38987","2013-07-11 07:13:12","","-2","","<p>Here is some code, it seems to work ok:</p>

<pre><code>def merge(d1, d2, mode=0):
    if not type(d2) is dict:
        raise Exception(""d2 is not a dict"")

    if not type(d1) is dict:
        if mode == 0:
            raise Exception(""d1 is not a dict"")
        return d2

    result = dict(d1)

    for k, v in d2.iteritems():
        if k in result and type(v) is dict:
            result[k] = merge(result[k], v, 1)
        else:
            if mode == 1:
                result.update(d2)
            else:
                result[k] = v
    return result
</code></pre>
","2571462","","2748838","","2014-09-13 19:51:27","2014-09-13 19:51:27","","","","0","","",""
"17738920","2","","38987","2013-07-19 05:49:19","","6","","<p>Drawing on ideas here and elsewhere I've comprehended a function:</p>

<pre><code>def merge(*dicts, **kv): 
      return { k:v for d in list(dicts) + [kv] for k,v in d.items() }
</code></pre>

<p>Usage (tested in python 3):</p>

<pre><code>assert (merge({1:11,'a':'aaa'},{1:99, 'b':'bbb'},foo='bar')==\
    {1: 99, 'foo': 'bar', 'b': 'bbb', 'a': 'aaa'})

assert (merge(foo='bar')=={'foo': 'bar'})

assert (merge({1:11},{1:99},foo='bar',baz='quux')==\
    {1: 99, 'foo': 'bar', 'baz':'quux'})

assert (merge({1:11},{1:99})=={1: 99})
</code></pre>

<p>You could use a lambda instead.</p>
","375570","","","","","2013-07-19 05:49:19","","","","0","","",""
"18114065","2","","38987","2013-08-07 21:23:08","","10","","<p>Abuse leading to a one-expression solution for <a href=""https://stackoverflow.com/a/39437/15055"">Matthew's answer</a>:</p>

<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}
&gt;&gt;&gt; y = {'b':10, 'c': 11}
&gt;&gt;&gt; z = (lambda f=x.copy(): (f.update(y), f)[1])()
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
</code></pre>

<p>You said you wanted one expression, so I abused <code>lambda</code> to bind a name, and tuples to override lambda's one-expression limit. Feel free to cringe.</p>

<p>You could also do this of course if you don't care about copying it:</p>

<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}
&gt;&gt;&gt; y = {'b':10, 'c': 11}
&gt;&gt;&gt; z = (x.update(y), x)[1]
&gt;&gt;&gt; z
{'a': 1, 'b': 10, 'c': 11}
</code></pre>
","15055","","-1","","2017-05-23 12:34:53","2014-09-13 19:52:18","","","","0","","",""
"18665968","2","","38987","2013-09-06 20:18:58","","1","","<p><code>**</code> creates an intermediary dict, which means that the total number of copies
is actually higher doing the <code>dict(one, **two)</code> form, but all that happens in C
so it's still generally faster than going to itertools, unless there are a huge number of copies (or, probably, if the copies are very expensive). As always if you actually care about speed you should time your use case.</p>

<p>Timing on Python 2.7.3 with an empty dict:</p>

<pre><code>$ python -m timeit ""dict({}, **{})""
1000000 loops, best of 3: 0.405 usec per loop

$ python -m timeit -s ""from itertools import chain"" \
    ""dict(chain({}.iteritems(), {}.iteritems()))""
1000000 loops, best of 3: 1.18 usec per loop
</code></pre>

<p>With 10,000 (tiny) items:</p>

<pre><code>$ python -m timeit -s 'd = {i: str(i) for i in xrange(10000)}' \
    ""dict(d, **d)""
1000 loops, best of 3: 550 usec per loop

$ python -m timeit -s ""from itertools import chain"" -s 'd = {i: str(i) for i in xrange(10000)}' \
    ""dict(chain(d.iteritems(), d.iteritems()))""
1000 loops, best of 3: 1.11 msec per loop
</code></pre>

<p>With 100,000 items:</p>

<pre><code>$ python -m timeit -s 'd = {i: str(i) for i in xrange(100000)}' \
    ""dict(d, **d)""
10 loops, best of 3: 19.6 msec per loop

$ python -m timeit -s ""from itertools import chain"" -s 'd = {i: str(i) for i in xrange(100000)}' \
    ""dict(chain(d.iteritems(), d.iteritems()))""
10 loops, best of 3: 20.1 msec per loop
</code></pre>

<p>With 1,000,000 items:</p>

<pre><code>$ python -m timeit -s 'd = {i: str(i) for i in xrange(1000000)}' \
    ""dict(d, **d)""
10 loops, best of 3: 273 msec per loop

$ python -m timeit -s ""from itertools import chain"" -s 'd = {i: str(i) for i in xrange(1000000)}' \
    ""dict(chain(d.iteritems(), d.iteritems()))""
10 loops, best of 3: 233 msec per loop
</code></pre>
","25616","","","","","2013-09-06 20:18:58","","","","0","","",""
"19279501","2","","38987","2013-10-09 18:09:08","","13","","<p>In python3, the <code>items</code> method <a href=""http://docs.python.org/dev/whatsnew/3.0.html#views-and-iterators-instead-of-lists"" rel=""nofollow noreferrer"">no longer returns a list</a>, but rather a <em>view</em>, which acts like a set. In this case you'll need to take the set union since concatenating with <code>+</code> won't work:</p>

<pre><code>dict(x.items() | y.items())
</code></pre>

<p>For python3-like behavior in version 2.7, the <code>viewitems</code> method should work in place of <code>items</code>:</p>

<pre><code>dict(x.viewitems() | y.viewitems())
</code></pre>

<p>I prefer this notation anyways since it seems more natural to think of it as a set union operation rather than concatenation (as the title shows).</p>

<p><strong>Edit:</strong></p>

<p>A couple more points for python 3. First, note that the <code>dict(x, **y)</code> trick won't work in python 3 unless the keys in <code>y</code> are strings.</p>

<p>Also, Raymond Hettinger's Chainmap <a href=""https://stackoverflow.com/a/16259217/386279"">answer</a> is pretty elegant, since it can take an arbitrary number of dicts as arguments, but <a href=""http://docs.python.org/dev/library/collections"" rel=""nofollow noreferrer"">from the docs</a> it looks like it sequentially looks through a list of all the dicts for each lookup:</p>

<blockquote>
  <p>Lookups search the underlying mappings successively until a key is found.</p>
</blockquote>

<p>This can slow you down if you have a lot of lookups in your application:</p>

<pre><code>In [1]: from collections import ChainMap
In [2]: from string import ascii_uppercase as up, ascii_lowercase as lo; x = dict(zip(lo, up)); y = dict(zip(up, lo))
In [3]: chainmap_dict = ChainMap(y, x)
In [4]: union_dict = dict(x.items() | y.items())
In [5]: timeit for k in union_dict: union_dict[k]
100000 loops, best of 3: 2.15 ¬µs per loop
In [6]: timeit for k in chainmap_dict: chainmap_dict[k]
10000 loops, best of 3: 27.1 ¬µs per loop
</code></pre>

<p>So about an order of magnitude slower for lookups. I'm a fan of Chainmap, but looks less practical where there may be many lookups.</p>
","386279","","-1","","2017-05-23 12:34:53","2013-10-14 13:27:29","","","","0","","",""
"19950727","2","","38987","2013-11-13 10:01:31","","7","","<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}
&gt;&gt;&gt; y = {'b':10, 'c': 11}
&gt;&gt;&gt; x, z = dict(x), x.update(y) or x
&gt;&gt;&gt; x
{'a': 1, 'b': 2}
&gt;&gt;&gt; y
{'c': 11, 'b': 10}
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
</code></pre>
","174728","","","","","2013-11-13 10:01:31","","","","0","","",""
"20358548","2","","38987","2013-12-03 18:11:54","","6","","<p>The problem I have with solutions listed to date is that, in the merged dictionary, the value for key ""b"" is 10 but, to my way of thinking, it should be 12.
In that light, I present the following:</p>

<pre><code>import timeit

n=100000
su = """"""
x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
""""""

def timeMerge(f,su,niter):
    print ""{:4f} sec for: {:30s}"".format(timeit.Timer(f,setup=su).timeit(n),f)

timeMerge(""dict(x, **y)"",su,n)
timeMerge(""x.update(y)"",su,n)
timeMerge(""dict(x.items() + y.items())"",su,n)
timeMerge(""for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k] "",su,n)

#confirm for loop adds b entries together
x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k]
print ""confirm b elements are added:"",x
</code></pre>

<h1>Results:</h1>

<pre><code>0.049465 sec for: dict(x, **y)
0.033729 sec for: x.update(y)                   
0.150380 sec for: dict(x.items() + y.items())   
0.083120 sec for: for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k]

confirm b elements are added: {'a': 1, 'c': 11, 'b': 12}
</code></pre>
","3062691","","","","","2013-12-03 18:11:54","","","","1","","",""
"20394520","2","","38987","2013-12-05 08:02:05","","2","","<p>I have a solution which is not specified here(Man I LOVE python) :-)</p>

<pre><code>z = {}
z.update(x) or z.update(y)
</code></pre>

<p>This will not update x as well as y. Performance? I don't think it will be terribly slow :-)</p>

<p>NOTE: It is supposed to be 'or' operation and not 'and' operation. Edited to correct the code.</p>
","850018","","850018","","2014-06-26 04:36:43","2014-06-26 04:36:43","","","","1","","",""
"22122836","2","","38987","2014-03-02 01:44:39","","3","","<p>It's so silly that <code>.update</code> returns nothing.<br>
I just use a simple helper function to solve the problem:</p>

<pre><code>def merge(dict1,*dicts):
    for dict2 in dicts:
        dict1.update(dict2)
    return dict1
</code></pre>

<p>Examples:</p>

<pre><code>merge(dict1,dict2)
merge(dict1,dict2,dict3)
merge(dict1,dict2,dict3,dict4)
merge({},dict1,dict2)  # this one returns a new copy
</code></pre>
","25700","","","","","2014-03-02 01:44:39","","","","0","","",""
"26111877","2","","38987","2014-09-30 02:36:19","","2","","<p>A union of the OP's two dictionaries would be something like:</p>

<pre><code>{'a': 1, 'b': 2, 10, 'c': 11}
</code></pre>

<p>Specifically, the union of two entities(<code>x</code> and <code>y</code>) contains all the elements of <code>x</code> and/or <code>y</code>.
Unfortunately, what the OP asks for is not a union, despite the title of the post.</p>

<p>My code below is neither elegant nor a one-liner, but I believe it is consistent with the meaning of union.</p>

<p>From the OP's example:</p>

<pre><code>x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}

z = {}
for k, v in x.items():
    if not k in z:
        z[k] = [(v)]
    else:
        z[k].append((v))
for k, v in y.items():
    if not k in z:
        z[k] = [(v)]
    else:
        z[k].append((v))

{'a': [1], 'b': [2, 10], 'c': [11]}
</code></pre>

<p>Whether one wants lists could be changed, but the above will work if a dictionary contains lists (and nested lists) as values in either dictionary.</p>
","3169972","","128421","","2015-01-10 02:21:58","2015-01-10 02:21:58","","","","2","","",""
"26853961","2","","38987","2014-11-10 22:11:48","","2351","","<blockquote>
  <h1>How can I merge two Python dictionaries in a single expression?</h1>
</blockquote>

<p>Say you have two dicts and you want to merge them into a new dict without altering the original dicts:</p>

<pre><code>x = {'a': 1, 'b': 2}
y = {'b': 3, 'c': 4}
</code></pre>

<p>The desired result is to get a new dictionary (<code>z</code>) with the values merged, and the second dict's values overwriting those from the first.</p>

<pre><code>&gt;&gt;&gt; z
{'a': 1, 'b': 3, 'c': 4}
</code></pre>

<p>A new syntax for this, proposed in <a href=""https://www.python.org/dev/peps/pep-0448"" rel=""noreferrer"">PEP 448</a> and <a href=""https://mail.python.org/pipermail/python-dev/2015-February/138564.html"" rel=""noreferrer"">available as of Python 3.5</a>, is </p>

<pre><code>z = {**x, **y}
</code></pre>

<p>And it is indeed a single expression. It is now showing as implemented in the <a href=""https://www.python.org/dev/peps/pep-0478/#features-for-3-5"" rel=""noreferrer"">release schedule for 3.5, PEP 478</a>, and it has now made its way into <a href=""https://docs.python.org/dev/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations"" rel=""noreferrer"">What's New in Python 3.5</a> document.</p>

<p>However, since many organizations are still on Python 2, you may wish to do this in a backwards compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:</p>

<pre><code>z = x.copy()
z.update(y) # which returns None since it mutates z
</code></pre>

<p>In both approaches, <code>y</code> will come second and its values will replace <code>x</code>'s values, thus <code>'b'</code> will point to <code>3</code> in our final result.</p>

<h1>Not yet on Python 3.5, but want a <em>single expression</em></h1>

<p>If you are not yet on Python 3.5, or need to write backward-compatible code, and you want this in a <em>single expression</em>, the most performant while correct approach is to put it in a function:</p>

<pre><code>def merge_two_dicts(x, y):
    """"""Given two dicts, merge them into a new dict as a shallow copy.""""""
    z = x.copy()
    z.update(y)
    return z
</code></pre>

<p>and then you have a single expression:</p>

<pre><code>z = merge_two_dicts(x, y)
</code></pre>

<p>You can also make a function to merge an undefined number of dicts, from zero to a very large number:</p>

<pre><code>def merge_dicts(*dict_args):
    """"""
    Given any number of dicts, shallow copy and merge into a new dict,
    precedence goes to key value pairs in latter dicts.
    """"""
    result = {}
    for dictionary in dict_args:
        result.update(dictionary)
    return result
</code></pre>

<p>This function will work in Python 2 and 3 for all dicts. e.g. given dicts <code>a</code> to <code>g</code>:</p>

<pre><code>z = merge_dicts(a, b, c, d, e, f, g) 
</code></pre>

<p>and key value pairs in <code>g</code> will take precedence over dicts <code>a</code> to <code>f</code>, and so on.</p>

<h1>Critiques of Other Answers</h1>

<p>Don't use what you see in the formerly accepted answer:</p>

<pre><code>z = dict(x.items() + y.items())
</code></pre>

<p>In Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. <strong>In Python 3, this will fail</strong> because you're adding two <code>dict_items</code> objects together, not two lists - </p>

<pre><code>&gt;&gt;&gt; c = dict(a.items() + b.items())
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'
</code></pre>

<p>and you would have to explicitly create them as lists, e.g. <code>z = dict(list(x.items()) + list(y.items()))</code>. This is a waste of resources and computation power. </p>

<p>Similarly, taking the union of <code>items()</code> in Python 3 (<code>viewitems()</code> in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, <strong>since sets are semantically unordered, the behavior is undefined in regards to precedence. So don't do this:</strong></p>

<pre><code>&gt;&gt;&gt; c = dict(a.items() | b.items())
</code></pre>

<p>This example demonstrates what happens when values are unhashable:</p>

<pre><code>&gt;&gt;&gt; x = {'a': []}
&gt;&gt;&gt; y = {'b': []}
&gt;&gt;&gt; dict(x.items() | y.items())
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</code></pre>

<p>Here's an example where y should have precedence, but instead the value from x is retained due to the arbitrary order of sets:</p>

<pre><code>&gt;&gt;&gt; x = {'a': 2}
&gt;&gt;&gt; y = {'a': 1}
&gt;&gt;&gt; dict(x.items() | y.items())
{'a': 2}
</code></pre>

<p>Another hack you should not use:</p>

<pre><code>z = dict(x, **y)
</code></pre>

<p>This uses the <code>dict</code> constructor, and is very fast and memory efficient (even slightly more-so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it's difficult to read, it's not the intended usage, and so it is not Pythonic. </p>

<p>Here's an example of the usage being <a href=""https://code.djangoproject.com/attachment/ticket/13357/django-pypy.2.diff"" rel=""noreferrer"">remediated in django</a>.</p>

<p>Dicts are intended to take hashable keys (e.g. frozensets or tuples), but <strong>this method fails in Python 3 when keys are not strings.</strong></p>

<pre><code>&gt;&gt;&gt; c = dict(a, **b)
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: keyword arguments must be strings
</code></pre>

<p>From the <a href=""https://mail.python.org/pipermail/python-dev/2010-April/099459.html"" rel=""noreferrer"">mailing list</a>, Guido van Rossum, the creator of the language, wrote:</p>

<blockquote>
  <p>I am fine with
  declaring dict({}, **{1:3}) illegal, since after all it is abuse of
  the ** mechanism.</p>
</blockquote>

<p>and </p>

<blockquote>
  <p>Apparently dict(x, **y) is going around as ""cool hack"" for ""call
  x.update(y) and return x"". Personally I find it more despicable than
  cool.</p>
</blockquote>

<p>It is my understanding (as well as the understanding of the <a href=""https://mail.python.org/pipermail/python-dev/2010-April/099485.html"" rel=""noreferrer"">creator of the language</a>) that the intended usage for <code>dict(**y)</code> is for creating dicts for readability purposes, e.g.:</p>

<pre><code>dict(a=1, b=10, c=11)
</code></pre>

<p>instead of </p>

<pre><code>{'a': 1, 'b': 10, 'c': 11}
</code></pre>

<h2>Response to comments</h2>

<blockquote>
  <p>Despite what Guido says, <code>dict(x, **y)</code> is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-comming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact ** was designed precisely to pass dicts as keywords. </p>
</blockquote>

<p>Again, it doesn't work for 3 when keys are non-strings. The implicit calling contract is that namespaces take ordinary dicts, while users must only pass keyword arguments that are strings. All other callables enforced it. <code>dict</code> broke this consistency in Python 2:</p>

<pre><code>&gt;&gt;&gt; foo(**{('a', 'b'): None})
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: foo() keywords must be strings
&gt;&gt;&gt; dict(**{('a', 'b'): None})
{('a', 'b'): None}
</code></pre>

<p>This inconsistency was bad given other implementations of Python (Pypy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.</p>

<p>I submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.</p>

<p>Another comment:</p>

<blockquote>
  <p><code>dict(x.items() + y.items())</code> is still the most readable solution for Python 2. Readability counts. </p>
</blockquote>

<p>My response: <code>merge_two_dicts(x, y)</code> actually seems much clearer to me, if we're actually concerned about readability. And it is not forward compatible, as Python 2 is increasingly deprecated.</p>

<h1>Less Performant But Correct Ad-hocs</h1>

<p>These approaches are less performant, but they will provide correct behavior.
They will be <em>much less</em> performant than <code>copy</code> and <code>update</code> or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they <em>do</em> respect the order of precedence (latter dicts have precedence)</p>

<p>You can also chain the dicts manually inside a dict comprehension:</p>

<pre><code>{k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7
</code></pre>

<p>or in python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):</p>

<pre><code>dict((k, v) for d in dicts for k, v in d.items())
</code></pre>

<p><code>itertools.chain</code> will chain the iterators over the key-value pairs in the correct order:</p>

<pre><code>import itertools
z = dict(itertools.chain(x.iteritems(), y.iteritems()))
</code></pre>

<h1>Performance Analysis</h1>

<p>I'm only going to do the performance analysis of the usages known to behave correctly. </p>

<pre><code>import timeit
</code></pre>

<p>The following is done on Ubuntu 14.04</p>

<p>In Python 2.7 (system Python):</p>

<pre><code>&gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))
0.5726828575134277
&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))
1.163769006729126
&gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.iteritems(), y.iteritems()))))
1.1614501476287842
&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))
2.2345519065856934
</code></pre>

<p>In Python 3.5 (deadsnakes PPA):</p>

<pre><code>&gt;&gt;&gt; min(timeit.repeat(lambda: {**x, **y}))
0.4094954460160807
&gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))
0.7881555100320838
&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))
1.4525277839857154
&gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.items(), y.items()))))
2.3143140770262107
&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))
3.2069112799945287
</code></pre>

<h2>Resources on Dictionaries</h2>

<ul>
<li><a href=""https://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented/44509302#44509302"">My explanation of Python's <strong>dictionary implementation</strong>, updated for 3.6.</a></li>
<li><a href=""https://stackoverflow.com/questions/1024847/add-new-keys-to-a-dictionary/27208535#27208535"">Answer on how to add new keys to a dictionary</a></li>
<li><a href=""https://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python/33737067#33737067"">Mapping two lists into a dictionary</a></li>
<li>The official Python <a href=""https://docs.python.org/3/tutorial/datastructures.html#dictionaries"" rel=""noreferrer"">docs on dictionaries</a> </li>
<li><a href=""https://www.youtube.com/watch?v=66P5FMkWoVU"" rel=""noreferrer"">The Dictionary Even Mightier</a> - talk by Brandon Rhodes at Pycon 2017</li>
<li><a href=""https://www.youtube.com/watch?v=npw4s1QTmPg"" rel=""noreferrer"">Modern Python Dictionaries, A Confluence of Great Ideas</a> - talk by Raymond Hettinger at Pycon 2017</li>
</ul>
","541136","","541136","","2017-09-29 17:01:44","2017-09-29 17:01:44","","","","0","","",""
"28753078","2","","38987","2015-02-26 21:27:52","","30","","<p>Python 3.5 (PEP 448) allows a nicer syntax option:</p>

<pre><code>x = {'a': 1, 'b': 1}
y = {'a': 2, 'c': 2}
final = {**x, **y} 
final
# {'a': 2, 'b': 1, 'c': 2}
</code></pre>

<p>Or even </p>

<pre><code>final = {'a': 1, 'b': 1, **x, **y}
</code></pre>
","852240","","","","","2015-02-26 21:27:52","","","","2","","",""
"29177685","2","","38987","2015-03-21 00:06:12","","3","","<pre><code>a = {1: 2, 3: 4, 5: 6}
b = {7:8, 1:2}
combined = dict(a.items() + b.items())
print combined
</code></pre>
","4596008","","","","","2015-03-21 00:06:12","","","","0","","",""
"31478567","2","","38987","2015-07-17 14:47:23","","4","","<p>This can be done with a single dict comprehension:</p>

<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}
&gt;&gt;&gt; y = {'b':10, 'c': 11}
&gt;&gt;&gt; { key: y[key] if key in y else x[key]
      for key in set(x) + set(y)
    }
</code></pre>

<p>In my view the best answer for the 'single expression' part as no extra functions are needed, and it is short.</p>
","799163","","","","","2015-07-17 14:47:23","","","","1","","",""
"31812635","2","","38987","2015-08-04 14:54:58","","9","","<p>Simple solution using itertools that preserves order (latter dicts have precedence)</p>

<pre><code>import itertools as it
merge = lambda *args: dict(it.chain.from_iterable(it.imap(dict.iteritems, args)))
</code></pre>

<p>And it's usage:</p>

<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}
&gt;&gt;&gt; y = {'b':10, 'c': 11}
&gt;&gt;&gt; merge(x, y)
{'a': 1, 'b': 10, 'c': 11}

&gt;&gt;&gt; z = {'c': 3, 'd': 4}
&gt;&gt;&gt; merge(x, y, z)
{'a': 1, 'b': 10, 'c': 3, 'd': 4}
</code></pre>
","408556","","408556","","2016-09-06 11:30:16","2016-09-06 11:30:16","","","","0","","",""
"33999337","2","","38987","2015-11-30 13:04:00","","4","","<pre><code>from collections import Counter
dict1 = {'a':1, 'b': 2}
dict2 = {'b':10, 'c': 11}
result = dict(Counter(dict1) + Counter(dict2))
</code></pre>

<p>This should solve your problem.</p>
","3145137","","","","","2015-11-30 13:04:00","","","","0","","",""
"34899183","2","","38987","2016-01-20 11:46:22","","10","","<p>Be pythonic. Use a <a href=""https://docs.python.org/2/tutorial/datastructures.html#dictionaries"" rel=""noreferrer"">comprehension</a>:</p>

<pre><code>z={i:d[i] for d in [x,y] for i in d}

&gt;&gt;&gt; print z
{'a': 1, 'c': 11, 'b': 10}
</code></pre>
","833208","","833208","","2016-09-29 10:45:25","2016-09-29 10:45:25","","","","0","","",""
"36263150","2","","38987","2016-03-28 13:13:27","","4","","<p>(For Python2.7* only; there are simpler solutions for Python3*.)</p>

<p>If you're not averse to importing a standard library module, you can do</p>

<pre><code>from functools import reduce

def merge_dicts(*dicts):
    return reduce(lambda a, d: a.update(d) or a, dicts, {})
</code></pre>

<p>(The <code>or a</code> bit in the <code>lambda</code> is necessary because <code>dict.update</code> always returns <code>None</code> on success.)</p>
","559827","","","","","2016-03-28 13:13:27","","","","0","","",""
"37304637","2","","38987","2016-05-18 15:57:32","","3","","<p>I know this does not really fit the specifics of the questions (""one liner""), but since <em>none</em> of the answers above went into this direction while lots and lots of answers addressed the performance issue, I felt I should contribute my thoughts.</p>

<p>Depending on the use case it might not be necessary to create a ""real"" merged dictionary of the given input dictionaries.  A <em>view</em> which does this might be sufficient in many cases, i. e. an object which acts <em>like</em> the merged dictionary would without computing it completely.  A lazy version of the merged dictionary, so to speak.</p>

<p>In Python, this is rather simple and can be done with the code shown at the end of my post.  This given, the answer to the original question would be:</p>

<pre><code>z = MergeDict(x, y)
</code></pre>

<p>When using this new object, it will behave like a merged dictionary but it will have constant creation time and constant memory footprint while leaving the original dictionaries untouched.  Creating it is way cheaper than in the other solutions proposed.</p>

<p>Of course, if you use the result a lot, then you will at some point reach the limit where creating a real merged dictionary would have been the faster solution.  As I said, it depends on your use case.</p>

<p>If you ever felt you would prefer to have a real merged <code>dict</code>, then calling <code>dict(z)</code> would produce it (but way more costly than the other solutions of course, so this is just worth mentioning).</p>

<p>You can also use this class to make a kind of copy-on-write dictionary:</p>

<pre><code>a = { 'x': 3, 'y': 4 }
b = MergeDict(a)  # we merge just one dict
b['x'] = 5
print b  # will print {'x': 5, 'y': 4}
print a  # will print {'y': 4, 'x': 3}
</code></pre>

<p>Here's the straight-forward code of <code>MergeDict</code>:</p>

<pre><code>class MergeDict(object):
  def __init__(self, *originals):
    self.originals = ({},) + originals[::-1]  # reversed

  def __getitem__(self, key):
    for original in self.originals:
      try:
        return original[key]
      except KeyError:
        pass
    raise KeyError(key)

  def __setitem__(self, key, value):
    self.originals[0][key] = value

  def __iter__(self):
    return iter(self.keys())

  def __repr__(self):
    return '%s(%s)' % (
      self.__class__.__name__,
      ', '.join(repr(original)
          for original in reversed(self.originals)))

  def __str__(self):
    return '{%s}' % ', '.join(
        '%r: %r' % i for i in self.iteritems())

  def iteritems(self):
    found = set()
    for original in self.originals:
      for k, v in original.iteritems():
        if k not in found:
          yield k, v
          found.add(k)

  def items(self):
    return list(self.iteritems())

  def keys(self):
    return list(k for k, _ in self.iteritems())

  def values(self):
    return list(v for _, v in self.iteritems())
</code></pre>
","1281485","","","","","2016-05-18 15:57:32","","","","2","","",""
"39251599","2","","38987","2016-08-31 13:53:20","","6","","<p>For Python 2 :</p>

<pre><code>x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items()+y.items())
print(z)
</code></pre>

<p>For Python 3:</p>

<pre><code>x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items()|y.items())
print(z)
</code></pre>

<p>It gives output:<code>{'a': 1, 'c': 11, 'b': 10}</code></p>
","6742808","","6742808","","2016-09-01 06:29:01","2016-09-01 06:29:01","","","","1","","",""
"39736284","2","","38987","2016-09-28 00:33:55","","4","","<p>In Python 3.5 you can use unpack <code>**</code> in order to create new dictionary. 
This method has no been showed in past answers. Also, it's better to use <code>{}</code> instead of <code>dict()</code>. Because <code>{}</code> is a python literal and <code>dict()</code> involves a function call.</p>

<pre><code>dict1 = {'a':1}
dict2 = {'b':2}
new_dict = {**dict1, **dict2}
&gt;&gt;&gt;new_dict
{'a':1, 'a':2}
</code></pre>
","1539655","","","","","2016-09-28 00:33:55","","","","1","","",""
"40677646","2","","38987","2016-11-18 12:53:29","","6","","<p>You can use <a href=""http://toolz.readthedocs.io/en/latest/api.html#toolz.dicttoolz.merge"" rel=""noreferrer""><code>toolz.merge([x, y])</code></a> for this.</p>
","192839","","192839","","2017-03-29 03:40:52","2017-03-29 03:40:52","","","","0","","",""
"44151666","2","","38987","2017-05-24 07:24:50","","5","","<p>In python 3:</p>

<pre><code>import collections
a = {1: 1, 2: 2}
b = {2: 3, 3: 4}
c = {3: 5}

r = dict(collections.ChainMap(a, b, c))
print(r)
</code></pre>

<p>Out:</p>

<pre><code>{1: 1, 2: 2, 3: 4}
</code></pre>

<p>Docs: <a href=""https://docs.python.org/3/library/collections.html#collections.ChainMap"" rel=""noreferrer"">https://docs.python.org/3/library/collections.html#collections.ChainMap</a>:</p>
","4323148","","","","","2017-05-24 07:24:50","","","","0","","",""
"44262317","2","","38987","2017-05-30 12:28:26","","2","","<p>The question is tagged <code>python-3x</code> but, taking into account that it's a relatively recent addition and that the most voted, accepted answer deals extensively with a Python 2.x solution, I dare add a one liner that draws on an irritating feature of Python 2.x list comprehension, that is <em>name leaking</em>...</p>

<pre><code>$ python2
Python 2.7.13 (default, Jan 19 2017, 14:48:08) 
[GCC 6.3.0 20170118] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; x = {'a':1, 'b': 2}
&gt;&gt;&gt; y = {'b':10, 'c': 11}
&gt;&gt;&gt; [z.update(d) for z in [{}] for d in (x, y)]
[None, None]
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
&gt;&gt;&gt; ...
</code></pre>

<p>I'm happy to say that the above doesn't work any more on any version of Python 3.</p>
","2749397","","","","","2017-05-30 12:28:26","","","","0","","",""
"46356150","2","","38987","2017-09-22 02:57:15","","0","","<p>If you don't mind mutating <code>x</code>,</p>

<pre><code>x.update(y) or x
</code></pre>

<p>Simple, readable, performant. You <em>know</em> <code>update()</code> always returns <code>None</code>, which is a false value. So it will always evaluate to <code>x</code>.</p>

<p>Mutating methods in the standard library, like <code>update</code>, return <code>None</code> by convention, so this trick will work on those too.</p>

<p>If you're using a library that doesn't follow this convention, you can use a tuple display and index to make it a single expression, instead of <code>or</code>, but it's not as readable.</p>

<pre><code>(x.update(y), x)[-1]
</code></pre>

<p>If you don't have <code>x</code> in a variable yet, you can use <code>lambda</code> to make a local without using an assignment statement. This amounts to using <code>lambda</code> as a <em>let expression</em>, which is common technique in functional languages, but rather unpythonic.</p>

<pre><code>(lambda x: x.update(y) or x)({'a':1, 'b': 2})
</code></pre>

<p>If you do want a copy, PEP 448 is best <code>{**x, **y}</code>. But if that's not available, <em>let</em> works here too.</p>

<pre><code>(lambda z: z.update(y) or z)(x.copy())
</code></pre>
","4381487","","","","","2017-09-22 02:57:15","","","","0","","",""
"46439094","2","","38987","2017-09-27 03:39:30","","1","","<p>Pythonic way (Python 2)</p>

<pre><code>dict1 = {
    'a': 'Apple',
    'b': 'Boy'
}

dict2 = {
    'c': 'Cow',
    'd': 'Dog'
}

merged_dict = dict1.copy()
merged_dict.update(dict2)
</code></pre>
","4612387","","4612387","","2017-09-27 04:00:58","2017-09-27 04:00:58","","","","1","","",""
"39089","2","","39086","2008-09-02 09:24:20","","2","","<p>Create a new file, copy lines from the old to the new, and do the replacing before you write the lines to the new file.</p>
","267","lassevk","","","","2008-09-02 09:24:20","","","","0","","",""
"39110","2","","39086","2008-09-02 09:42:21","","131","","<p>I guess something like this should do it. It basically writes the content to a new file and replaces the old file with the new file:</p>

<pre><code>from tempfile import mkstemp
from shutil import move
from os import fdopen, remove

def replace(file_path, pattern, subst):
    #Create temp file
    fh, abs_path = mkstemp()
    with fdopen(fh,'w') as new_file:
        with open(file_path) as old_file:
            for line in old_file:
                new_file.write(line.replace(pattern, subst))
    #Remove original file
    remove(file_path)
    #Move new file
    move(abs_path, file_path)
</code></pre>
","4059","Thomas Watnedal","94077","","2017-06-14 16:24:44","2017-06-14 16:24:44","","","","10","","",""
"39113","2","","39086","2008-09-02 09:42:57","","10","","<p>As lassevk suggests, write out the new file as you go, here is some example code:</p>

<pre><code>fin = open(""a.txt"")
fout = open(""b.txt"", ""wt"")
for line in fin:
    fout.write( line.replace('foo', 'bar') )
fin.close()
fout.close()
</code></pre>
","3590","hamishmcn","","","","2008-09-02 09:42:57","","","","0","","",""
"290494","2","","39086","2008-11-14 15:47:40","","208","","<p>The shortest way would probably be to use the <a href=""http://docs.python.org/2/library/fileinput.html?highlight=fileinput#fileinput"" rel=""noreferrer"">fileinput module</a>. For example, the following adds line numbers to a file, in-place:</p>

<pre><code>import fileinput

for line in fileinput.input(""test.txt"", inplace=True):
    print ""%d: %s"" % (fileinput.filelineno(), line),
</code></pre>

<p>What happens here is:</p>

<ol>
<li>The original file is moved to a backup file</li>
<li>The standard output is redirected to the original file within the loop</li>
<li>Thus any <code>print</code> statements write back into the original file</li>
</ol>

<p><code>fileinput</code> has more bells and whistles. For example, it can be used to automatically operate on all files in <code>sys.args[1:]</code>, without your having to iterate over them explicitly. Starting with Python 3.2 it also provides a convenient context manager for use in a <code>with</code> statement.</p>

<hr>

<p>While <code>fileinput</code> is great for throwaway scripts, I would be wary of using it in real code because admittedly it's not very readable or familiar. In real (production) code it's worthwhile to spend just a few more lines of code to make the process explicit and thus make the code readable.</p>

<p>There are two options:</p>

<ol>
<li>The file is not overly large, and you can just read it wholly to memory. Then close the file, reopen it in writing mode and write the modified contents back.</li>
<li>The file is too large to be stored in memory; you can move it over to a temporary file and open that, reading it line by line, writing back into the original file. Note that this requires twice the storage.</li>
</ol>
","8206","eliben","8206","","2013-10-31 13:24:14","2013-10-31 13:24:14","","","","14","","",""
"315088","2","","39086","2008-11-24 19:02:28","","58","","<p>Here's another example that was tested, and will match search &amp; replace patterns:</p>

<pre><code>import fileinput
import sys

def replaceAll(file,searchExp,replaceExp):
    for line in fileinput.input(file, inplace=1):
        if searchExp in line:
            line = line.replace(searchExp,replaceExp)
        sys.stdout.write(line)
</code></pre>

<p>Example use:</p>

<pre><code>replaceAll(""/fooBar.txt"",""Hello\sWorld!$"",""Goodbye\sWorld."")
</code></pre>
","26860","","128421","","2011-04-27 02:25:41","2011-04-27 02:25:41","","","","2","","",""
"1388570","2","","39086","2009-09-07 10:07:25","","42","","<p>This should work: (inplace editing)</p>

<pre><code>import fileinput

# Does a list of files, and
# redirects STDOUT to the file in question
for line in fileinput.input(files, inplace = 1): 
      print line.replace(""foo"", ""bar""),
</code></pre>
","1798387","","450917","","2016-01-13 00:35:31","2016-01-13 00:35:31","","","","5","","",""
"11784227","2","","39086","2012-08-02 19:12:12","","0","","<p>if you remove the indent at the like below, it will search and replace in multiple line.
See below for example.</p>

<pre><code>def replace(file, pattern, subst):
    #Create temp file
    fh, abs_path = mkstemp()
    print fh, abs_path
    new_file = open(abs_path,'w')
    old_file = open(file)
    for line in old_file:
        new_file.write(line.replace(pattern, subst))
    #close temp file
    new_file.close()
    close(fh)
    old_file.close()
    #Remove original file
    remove(file)
    #Move new file
    move(abs_path, file)
</code></pre>
","1572353","","2115428","","2013-04-08 00:41:53","2013-04-08 00:41:53","","","","1","","",""
"13641746","2","","39086","2012-11-30 08:51:17","","14","","<p>Based on the answer by Thomas Watnedal. 
However, this does not answer the line-to-line part of the original question exactly. The function can still replace on a line-to-line basis </p>

<p>This implementation replaces the file contents without using temporary files, as a consequence file permissions remain unchanged.</p>

<p>Also re.sub instead of replace, allows regex replacement instead of plain text replacement only.</p>

<p>Reading the file as a single string instead of line by line allows for multiline match and replacement.</p>

<pre><code>import re

def replace(file, pattern, subst):
    # Read contents from file as a single string
    file_handle = open(file, 'r')
    file_string = file_handle.read()
    file_handle.close()

    # Use RE package to allow for replacement (also allowing for (multiline) REGEX)
    file_string = (re.sub(pattern, subst, file_string))

    # Write contents to file.
    # Using mode 'w' truncates the file.
    file_handle = open(file, 'w')
    file_handle.write(file_string)
    file_handle.close()
</code></pre>
","1865688","","1865688","","2012-11-30 09:22:19","2012-11-30 09:22:19","","","","1","","",""
"18676598","2","","39086","2013-09-07 18:39:01","","6","","<p>A more pythonic way would be to use context managers like the code below:</p>

<pre><code>from tempfile import mkstemp
from shutil import move
from os import remove

def replace(source_file_path, pattern, substring):
    fh, target_file_path = mkstemp()
    with open(target_file_path, 'w') as target_file:
        with open(source_file_path, 'r') as source_file:
            for line in source_file:
                target_file.write(line.replace(pattern, substring))
    remove(source_file_path)
    move(target_file_path, source_file_path)
</code></pre>

<p>You can find the full snippet <a href=""https://gist.github.com/kirang89/6478017"" rel=""nofollow"">here</a>.</p>
","959654","","5465739","","2016-07-13 19:40:26","2016-07-13 19:40:26","","","","0","","",""
"21857132","2","","39086","2014-02-18 14:43:02","","7","","<p>If you're wanting a generic function that replaces <em>any</em> text with some other text, this is likely the best way to go, particularly if you're a fan of regex's:</p>

<pre><code>import re
def replace( filePath, text, subs, flags=0 ):
    with open( filePath, ""r+"" ) as file:
        fileContents = file.read()
        textPattern = re.compile( re.escape( text ), flags )
        fileContents = textPattern.sub( subs, fileContents )
        file.seek( 0 )
        file.truncate()
        file.write( fileContents )
</code></pre>
","1476057","","","","","2014-02-18 14:43:02","","","","0","","",""
"23123426","2","","39086","2014-04-17 02:13:32","","0","","<p>Using hamishmcn's answer as a template I was able to search for a line in a file that match my regex and replacing it with empty string.</p>

<pre><code>import re 

fin = open(""in.txt"", 'r') # in file
fout = open(""out.txt"", 'w') # out file
for line in fin:
    p = re.compile('[-][0-9]*[.][0-9]*[,]|[-][0-9]*[,]') # pattern
    newline = p.sub('',line) # replace matching strings with empty string
    print newline
    fout.write(newline)
fin.close()
fout.close()
</code></pre>
","3543537","","","","","2014-04-17 02:13:32","","","","1","","",""
"23426834","2","","39086","2014-05-02 11:15:57","","3","","<p>Expanding on @Kiran's answer, which I agree is more succinct and Pythonic, this adds codecs to support the reading and writing of UTF-8:</p>

<pre><code>import codecs 

from tempfile import mkstemp
from shutil import move
from os import remove


def replace(source_file_path, pattern, substring):
    fh, target_file_path = mkstemp()

    with codecs.open(target_file_path, 'w', 'utf-8') as target_file:
        with codecs.open(source_file_path, 'r', 'utf-8') as source_file:
            for line in source_file:
                target_file.write(line.replace(pattern, substring))
    remove(source_file_path)
    move(target_file_path, source_file_path)
</code></pre>
","343223","","","","","2014-05-02 11:15:57","","","","1","","",""
"39295","2","","39104","2008-09-02 11:43:45","","4","","<p>That's probably the way to do it, without resorting to something more advanced like using setuptools to install the files where they belong.</p>

<p>Notice there's a problem with that approach, because on OSes with real a security framework (UNIXes, etc.) the user running your script might not have the rights to access the DB in the system directory where it gets installed.</p>
","2384","davidg","","","","2008-09-02 11:43:45","","","","0","","",""
"39659","2","","39104","2008-09-02 14:26:07","","22","","<p>Try using pkg_resources, which is part of setuptools (and available on all of the pythons I have access to right now):</p>

<pre><code>&gt;&gt;&gt; import pkg_resources
&gt;&gt;&gt; pkg_resources.resource_ filename(__name__, ""foo.config"")
'foo.config'
&gt;&gt;&gt; pkg_resources.resource_filename('tempfile', ""foo.config"")
'/usr/lib/python2.4/foo.config'
</code></pre>

<p>There's more discussion about using pkg_resources to get resources on the <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs#accessing-package-resources"" rel=""noreferrer"">eggs</a> page and the <a href=""http://peak.telecommunity.com/DevCenter/PkgResources"" rel=""noreferrer"">pkg_resources</a> page.</p>

<p>Also note, where possible it's probably advisable to use pkg_resources.resource_stream or pkg_resources.resource_string because if the package is part of an egg, resource_filename will copy the file to a temporary directory.</p>
","2603","zacherates","4028","","2011-08-11 20:43:02","2011-08-11 20:43:02","","","","3","","",""
"9918496","2","","39104","2012-03-29 02:52:42","","10","","<p>Use <code>pkgutil.get_data</code>. It‚Äôs the cousin of <code>pkg_resources.resource_stream</code>, but in the standard library, and should work with flat filesystem installs as well as zipped packages and other importers.</p>
","821378","","821378","","2014-04-14 17:21:18","2014-04-14 17:21:18","","","","1","","",""
"41555","2","","41547","2008-09-03 12:28:34","","2","","<p>If you can hook your authentication into the <a href=""http://www.djangoproject.com/documentation/authentication/#authentication-in-web-requests"" rel=""nofollow noreferrer"">Django authentication scheme</a> you'll be able to use <code>request.user</code>.</p>

<p>I think this should just be a case of calling <code>authenticate()</code> and <code>login()</code> based on the contents of your Cookie.</p>

<p>Edit: @Staale - I always use the <a href=""http://www.djangobook.com/en/1.0/chapter04/"" rel=""nofollow noreferrer""><code>locals()</code> trick</a> for my context so all my templates can see <code>request</code> and so <code>request.user</code>.  If you're not then I guess it wouldn't be so straightforward.</p>
","3171","Dave Webb","3171","Dave Webb","2008-09-03 12:46:08","2008-09-03 12:46:08","","","","0","","",""
"41558","2","","41547","2008-09-03 12:31:58","","18","","<p>In a more general sense of not having to explicitly set variables in each view, it sounds like you want to look at writing your own <a href=""http://docs.djangoproject.com/en/dev/ref/templates/api/#writing-your-own-context-processors"" rel=""noreferrer"">context processor</a>.</p>

<p>From the docs:</p>

<blockquote>
  <p>A context processor has a very simple interface: It's just a Python function that takes one argument, an HttpRequest object, and returns a dictionary that gets added to the template context. Each context processor must return a dictionary.</p>
</blockquote>
","2696","Ryan Duffield","","","","2008-09-03 12:31:58","","","","0","","",""
"41560","2","","41547","2008-09-03 12:33:31","","2","","<p>@Dave
To use {{user.username}} in my templates, I will then have to use 
requestcontext rather than just a normal map/hash: <a href=""http://www.djangoproject.com/documentation/templates_python/#subclassing-context-requestcontext"" rel=""nofollow noreferrer"">http://www.djangoproject.com/documentation/templates_python/#subclassing-context-requestcontext</a></p>

<p>So I guess there are no globals that the template engine checks.</p>

<p>But the RequestContext has some prepopulate classes that I can look into to solve my problems. Thanks.</p>
","3355","Staale","","","","2008-09-03 12:33:31","","","","0","","",""
"269249","2","","41547","2008-11-06 16:05:03","","32","","<p>@Ryan: Documentation about preprocessors is a bit small</p>

<p>@Staale: Adding user to the Context every time one is calling the template in view, DRY</p>

<p>Solution is to use a preprocessor</p>

<p><strong>A</strong>: In your settings add</p>

<pre><code>TEMPLATE_CONTEXT_PROCESSORS = (
    'myapp.processor_file_name.user',
)
</code></pre>

<p><strong>B</strong>: In myapp/processor_file_name.py insert</p>

<pre><code>def user(request):
    if hasattr(request, 'user'):
        return {'user':request.user }
    return {}
</code></pre>

<p>From now on you're able to use user object functionalities in your templates.</p>

<pre><code>{{ user.get_full_name }}
</code></pre>
","23457","zalun","23457","","2017-08-15 09:01:21","2017-08-15 09:01:21","","","","3","","",""
"1064621","2","","41547","2009-06-30 16:14:29","","43","","<p>There is <strong>no need</strong> to write a context processor for the user object if you already have the <a href=""https://docs.djangoproject.com/en/dev/topics/auth/default/#authentication-data-in-templates"" rel=""noreferrer""><code>""django.core.context_processors.auth""</code></a> in <a href=""https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TEMPLATE_CONTEXT_PROCESSORS"" rel=""noreferrer""><code>TEMPLATE_CONTEXT_PROCESSORS</code></a> <strong>and</strong> if you're using <a href=""https://docs.djangoproject.com/en/dev/ref/templates/api/#subclassing-context-requestcontext"" rel=""noreferrer""><code>RequestContext</code></a> in your views. </p>

<p>if you are using django 1.4 or latest the module has been moved to <code>django.contrib.auth.context_processors.auth</code></p>
","50841","","50841","","2013-02-28 14:28:43","2013-02-28 14:28:43","","","","5","","",""
"4815619","2","","41547","2011-01-27 11:15:12","","1","","<p>its possible by default, by doing the following steps, ensure you have added the context 'django.contrib.auth.context_processors.auth' in your settings. By default its added in settings.py, so its looks like this </p>

<pre><code>TEMPLATE_CONTEXT_PROCESSORS = (
'django.core.context_processors.request',
'django.contrib.auth.context_processors.auth',
'django.core.context_processors.auth',)
</code></pre>

<p>And you can access user object like this,</p>

<pre><code>{% if user.is_authenticated %}
&lt;p&gt;Welcome, {{ user.username }}. Thanks for logging in.&lt;/p&gt;
{% else %}
    &lt;p&gt;Welcome, new user. Please log in.&lt;/p&gt;
{% endif %}
</code></pre>

<p>For more information, refer here <a href=""http://docs.djangoproject.com/en/1.2/topics/auth/#authentication-data-in-templates"" rel=""nofollow"">http://docs.djangoproject.com/en/1.2/topics/auth/#authentication-data-in-templates</a> </p>
","592065","","","","","2011-01-27 11:15:12","","","","1","","",""
"11878636","2","","41547","2012-08-09 07:28:58","","3","","<p>The hints are in every answer, but once again, from ""scratch"", for newbies:</p>

<p>authentication data is in templates (almost) by default -- with a small trick:</p>

<p>in <code>views.py</code>:</p>

<pre><code>from django.template import RequestContext
...
def index(request):
    return render_to_response('index.html', 
                              {'var': 'value'},
                              context_instance=RequestContext(request))
</code></pre>

<p>in <code>index.html</code>:</p>

<pre><code>...
Hi, {{ user.username }}
var: {{ value }}
... 
</code></pre>

<p>From here: <a href=""https://docs.djangoproject.com/en/1.4/topics/auth/#authentication-data-in-templates"" rel=""nofollow"">https://docs.djangoproject.com/en/1.4/topics/auth/#authentication-data-in-templates</a></p>

<blockquote>
  <p>This template context variable is not available if a <strong>RequestContext</strong> is
  not being used.</p>
</blockquote>
","444966","","","","","2012-08-09 07:28:58","","","","0","","",""
"48467","2","","48458","2008-09-07 14:25:20","","1","","<p>I am not entirely up to date on the latest best practices, et cetera when it comes to code layout, but when I did my first GAE application, I used something along your second option, where the code and templates are next to eachother.</p>

<p>There was two reasons for this - one, it kept the code and template nearby, and secondly, I had the directory structure layout mimic that of the website - making it (for me) a bit easier too remember where everything was.</p>
","5042","Dominic Eidson","","","","2008-09-07 14:25:20","","","","0","","",""
"67533","2","","48458","2008-09-15 22:11:12","","6","","<p>I think the first option is considered the best practice. And make the code folder your first package. The Rietveld project developed by Guido van Rossum is a very good model to learn from. Have a look at it: <a href=""http://code.google.com/p/rietveld"" rel=""nofollow noreferrer"">http://code.google.com/p/rietveld</a></p>

<p>With regard to Django 1.0, I suggest you start using the Django trunk code instead of the GAE built in django port. Again, have a look at how it's done in Rietveld.</p>
","10289","Jiayao Yu","1454176","","2016-07-29 07:33:16","2016-07-29 07:33:16","","","","1","","",""
"70271","2","","48458","2008-09-16 08:10:50","","102","","<p>First, I would suggest you have a look at ""<a href=""http://sites.google.com/site/io/rapid-development-with-python-django-and-google-app-engine"" rel=""noreferrer"">Rapid Development with Python, Django, and Google App Engine</a>""</p>

<p>GvR describes a general/standard project layout on page 10 of his <a href=""http://sites.google.com/site/io/rapid-development-with-python-django-and-google-app-engine/rapid_development_with_django_gae.pdf?attredirects=0"" rel=""noreferrer"">slide presentation</a>.  </p>

<p>Here I'll post a slightly modified version of the layout/structure from that page. I pretty much follow this pattern myself. You also mentioned you had trouble with packages. Just make sure each of your sub folders has an __init__.py file. It's ok if its empty.</p>

<h2>Boilerplate files</h2>

<ul>
<li>These hardly vary between projects</li>
<li>app.yaml: direct all non-static requests to main.py </li>
<li>main.py: initialize app and send it all requests </li>
</ul>

<h2>Project lay-out</h2>

<ul>
<li>static/*: static files; served directly by App Engine</li>
<li>myapp/*.py: app-specific python code

<ul>
<li>views.py, models.py, tests.py, __init__.py, and more</li>
</ul></li>
<li>templates/*.html: templates (or myapp/templates/*.html)</li>
</ul>

<p>Here are some code examples that may help as well:</p>

<h2>main.py</h2>

<pre><code>import wsgiref.handlers

from google.appengine.ext import webapp
from myapp.views import *

application = webapp.WSGIApplication([
  ('/', IndexHandler),
  ('/foo', FooHandler)
], debug=True)

def main():
  wsgiref.handlers.CGIHandler().run(application)
</code></pre>

<h2>myapp/views.py</h2>

<pre><code>import os
import datetime
import logging
import time

from google.appengine.api import urlfetch
from google.appengine.ext.webapp import template
from google.appengine.api import users
from google.appengine.ext import webapp
from models import *

class IndexHandler(webapp.RequestHandler):
  def get(self):
    date = ""foo""
    # Do some processing        
    template_values = {'data': data }
    path = os.path.join(os.path.dirname(__file__) + '/../templates/', 'main.html')
    self.response.out.write(template.render(path, template_values))

class FooHandler(webapp.RequestHandler):
  def get(self):
    #logging.debug(""start of handler"")
</code></pre>

<h2>myapp/models.py</h2>

<pre><code>from google.appengine.ext import db

class SampleModel(db.Model):
</code></pre>

<p>I think this layout works great for new and relatively small to medium projects. For larger projects I would suggest breaking up the views and models to have their own sub-folders with something like:</p>

<h2>Project lay-out</h2>

<ul>
<li>static/: static files; served directly by App Engine

<ul>
<li>js/*.js</li>
<li>images/*.gif|png|jpg</li>
<li>css/*.css</li>
</ul></li>
<li>myapp/: app structure

<ul>
<li>models/*.py</li>
<li>views/*.py</li>
<li>tests/*.py</li>
<li>templates/*.html: templates</li>
</ul></li>
</ul>
","10708","fuentesjr","10708","fuentesjr","2008-09-16 19:48:38","2008-09-16 19:48:38","","","","4","","",""
"153862","2","","48458","2008-09-30 16:30:58","","15","","<p>My usual layout looks something like this:</p>

<ul>
<li>app.yaml</li>
<li>index.yaml</li>
<li>request.py - contains the basic WSGI app</li>
<li>lib

<ul>
<li><code>__init__.py</code> - common functionality, including a request handler base class</li>
</ul></li>
<li>controllers - contains all the handlers. request.yaml imports these.</li>
<li>templates

<ul>
<li>all the django templates, used by the controllers</li>
</ul></li>
<li>model

<ul>
<li>all the datastore model classes</li>
</ul></li>
<li>static

<ul>
<li>static files (css, images, etc). Mapped to /static by app.yaml</li>
</ul></li>
</ul>

<p>I can provide examples of what my app.yaml, request.py, lib/<strong>init</strong>.py, and sample controllers look like, if this isn't clear.</p>
","12030","Arachnid","296069","","2012-01-12 13:30:43","2012-01-12 13:30:43","","","","2","","",""
"3105295","2","","48458","2010-06-23 20:30:50","","3","","<p>I like <a href=""http://webpy.org/"" rel=""nofollow noreferrer"">webpy</a> so I've adopted it as templating framework on Google App Engine.<br>
My package folders are typically organized like this:</p>

<pre><code>app.yaml
application.py
index.yaml
/app
   /config
   /controllers
   /db
   /lib
   /models
   /static
        /docs
        /images
        /javascripts
        /stylesheets
   test/
   utility/
   views/
</code></pre>

<p><a href=""http://github.com/systempuntoout/stackprinter"" rel=""nofollow noreferrer"">Here</a> is an example.</p>
","130929","","130929","","2011-01-23 20:22:39","2011-01-23 20:22:39","","","","0","","",""
"12535000","2","","48458","2012-09-21 17:07:02","","10","","<p>I implemented a google app engine boilerplate today and checked it on github. This is along the lines described by Nick Johnson above (who used to work for Google).</p>

<p>Follow this link <a href=""https://github.com/droot/gae-boilerplate"">gae-boilerplate</a></p>
","278681","","","","","2012-09-21 17:07:02","","","","3","","",""
"48575","2","","48562","2008-09-07 16:48:51","","1","","<p>What exactly are you trying to do?</p>

<p>Of course, there are numerous places to learn about svn pre-commit hooks (e.g. <a href=""http://wordaligned.org/articles/a-subversion-pre-commit-hook"" rel=""nofollow noreferrer""> here </a>, <a href=""http://www.windley.com/archives/2008/08/using_a_precommit_hook_to_check_puppet_syntax.shtml"" rel=""nofollow noreferrer""> here</a>, and in the <a href=""http://svnbook.red-bean.com/nightly/en/svn.reposadmin.create.html"" rel=""nofollow noreferrer"">Red Book</a>) but it depends what you're trying to do and what is available on your system.  </p>

<p>Can you be more specific? </p>
","5063","","","","","2008-09-07 16:48:51","","","","0","","",""
"50507","2","","48562","2008-09-08 19:45:24","","4","","<p>I think you can avoid a commit hook script in this case by using the <code>svn:eol-style</code> property as described in the SVNBook:</p>

<ul>
<li><p><a href=""http://svnbook.red-bean.com/en/1.7/svn.advanced.props.file-portability.html#svn.advanced.props.special.eol-style"" rel=""nofollow noreferrer"">End-of-Line Character Sequences</a></p></li>
<li><p><a href=""http://svnbook.red-bean.com/en/1.7/svn.ref.properties.html"" rel=""nofollow noreferrer"">Subversion Properties</a></p></li>
</ul>

<p>This way SVN can worry about your line endings for you.</p>

<p>Good luck!</p>
","5063","Stephen Johnson","761095","","2012-08-17 16:55:50","2012-08-17 16:55:50","","","","2","","",""
"48806","2","","48777","2008-09-07 21:28:54","","4","","<p><code>core.exceptions</code> is part of django; what version of django do you have installed? The AppEngine comes with the appropriate version for whatever release you've downloaded (in the lib/django directory). It can be installed by going to that directory and running <strong><code>python setup.py install</code></strong></p>
","4919","Sean","","","","2008-09-07 21:28:54","","","","0","","",""
"49222","2","","48884","2008-09-08 06:07:23","","0","","<p>The only other library I'm aware of is <a href=""http://www.josephson.org/projects/pyamazon/"" rel=""nofollow noreferrer"">pyAmazon</a>, which is the predecessor of pyaws.  If you're familiar with the Amazon API (or are willing to become so), you could probably put together something yourself with <a href=""http://pywebsvcs.sourceforge.net/"" rel=""nofollow noreferrer"">ZSI</a>.</p>
","4966","tonyandrewmeyer","","","","2008-09-08 06:07:23","","","","1","","",""
"74335","2","","48884","2008-09-16 16:40:08","","2","","<p>pyaws seems to be the best one out there.  I used it here (<a href=""http://utilitymill.com/edit/get_Book_Data_by_ISBNs"" rel=""nofollow noreferrer"">my source code</a>)  It worked fine for me.</p>
","13009","","","","","2008-09-16 16:40:08","","","","0","","",""
"1084257","2","","48884","2009-07-05 15:20:45","","1","","<p>pyaws is the best in my opinion.  The most available version is 0.2.0, but there is also a version 0.3.0 that is somewhat harder to find.  The best maintained version of it that I have found though, which is based on 0.3.0, is on <a href=""http://bitbucket.org/johnpaulett/pyaws/overview/"" rel=""nofollow noreferrer"">bitbucket</a>.</p>
","37078","","","","","2009-07-05 15:20:45","","","","0","","",""
"1087797","2","","48884","2009-07-06 16:03:22","","2","","<p>How about <a href=""http://code.google.com/p/boto/"" rel=""nofollow noreferrer"">boto</a>? Anyone have any experience with it? I just started looking for a Python package for Amazon and boto looks up to date (v1.8c release 28-Jun-2009), active and complete (has a long list of supported interfaces).</p>
","1928889","","","","","2009-07-06 16:03:22","","","","1","","",""
"1533430","2","","48884","2009-10-07 18:40:03","","3","","<p>PyAWS is no longer hosted on SourceForge. The latest version (0.3.0) is available via the <a href=""http://kunxi.org/archives/2008/05/pyaws-030-released/"" rel=""nofollow noreferrer"">authors website</a>.</p>

<p>Make sure you also grab the patch for Amazons latest API changes, mentioned in the comments.</p>
","161525","","","","","2009-10-07 18:40:03","","","","0","","",""
"2448578","2","","48884","2010-03-15 16:07:00","","22","","<p>There is now another alternative: <a href=""http://pypi.python.org/pypi/python-amazon-product-api/"" rel=""nofollow noreferrer"">python-amazon-product-api</a>. It supports API version <s>2009-11-01</s> 2010-12-01.</p>
","294082","","294082","","2011-01-30 14:55:19","2011-01-30 14:55:19","","","","1","","",""
"4251893","2","","48884","2010-11-23 01:24:52","","20","","<p>I'm using <a href=""https://github.com/aurorasoftware/bottlenose"">Bottlenose</a>, Dan Loewenherz's ""super awesome Python wrapper for the Amazon Product Advertising API"". It doesn't parse the XML, so I'm using <a href=""http://codespeak.net/lxml/objectify.html"">lxml.objectify</a>:</p>

<pre><code>ACCESS_KEY_ID = ""...""
SECRET_KEY = ""...""
ASSOC_TAG = ""...""

import bottlenose
amazon = bottlenose.Amazon(ACCESS_KEY_ID, SECRET_KEY, ASSOC_TAG)
response=amazon.ItemLookup(ItemId=""B0018AFK38"", ResponseGroup=""OfferSummary"")

from lxml import objectify
root = objectify.fromstring(response)
root.Items.Item.OfferSummary.LowestNewPrice.FormattedPrice
</code></pre>
","76452","","996638","","2013-05-29 15:03:46","2013-05-29 15:03:46","","","","3","","",""
"10076757","2","","48884","2012-04-09 16:58:32","","7","","<p>If what you are looking for is a simple, object oriented access to Amazon products (lookup and search), try <strong>python-amazon-simple-product-api</strong>. Its a new project i've just released:</p>

<p><a href=""http://github.com/yoavaviram/python-amazon-simple-product-api"">http://github.com/yoavaviram/python-amazon-simple-product-api</a></p>

<p>Its the new kid on the block!</p>
","25287","","25287","","2012-04-09 17:55:12","2012-04-09 17:55:12","","","","2","","",""
"49148","2","","49137","2008-09-08 04:01:10","","22","","<p>Boost has a python interface library which could help you.</p>

<p><a href=""http://www.boost.org/doc/libs/release/libs/python/doc/index.html"" rel=""noreferrer"">Boost.Python</a></p>
","716","roo","1995714","","2015-11-10 22:04:39","2015-11-10 22:04:39","","","","0","","",""
"49319","2","","49137","2008-09-08 08:36:45","","2","","<p>Embeding the Python interpreter inside your C++ app will let you run Python programs using your application run Python scripts. It will also make it easier possible for those scripts to call C++ functions in your application. If this is what you want then the Boost library mentioned previously may be what you want to make it easier to create the link. In the past I have used <a href=""http://www.swig.org/"" rel=""nofollow noreferrer"">SWIG</a> to generate Python interfaces to C++ code. It was not clear from your question whether you wanted the Python scripts to call your C++ program or whether you just wanted the C++ to call Python.</p>

<p>Many of the Python functions use modules which are not built into the Python interpreter. If your Python scripts call these functions then you will either need to have your users install Python or include the python runtime files with your application. It will depend on what modules you import in you Python scripts.</p>
","5022","David Dibben","3562486","","2015-05-30 11:35:24","2015-05-30 11:35:24","","","","0","","",""
"49439","2","","49137","2008-09-08 10:37:53","","2","","<p>Boost is probably the best choice, however if you're wanting something that's more standalone, and if this is for use with Windows (which seems feasible given that they are the people least likely to have Python installed), then you can use <a href=""http://www.py2exe.org"" rel=""nofollow noreferrer"">py2exe</a> to create a DLL with entry points suitable for COM objects.  You can then interface with the library via COM.  (Obviously this is not at all useful as a cross-platform solution).</p>
","4966","tonyandrewmeyer","","","","2008-09-08 10:37:53","","","","0","","",""
"328451","2","","49137","2008-11-30 04:52:03","","45","","<blockquote>
  <p>I would like to call python script files from my c++ program.</p>
</blockquote>

<p>This means that you want to embed Python in your C++ application. As mentioned in <a href=""http://docs.python.org/extending/embedding.html"" rel=""noreferrer"">Embedding Python in Another Application</a>:</p>

<blockquote>
  <p>Embedding Python is similar to
  extending it, but not quite. The
  difference is that when you extend
  Python, the main program of the
  application is still the Python
  interpreter, while if you embed
  Python, the main program may have
  nothing to do with Python ‚Äî instead,
  some parts of the application
  occasionally call the Python
  interpreter to run some Python code.</p>
</blockquote>

<p>I suggest that you first go through <a href=""http://docs.python.org/extending/embedding.html"" rel=""noreferrer"">Embedding Python in Another Application</a>. Then refer the following examples</p>

<ol>
<li><p><a href=""http://www.codeproject.com/KB/cpp/embedpython_1.aspx"" rel=""noreferrer"">Embedding Python in C/C++: Part I</a></p></li>
<li><p><a href=""http://www.codeproject.com/KB/cpp/embedpython_2.aspx"" rel=""noreferrer"">Embedding Python in C/C++: Part II</a></p></li>
<li><p><a href=""http://www.linuxjournal.com/article/3641"" rel=""noreferrer"">Embedding Python in Multi-Threaded C/C++ Applications</a></p></li>
</ol>

<p>If you like <a href=""http://www.boost.org/doc/libs/release/libs/python/doc/tutorial/doc/html/python/embedding.html"" rel=""noreferrer"">Boost.Python</a>, you may visit the following links:</p>

<ol>
<li><a href=""http://members.gamedev.net/sicrane/articles/EmbeddingPythonPart1.html"" rel=""noreferrer"">Embedding Python with Boost.Python Part 1</a></li>
</ol>
","30289","bhadra","3552770","","2015-12-22 20:17:48","2015-12-22 20:17:48","","","","1","","",""
"49150","2","","49146","2008-09-08 04:01:23","","2","","<p><a href=""http://www.py2exe.org/"" rel=""nofollow noreferrer"">py2exe</a>:</p>

<blockquote>
  <p>py2exe is a Python Distutils extension which converts Python scripts into executable Windows programs, able to run without requiring a Python installation.</p>
</blockquote>
","4960","keeb","1357341","","2013-08-14 18:33:55","2013-08-14 18:33:55","","","","0","","",""
"49155","2","","49146","2008-09-08 04:10:45","","59","","<p><a href=""http://www.py2exe.org/"" rel=""noreferrer"">py2exe</a> is probably what you want, but it only works on Windows.<br>
<a href=""http://www.pyinstaller.org/"" rel=""noreferrer"">PyInstaller</a> works on Windows and Linux.<br>
<a href=""http://pypi.python.org/pypi/py2app/"" rel=""noreferrer"">Py2app</a> works on the Mac.</p>
","2659","Josh Segall","1931274","","2013-02-18 11:34:11","2013-02-18 11:34:11","","","","4","","",""
"49179","2","","49146","2008-09-08 04:50:01","","1","","<p>See a short list of python packaging tools on <a href=""http://www.freehackers.org/Packaging_a_python_program"" rel=""nofollow noreferrer"">FreeHackers.org</a>.</p>
","4172","Pawel","","","","2008-09-08 04:50:01","","","","0","","",""
"2245736","2","","49146","2010-02-11 16:03:50","","9","","<p>I found this presentation to be very helpfull.</p>

<p><a href=""http://pyvideo.org/video/147/pycon-2009--how-i-distribute-python-applications-"" rel=""noreferrer"">How I Distribute Python applications on Windows - py2exe &amp; InnoSetup</a></p>

<p>From the site:</p>

<blockquote>
  <p>There are many deployment options for
  Python code. I'll share what has
  worked well for me on Windows,
  packaging command line tools and
  services using py2exe and InnoSetup.
  I'll demonstrate a simple build script
  which creates windows binaries and an
  InnoSetup installer in one step. In
  addition, I'll go over common errors
  which come up when using py2exe and
  hints on troubleshooting them. This is
  a short talk, so there will be a
  follow-up Open Space session to share
  experience and help each other solve
  distribution problems.</p>
</blockquote>
","193971","","1400768","","2012-08-26 16:31:42","2012-08-26 16:31:42","","","","0","","",""
"3384483","2","","49146","2010-08-02 01:32:08","","3","","<p>Not on the freehackers list is <a href=""https://code.google.com/p/gui2exe/"" rel=""nofollow noreferrer"">gui2exe</a> which can be used to build standalone Windows executables, Linux applications and Mac OS application bundles and plugins starting from Python scripts.</p>
","53195","","","","","2010-08-02 01:32:08","","","","1","","",""
"10241354","2","","49146","2012-04-20 06:33:12","","3","","<p>Also known as Frozen Binaries but not the same as as the output of a true compiler- they run byte code through a virtual machine (PVM). Run the same as a compiled program just larger because the program is being compiled along with the PVM. Py2exe can freeze standalone programs that use the tkinter, PMW, wxPython, and PyGTK GUI libraties; programs that use the pygame game programming toolkit; win32com client programs; and more. 
The Stackless Python system is a standard CPython implementation variant that does not save state on the C language call stack. This makes Python more easy to port to small stack architectures, provides efficient multiprocessing options, and fosters novel programming structures such as coroutines. Other systems of study that are working on future development: Pyrex is working on the Cython system, the Parrot project, the PyPy is working on replacing the PVM altogether, and of course the founder of Python is working with Google to get Python to run 5 times faster than C with the Unladen Swallow project. In short, py2exe is the easiest and Cython is more efficient for now until these projects improve the Python Virtual Machine (PVM) for standalone files.</p>
","1345795","","","","","2012-04-20 06:33:12","","","","0","","",""
"15667090","2","","49146","2013-03-27 18:53:16","","1","","<p>Use cx_Freeze to make exe your python program</p>
","1068061","","","","","2013-03-27 18:53:16","","","","0","","",""
"49169","2","","49164","2008-09-08 04:33:39","","11","","<p><a href=""http://peak.telecommunity.com/DevCenter/setuptools"" rel=""noreferrer"">Setuptools</a> is the software that creates <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs"" rel=""noreferrer"">.egg files</a>. It's an extension of the <a href=""http://docs.python.org/lib/module-distutils.html"" rel=""noreferrer""><code>distutils</code></a> package in the standard library.</p>

<p>The process involves creating a <code>setup.py</code> file, then  <code>python setup.py bdist_egg</code> creates an .egg package.</p>
","3002","dF","3002","dF","2008-09-08 04:38:47","2008-09-08 04:38:47","","","","0","","",""
"49175","2","","49164","2008-09-08 04:47:44","","3","","<p>Also, if you need to get an .egg package off a single .py file app, check this link: <a href=""http://peak.telecommunity.com/DevCenter/EasyInstall#packaging-others-projects-as-eggs"" rel=""nofollow noreferrer"">EasyInstall - Packaging others projects as eggs</a>.</p>
","4172","Pawel","","","","2008-09-08 04:47:44","","","","0","","",""
"49202","2","","49195","2008-09-08 05:34:02","","15","","<p>It's not clear why you need a bridge language. Why don't you start working with C directly? C is a very simple language itself. I think that hardest part for C learner is pointers and everything else related to memory management. Also C lang is oriented on structured programming, so you will need to learn how to implement data structures and algorithms without OOP goodness. Actually, your question is pretty hard, usually people go from low level langs to high level and I can understand frustration of those who goes in other direction.</p>
","1196","aku","1196","aku","2008-09-08 05:40:22","2008-09-08 05:40:22","","","","0","","",""
"49217","2","","49195","2008-09-08 05:48:36","","0","","<p>I'm feeling your pain, I also learned PHP first and I'm trying to learn C++, it's not easy, and I am really struggling, It's been 2 years since I started on c++ and Still the extent of what I can do is cout, cin, and math.</p>

<p>If anyone reads this and wonders where to start, START LOWER.</p>
","115","Unkwntech","","","","2008-09-08 05:48:36","","","","0","","",""
"49227","2","","49195","2008-09-08 06:13:37","","7","","<p>The best place to start learning C is the book ""The C Programming Language"" by Kernighan and Ritchie.</p>

<p>You will recognise a lot of things from PHP, and you will be surprised how much PHP (and Perl, Python etc) do for you.</p>

<p>Oh and you also will need a C compiler, but i guess you knew that.</p>
","4134","Mark Nold","","","","2008-09-08 06:13:37","","","","0","","",""
"49234","2","","49195","2008-09-08 06:25:06","","1","","<p>Learning any language takes time, I always ensure I have a measurable goal; I set myself an objective, then start learning the language to achieve this objective, as opposed to trying to learn every nook and cranny of the language and syntax. </p>

<p>C is not easy, pointers can be hard to comprehend if you‚Äôre not coming assembler roots. I first learned C++, then retro fit C to my repertoire but I started with x86 and 68000 assembler.</p>
","2387","titanae","","","","2008-09-08 06:25:06","","","","0","","",""
"49237","2","","49195","2008-09-08 06:36:42","","0","","<p>Java might actually be a good option here, believe it or not.  It is strongly based on C/C++, so if you can get the syntax and the strong typing, picking up C might be easier.  The benefit is you can learn the lower level syntax without having to learn pointers (since memory is managed for you just like in Python and PHP).  You will, however, learn a similar concept... references (or objects in general).</p>

<p>Also, it is strongly Object Oriented, so it may be difficult to pick up on that if you haven't dealt with OOP yet....  you might be better off just digging in with C like others suggested, but it is an option.</p>
","122","Mike Stone","","","","2008-09-08 06:36:42","","","","0","","",""
"49241","2","","49195","2008-09-08 06:42:09","","1","","<p>Python is about as close to C as you're going to get.  It is in fact a very thin wrapper around C in a lot of places.  However, C does require that you know a little more about how the computer works on a low level.  Thus, you may benefit from trying an assembly language.</p>

<p><a href=""http://highered.mcgraw-hill.com/sites/0072467509/student_view0/lc-3_simulator.html"" rel=""nofollow noreferrer"">LC-3</a> is a simple assembly language with a simulated machine.</p>

<p>Alternatively, you could try playing with an interactive C interpreter like <a href=""http://root.cern.ch/twiki/bin/view/ROOT/CINT"" rel=""nofollow noreferrer"">CINT</a>.</p>

<p>Finally, toughing it out and reading K&amp;R's book is usually the best approach.</p>
","2653","Nick Retallack","","","","2008-09-08 06:42:09","","","","0","","",""
"49245","2","","49195","2008-09-08 06:48:42","","1","","<p>Forget Java - it is not going to bring you anywhere closer to C (you have allready proved that you don't have a problem learning new syntax).</p>

<p>Either read K&amp;R or go one lower: Learn about the machine itself. The only tricky part in C is pointers and memory management (which is closely related to pointers, but also has a bit to do with how functions are called). Learning a (simple, maybe even ""fake"" assembly) language should help you out here.</p>

<p>Then, start reading up on the standard library provided by C. It will be your daily bread and butter.</p>

<p>Oh: another tip! If you really <em>do</em> want to bridge, try <strong>FORTH</strong>. It helped me get into pointers. Also, using the win32 api from Visual Basic 6.0 can teach you some stuff about pointers ;)</p>
","2260","Daren Thomas","","","","2008-09-08 06:48:42","","","","0","","",""
"49246","2","","49195","2008-09-08 06:51:54","","1","","<p>C is a bridge onto itself.</p>

<p>K&amp;R is the only programming language book you can read in one sitting and almost never pick it up again ... </p>
","4615","Purfideas","","","","2008-09-08 06:51:54","","","","0","","",""
"49247","2","","49195","2008-09-08 06:52:06","","1","","<p>My suggestion is to get a good C-book that is relevant to what you want to do. I agree that K &amp; R is considered to be ""The book"" on C, but I found ""UNIX Systems Programming"" by Kay A. Robbins and Steven Robbins to be more practical and hands on. The book is full of clean and short code snippets you can type in, compile and try in just a few minutes each.</p>

<p>There is a preview at <a href=""http://books.google.com/books?id=tdsZHyH9bQEC&amp;printsec=frontcover"" rel=""nofollow noreferrer"">http://books.google.com/books?id=tdsZHyH9bQEC&amp;printsec=frontcover</a> (Hyperlinking it didn't work.)</p>
","4992","C.M","","","","2008-09-08 06:52:06","","","","0","","",""
"49248","2","","49195","2008-09-08 06:52:34","","0","","<p>I think C++ is a good ""bridge"" to C.  I learned C++ first at University, and since it's based on C you'll learn a lot of the same concepts - perhaps most notably pointers - but also Object Oriented Design.  OO can be applied to all kinds of modern languages, so it's worth learning.  </p>

<p>After learning C++, I found it wasn't too hard to pick up the differences between C++ and C as required (for example, when working on devices that didn't support C++).</p>
","5024","Matt","","","","2008-09-08 06:52:34","","","","0","","",""
"49285","2","","49195","2008-09-08 07:49:49","","5","","<p>I generally agree with most of the others - There's not really a good stepping stone language.</p>

<p>It is, however, useful to understand what is difficult about learning C, which might help you understand what's making it difficult for you.</p>

<p>I'd say the things that would prove difficult in C for someone coming from PHP would be :</p>

<ul>
<li><strong>Pointers and memory management</strong><br /> This is pretty much the reason you're learning C I imagine, so there's not really any getting around it. Learning lower level assembly type languages might make this easier, but C is probably a bridge to do that, not the other way around.</li>
<li><strong>Lack of built in data structures</strong><br /> PHP and co all have native String types, and useful things like hash tables built in, which is not the case in C. In C, a String is just an array of characters, which means you'll need to do a lot more work, or look seriously at libraries which add the features you're used to.</li>
<li><strong>Lack of built in libraries</strong><br /> Languages like PHP nowadays almost always come with stacks of libraries for things like database connections, image manipulation and stacks of other things. In C, this is not the case other than a very thin standard library which revolves mostly around file reading, writing and basic string manipulation. There are almost always good choices available to fill these needs, but you need to include them yourself.</li>
<li><strong>Suitability for high level tasks</strong><br /> If you try to implement the same type of application in C as you might in PHP, you'll find it very slow going. Generating a web page, for example, isn't really something plain C is suited for, so if you're trying to do that, you'll find it very slow going.</li>
<li><strong>Preprocessor and compilation</strong><br /> Most languages these days don't have a preprocessor, and if you're coming from PHP, the compilation cycle will seem painful. Both of these are performance trade offs in a way - Scripting languages make the trade off in terms of developer efficiency, where as C prefers performance.</li>
</ul>

<p>I'm sure there are more that aren't springing to mind for me right now. The moral of the story is that trying to understand what you're finding difficult in C may help you proceed. If you're trying to generate web pages with it, try doing something lower level. If you're missing hash tables, try writing your own, or find a library. If you're struggling with pointers, stick with it :)</p>
","797","Matt Sheppard","4332828","","2016-12-11 00:14:11","2016-12-11 00:14:11","","","","0","","",""
"49295","2","","49195","2008-09-08 08:11:16","","0","","<p>try to learn a language which you are comfortable with, try different approach and the basics.</p>
","130278","Sasayins","","","","2008-09-08 08:11:16","","","","0","","",""
"49502","2","","49195","2008-09-08 11:29:14","","0","","<p>Languages are easy to learn (especially one like C)... the hard part is learning the libraries and/or coding style of the language.  For instance, I know C++ fairly well, but most C/C++ code I see confuses me because the naming conventions are so different from what I work with on a daily basis.</p>

<p>Anyway, I guess what I'm trying to say is don't worry too much about the syntax, focus on said language's library.  This isn't specific to C, you can say the same about c#, vb.net, java and just about every other language out there.</p>
","4050","Giovanni Galbo","","","","2008-09-08 11:29:14","","","","0","","",""
"50673","2","","49195","2008-09-08 21:00:10","","0","","<p>Pascal! Close enough syntax, still requires you to do some memory management, but not as rough for beginners.</p>
","4842","Max Caceres","","","","2008-09-08 21:00:10","","","","0","","",""
"49514","2","","49307","2008-09-08 11:34:08","","5","","<p>If I'm not mistaken the zip function you use in python <a href=""http://groups.google.com/group/comp.lang.python/browse_thread/thread/195e57735ff6ee56"" rel=""noreferrer"">creates a pair of the items found in list1 and list2</a>. Basically it still is a for loop with the addition that it will retrieve the data from the two seperate lists for you, instead that you have to do it yourself.</p>

<p>So maybe your best option is to use a <em>standard</em> for loop like this:</p>

<pre><code>for i=1:length(a)
  c(i) = a(i) + b(i);
end
</code></pre>

<p>or whatever you have to do with the data.</p>

<p>If you really are talking about parallel computing then you should take a look at the <a href=""http://www.mathworks.com/products/parallel-computing/"" rel=""noreferrer"">Parallel Computing Toolbox</a> for matlab, and more specifically at <a href=""http://www.mathworks.com/access/helpdesk/help/toolbox/distcomp/index.html?/access/helpdesk/help/toolbox/distcomp/brb2x2l-1.html"" rel=""noreferrer"">parfor</a></p>
","46","Sven","","","","2008-09-08 11:34:08","","","","0","","",""
"51137","2","","49307","2008-09-09 02:32:46","","3","","<p>Tested only in octave... (no matlab license). Variations of arrayfun() exist, check the documentation.</p>

<pre><code>#!/usr/bin/octave -qf

function result = dostuff(my_ten, my_one)
  result = my_ten + my_one
endfunction

tens = [ 10 20 30 ];
ones = [ 1 2 3];

x = arrayfun(@dostuff, tens, ones);

x
</code></pre>

<p>Yields...</p>

<pre><code>x =

   11   22   33
</code></pre>
","3148","Dallas","","","","2008-09-09 02:32:46","","","","0","","",""
"65903","2","","49307","2008-09-15 19:20:15","","13","","<p>If x and y are column vectors, you can do:</p>

<pre><code>for i=[x';y']
# do stuff with i(1) and i(2)
end
</code></pre>

<p>(with row vectors, just use <code>x</code> and <code>y</code>).</p>

<p>Here is an example run:</p>

<pre class=""lang-matlab prettyprint-override""><code>&gt;&gt; x=[1 ; 2; 3;]

x =

     1
     2
     3

&gt;&gt; y=[10 ; 20; 30;]

y =

    10
    20
    30

&gt;&gt; for i=[x';y']
disp(['size of i = ' num2str(size(i)) ', i(1) = ' num2str(i(1)) ', i(2) = ' num2str(i(2))])
end
size of i = 2  1, i(1) = 1, i(2) = 10
size of i = 2  1, i(1) = 2, i(2) = 20
size of i = 2  1, i(1) = 3, i(2) = 30
&gt;&gt; 
</code></pre>
","8272","mattiast","462117","","2014-11-06 17:30:00","2014-11-06 17:30:00","","","","1","","",""
"138886","2","","49307","2008-09-26 11:31:27","","-2","","<p><code>for</code> loops in MATLAB used to be slow, but this is not true anymore.</p>

<p>So vectorizing is not always the miracle solution. Just use the profiler, and <code>tic</code> and <code>toc</code> functions to help you identify possible bottlenecks.</p>
","","Vincent","5211833","","2017-10-03 16:11:18","2017-10-03 16:11:18","","","","6","","",""
"218618","2","","49307","2008-10-20 14:22:59","","1","","<p>I would recommend to join the two arrays for the computation:</p>

<pre><code>% assuming you have column vectors a and b
x = [a b];

for i = 1:length(a)
    % do stuff with one row...
    x(i,:);
end
</code></pre>

<p>This will work great if your functions can work with vectors. Then again, many functions can even work with matrices, so you wouldn't even need the loop.</p>
","1034","Paperflyer","","","","2008-10-20 14:22:59","","","","0","","",""
"49485","2","","49455","2008-09-08 11:12:56","","1","","<p>A plugin for GSview for viewing encrypted PDFs is <a href=""http://www.cs.cmu.edu/~dst/Adobe/Gallery/Keating/"" rel=""nofollow noreferrer"">here</a>.</p>

<p>If this works for you, you may be able to look at the source.</p>
","3148","Dallas","","","","2008-09-08 11:12:56","","","","0","","",""
"107838","2","","49455","2008-09-20 10:27:58","","1","","<p>If I remember correctly, there is a fixed padding string of 32 (?) bytes to apply to any password. All passwords need to be 32 bytes at the start of computing the encryption key, either by truncating or adding some of those padding bytes.</p>

<p>If no user password was set you simply have to pad with all 32 bytes of the string, i.e. use the 32 padding bytes as the starting point for computing the encryption key.</p>

<p>I have to admit it's been a while since I've done this, I do remember that the encryption part of the PDF is an absolute mess as it got changed significantly in nearly every revision, requiring you to cope with a lot of cases to handle all PDF's.</p>

<p>Good luck.</p>
","5822","Pieter","","","","2008-09-20 10:27:58","","","","0","","",""
"110110","2","","49455","2008-09-21 03:04:42","","0","","<p>xpdf is probably a good reference implementation for this sort of problem.  I have successfully used them to open encrypted pdfs before.</p>
","9042","tfinniga","","","","2008-09-21 03:04:42","","","","0","","",""
"51414","2","","51412","2008-09-09 08:49:02","","1","","<p>Some experimentation and I figured this one out:</p>

<p>def methodA(arg, **kwargs):
    methodB(""argvalue"", **kwargs)</p>

<p>Seems obvious now...</p>
","3355","Staale","","","","2008-09-09 08:49:02","","","","0","","",""
"51415","2","","51412","2008-09-09 08:50:34","","33","","<p>Put the asterisks before the kwargs variable. This makes Python pass the variable (which is assumed to be a dictionary) as keyword arguments.</p>

<pre><code>methodB(""argvalue"", **kwargs)
</code></pre>
","680","Cristian","","","","2008-09-09 08:50:34","","","","1","","",""
"63943","2","","51412","2008-09-15 15:28:30","","2","","<p>As an aside: When using functions instead of methods, you could also use functools.partial:</p>

<pre><code>import functools

def foo(arg, **kwargs):
    ...

bar = functools.partial(foo, ""argvalue"")
</code></pre>

<p>The last line will define a function ""bar"" that, when called, will call foo with the first argument set to ""argvalue"" and all other functions just passed on:</p>

<pre><code>bar(5, myarg=""value"")
</code></pre>

<p>will call</p>

<pre><code>foo(""argvalue"", 5, myarg=""value"")
</code></pre>

<p>Unfortunately that will not work with methods.</p>
","7779","Sebastian Rittau","7779","Sebastian Rittau","2008-09-15 17:21:21","2008-09-15 17:21:21","","","","1","","",""
"51505","2","","51502","2008-09-09 10:08:28","","8","","<p>You could try increasing the indent size, but in general I would just say, relax, it will come with time. I don't think trying to make Python look like C is a very good idea.</p>
","1709","Anders Sandvig","","","","2008-09-09 10:08:28","","","","0","","",""
"51531","2","","51502","2008-09-09 10:24:46","","3","","<p>Perhaps the best thing would be to turn on ""show whitespace"" in your editor.  Then you would have a visual indication of how far in each line is tabbed (usually a bunch of dots), and it will be more apparent when that changes.</p>
","5026","sherbang","","","","2008-09-09 10:24:46","","","","1","","",""
"51551","2","","51502","2008-09-09 10:33:05","","15","","<p>I like to put blank lines around blocks to make control flow more obvious. For example:</p>

<pre><code>if foo:
   bar = baz

   while bar not biz:
      bar = i_am_going_to_find_you_biz_i_swear_on_my_life()

did_i_not_warn_you_biz()
my_father_is_avenged()
</code></pre>
","4702","Will Harris","","","","2008-09-09 10:33:05","","","","0","","",""
"51570","2","","51502","2008-09-09 10:43:27","","7","","<p>Rather than focusing on making your existing structures more readable, you should focus on making more logical structures.  Make smaller blocks, try not to nest blocks excessively, make smaller functions, and try to think through your code flow more.</p>

<p>If you come to a point where you can't quickly determine the structure of your code, you should probably consider refactoring and adding some comments.  Code flow should always be immediately apparent -- the more you have to think about it, the less maintainable your code becomes.</p>
","4977","Cody Brocious","","","","2008-09-09 10:43:27","","","","1","","",""
"52090","2","","51502","2008-09-09 14:58:52","","23","","<p>Part of learning a new programming language is learning to read code in that language.  A crutch like this may make it easier to read your own code, but it's going to impede the process of learning how to read anyone else's Python code.  I really think you'd be better off getting rid of the end of block comments and getting used to normal Python.</p>
","2600","Chris Upchurch","","","","2008-09-09 14:58:52","","","","0","","",""
"52111","2","","51502","2008-09-09 15:09:04","","-1","","<p>I would look in to understanding more details about Python syntax. Often times if a piece of code looks odd, there usually is a better way to write it. For example, in the above example:</p>

<pre><code>bar = foo if baz else None
while bar not biz:
    bar = i_am_going_to_find_you_biz_i_swear_on_my_life()

did_i_not_warn_you_biz()
my_father_is_avenged()
</code></pre>

<p>While it is a small change, it might help the readability. Also, in all honesty, I've never used a while loop, so there is a good change you would end up with a nice concise list comprehension or for loop instead. ;)</p>
","5434","elarson","","","","2008-09-09 15:09:04","","","","0","","",""
"3054853","2","","51502","2010-06-16 15:40:49","","0","","<pre><code>from __future__ import braces
</code></pre>

<p>Need I say more? :)</p>

<p>Seriously, <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""nofollow noreferrer"">PEP 8</a>, 'Blank lines', ¬ß4 is the official way to do it.</p>
","368409","","","","","2010-06-16 15:40:49","","","","0","","",""
"51523","2","","51520","2008-09-09 10:21:03","","551","","<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath(""mydir/myfile.txt"")
'C:/example/cwd/mydir/myfile.txt'
</code></pre>

<p>Also works if it is already an absolute path:</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath(""C:/example/cwd/mydir/myfile.txt"")
'C:/example/cwd/mydir/myfile.txt'
</code></pre>
","5026","sherbang","6655092","sherbang","2017-05-24 22:23:56","2017-05-24 22:23:56","","","","2","","",""
"51539","2","","51520","2008-09-09 10:28:26","","40","","<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath('mydir/myfile.txt')
'C:\\example\\cwd\\mydir\\myfile.txt'
&gt;&gt;&gt; 
</code></pre>
","4702","Will Harris","","","","2008-09-09 10:28:26","","","","0","","",""
"58417","2","","51520","2008-09-12 06:53:25","","16","","<p>Better still, install the <a href=""http://pypi.python.org/pypi/path.py/2.2"" rel=""noreferrer""><code>path.py</code></a> module, it wraps all the <code>os.path</code> functions and other related functions into methods on an object that can be used wherever strings are used:</p>

<pre><code>&gt;&gt;&gt; from path import path
&gt;&gt;&gt; path('mydir/myfile.txt').abspath()
'C:\\example\\cwd\\mydir\\myfile.txt'
&gt;&gt;&gt;
</code></pre>
","3715","Tom","","","","2008-09-12 06:53:25","","","","5","","",""
"15325066","2","","51520","2013-03-10 17:11:57","","8","","<p>Today you can also use the <code>unipath</code> package which was based on <code>path.py</code>: <a href=""http://sluggo.scrapping.cc/python/unipath/"" rel=""noreferrer"">http://sluggo.scrapping.cc/python/unipath/</a></p>

<pre><code>&gt;&gt;&gt; from unipath import Path
&gt;&gt;&gt; absolute_path = Path('mydir/myfile.txt').absolute()
Path('C:\\example\\cwd\\mydir\\myfile.txt')
&gt;&gt;&gt; str(absolute_path)
C:\\example\\cwd\\mydir\\myfile.txt
&gt;&gt;&gt;
</code></pre>

<p>I would recommend using this package as it offers <a href=""http://sluggo.scrapping.cc/python/unipath/Unipath-current/README.html"" rel=""noreferrer"">a clean interface to common os.path utilities</a>.</p>
","9903","","9903","","2013-03-10 17:20:08","2013-03-10 17:20:08","","","","0","","",""
"26539947","2","","51520","2014-10-24 01:05:02","","36","","<p>You could use the new Python 3.4 library <code>pathlib</code>. (You can also get it for Python 2.6 or 2.7 using <code>pip install pathlib</code>.) The authors <a href=""http://www.python.org/dev/peps/pep-0428/#abstract"">wrote</a>: ""The aim of this library is to provide a simple hierarchy of classes to handle filesystem paths and the common operations users do over them.""</p>

<p>To get an absolute path in Windows:</p>

<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; p = Path(""pythonw.exe"").resolve()
&gt;&gt;&gt; p
WindowsPath('C:/Python27/pythonw.exe')
&gt;&gt;&gt; str(p)
'C:\\Python27\\pythonw.exe'
</code></pre>

<p>Or on UNIX:</p>

<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; p = Path(""python3.4"").resolve()
&gt;&gt;&gt; p
PosixPath('/opt/python3/bin/python3.4')
&gt;&gt;&gt; str(p)
'/opt/python3/bin/python3.4'
</code></pre>

<p>Docs are here: <a href=""https://docs.python.org/3/library/pathlib.html"">https://docs.python.org/3/library/pathlib.html</a></p>
","2213647","","100297","","2016-06-30 16:30:10","2016-06-30 16:30:10","","","","1","","",""
"38813098","2","","51520","2016-08-07 10:14:40","","1","","<p>I prefer to use glob</p>

<p>here is how to list all file types in your current folder:</p>

<pre><code>import glob
for x in glob.glob():
    print(x)
</code></pre>

<p>here is how to list all (for example) .txt files in your current folder:</p>

<pre><code>import glob
for x in glob.glob('*.txt'):
    print(x)
</code></pre>

<p>here is how to list all file types in a chose directory:</p>

<pre><code>import glob
for x in glob.glob('C:/example/hi/hello/'):
    print(x)
</code></pre>

<p>hope this helped you</p>
","6672374","","","","","2016-08-07 10:14:40","","","","1","","",""
"43691204","2","","51520","2017-04-29 02:24:56","","-1","","<pre><code>filePath = os.path.abspath(directoryName)
filePathWithSlash = filePath + ""\\""
filenameWithPath = os.path.join(filePathWithSlash, filename)
</code></pre>
","5314707","","5314707","","2017-04-30 08:46:34","2017-04-30 08:46:34","","","","2","","",""
"51668","2","","51553","2008-09-09 11:43:10","","1","","<p>I don't think that your results are all that surprising -- if anything it is that Postgres is so fast.</p>

<p>Does the Postgres query run faster a second time once it has had a chance to cache the data?  To be a little fairer your test for Java and Python should cover the cost of acquiring the data in the first place (ideally loading it off disk).</p>

<p>If this performance level is a problem for your application in practice but you need a RDBMS for other reasons then you could look at <a href=""http://www.danga.com/memcached/"" rel=""nofollow noreferrer"">memcached</a>.  You would then have faster cached access to raw data and could do the calculations in code.</p>
","3631","Rob Walker","","","","2008-09-09 11:43:10","","","","0","","",""
"51745","2","","51553","2008-09-09 12:31:26","","13","","<p>I would say your test scheme is not really useful. To fulfill the db query, the db server goes through several steps:</p>

<ol>
<li>parse the SQL</li>
<li>work up a query plan, i. e. decide on which indices to use (if any), optimize etc.</li>
<li>if an index is used, search it for the pointers to the actual data, then go to the appropriate location in the data or</li>
<li>if no index is used, scan <i>the whole table</i> to determine which rows are needed</li>
<li>load the data from disk into a temporary location (hopefully, but not necessarily, memory)</li>
<li>perform the count() and avg() calculations</li>
</ol>

<p>So, creating an array in Python and getting the average basically skips all these steps save the last one. As disk I/O is among the most expensive operations a program has to perform, this is a major flaw in the test (see also the answers to <a href=""https://stackoverflow.com/questions/26021/how-is-data-compression-more-effective-than-indexing-for-search-performance"">this question</a> I asked here before). Even if you read the data from disk in your other test, the process is completely different and it's hard to tell how relevant the results are.</p>

<p>To obtain more information about where Postgres spends its time, I would suggest the following tests:</p>

<ul>
<li>Compare the execution time of your query to a SELECT without the aggregating functions (i. e. cut step 5)</li>
<li>If you find that the aggregation leads to a significant slowdown, try if Python does it faster, obtaining the raw data through the plain SELECT from the comparison.</li>
</ul>

<p>To speed up your query, reduce disk access first. I doubt very much that it's the aggregation that takes the time.</p>

<p>There's several ways to do that:</p>

<ul>
<li>Cache data (in memory!) for subsequent access, either via the db engine's own capabilities or with tools like memcached</li>
<li>Reduce the size of your stored data</li>
<li>Optimize the use of indices. Sometimes this can mean to skip index use altogether (after all, it's disk access, too). For MySQL, I seem to remember that it's recommended to skip indices if you assume that the query fetches more than 10% of all the data in the table.</li>
<li>If your query makes good use of indices, I know that for MySQL databases it helps to put indices and data on separate physical disks. However, I don't know whether that's applicable for Postgres.</li>
<li>There also might be more sophisticated problems such as swapping rows to disk if for some reason the result set can't be completely processed in memory. But I would leave that kind of research until I run into serious performance problems that I can't find another way to fix, as it requires knowledge about a lot of little under-the-hood details in your process.</li>
</ul>

<p><b>Update:</b></p>

<p><i>I just realized that you seem to have no use for indices for the above query and most likely aren't using any, too, so my advice on indices probably wasn't helpful. Sorry. Still, I'd say that the aggregation is not the problem but disk access is. I'll leave the index stuff in, anyway, it might still have some use.</i></p>
","2077","Hanno","-1","Hanno","2017-05-23 12:00:12","2010-07-08 16:00:30","","","","1","","",""
"51817","2","","51553","2008-09-09 13:04:15","","0","","<p>One other thing that an RDBMS generally does for you is to provide concurrency by protecting you from simultaneous access by another process.  This is done by placing locks, and there's some overhead from that.</p>

<p>If you're dealing with entirely static data that never changes, and especially if you're in a basically ""single user"" scenario, then using a relational database doesn't necessarily gain you much benefit.</p>
","533","Curt Hagenlocher","","","","2008-09-09 13:04:15","","","","0","","",""
"51933","2","","51553","2008-09-09 13:50:18","","3","","<p>Those are very detailed answers, but they mostly beg the question, how do I get these benefits without leaving Postgres given that the data easily fits into memory, requires concurrent reads but no writes and is queried with the same query over and over again.</p>

<p>Is it possible to precompile the query and optimization plan? I would have thought the stored procedure would do this, but it doesn't really help.</p>

<p>To avoid disk access it's necessary to cache the whole table in memory, can I force Postgres to do that?  I think it's already doing this though, since the query executes in just 200 ms after repeated runs.</p>

<p>Can I tell Postgres that the table is read only, so it can optimize any locking code?</p>

<p>I think it's possible to estimate the query construction costs with an empty table (timings range from 20-60 ms) </p>

<p>I still can't see why the Java/Python tests are invalid.  Postgres just isn't doing that much more work (though I still haven't addressed the concurrency aspect, just the caching and query construction)</p>

<p>UPDATE: 
I don't think it's fair to compare the SELECTS as suggested by pulling 350,000 through the driver and serialization steps into Python to run the aggregation, nor even to omit the aggregation as the overhead in formatting and displaying is hard to separate from the timing.  If both engines are operating on in memory data, it should be an apples to apples comparison, I'm not sure how to guarantee that's already happening though.</p>

<p>I can't figure out how to add comments, maybe i don't have enough reputation?</p>
","5357","Jacob Rigby","5357","Jacob Rigby","2008-09-09 23:45:42","2008-09-09 23:45:42","","","","2","","",""
"51976","2","","51553","2008-09-09 14:10:06","","0","","<p>You need to increase postgres' caches to the point where the whole working set fits into memory before you can expect to see perfomance comparable to doing it in-memory with a program.</p>
","4918","David Schmitt","","","","2008-09-09 14:10:06","","","","0","","",""
"52006","2","","51553","2008-09-09 14:26:28","","8","","<p>Postgres is doing a lot more than it looks like (maintaining data consistency for a start!)</p>

<p>If the values don't have to be 100% spot on, or if the table is updated rarely, but you are running this calculation often, you might want to look into Materialized Views to speed it up.</p>

<p>(Note, I have not used materialized views in Postgres, they look at little hacky, but might suite your situation).</p>

<p><a href=""http://jonathangardner.net/tech/w/PostgreSQL/Materialized_Views"" rel=""noreferrer"">Materialized Views</a></p>

<p>Also consider the overhead of actually connecting to the server and the round trip required to send the request to the server and back.</p>

<p>I'd consider 200ms for something like this to be pretty good, A quick test on my oracle server, the same table structure with about 500k rows and no indexes, takes about 1 - 1.5 seconds, which is almost all just oracle sucking the data off disk.</p>

<p>The real question is, is 200ms fast enough?</p>

<p>-------------- More --------------------</p>

<p>I was interested in solving this using materialized views, since I've never really played with them. This is in oracle.</p>

<p>First I created a MV which refreshes every minute.</p>

<pre><code>create materialized view mv_so_x 
build immediate 
refresh complete 
START WITH SYSDATE NEXT SYSDATE + 1/24/60
 as select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;
</code></pre>

<p>While its refreshing, there is no rows returned</p>

<pre><code>SQL&gt; select * from mv_so_x;

no rows selected

Elapsed: 00:00:00.00
</code></pre>

<p>Once it refreshes, its MUCH faster than doing the raw query</p>

<pre><code>SQL&gt; select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:05.74
SQL&gt; select * from mv_so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:00.00
SQL&gt; 
</code></pre>

<p>If we insert into the base table, the result is not immediately viewable view the MV.</p>

<pre><code>SQL&gt; insert into so_x values (1,2,3,4,5);

1 row created.

Elapsed: 00:00:00.00
SQL&gt; commit;

Commit complete.

Elapsed: 00:00:00.00
SQL&gt; select * from mv_so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:00.00
SQL&gt; 
</code></pre>

<p>But wait a minute or so, and the MV will update behind the scenes, and the result is returned fast as you could want.</p>

<pre><code>SQL&gt; /

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899460 7495.35823 22.2905352 5.00276078 2.17647059

Elapsed: 00:00:00.00
SQL&gt; 
</code></pre>

<p>This isn't ideal. for a start, its not realtime, inserts/updates will not be immediately visible. Also, you've got a query running to update the MV whether you need it or not (this can be tune to whatever time frame, or on demand). But, this does show how much faster an MV can make it seem to the end user, if you can live with values which aren't quite upto the second accurate.</p>
","3839","Matthew Watson","3839","Matthew Watson","2008-09-10 13:20:10","2008-09-10 13:20:10","","","","2","","",""
"52179","2","","51553","2008-09-09 15:34:19","","0","","<p>Thanks for the Oracle timings, that's the kind of stuff I'm looking for (disappointing though :-)</p>

<p>Materialized views are probably worth considering as I think I can precompute the most interesting forms of this query for most users.</p>

<p>I don't think query round trip time should be very high as i'm running the the queries on the same machine that runs Postgres, so it can't add much latency?</p>

<p>I've also done some checking into the cache sizes, and it seems Postgres relies on the OS to handle caching, they specifically mention BSD as the ideal OS for this, so I thinking Mac OS ought to be pretty smart about bringing the table into memory.  Unless someone has more specific params in mind I think more specific caching is out of my control.</p>

<p>In the end I can probably put up with 200 ms response times, but knowing that 7 ms is a possible target makes me feel unsatisfied, as even 20-50 ms times would enable more users to have more up to date queries and get rid of a lots of caching and precomputed hacks.</p>

<p>I just checked the timings using MySQL 5 and they are slightly worse than Postgres.  So barring some major caching breakthroughs, I guess this is what I can expect going the relational db route.</p>

<p>I wish I could up vote some of your answers, but I don't have enough points yet.</p>
","5357","Jacob Rigby","","","","2008-09-09 15:34:19","","","","0","","",""
"53303","2","","51553","2008-09-10 01:47:32","","2","","<p>I'm a MS-SQL guy myself, and we'd use <a href=""http://msdn.microsoft.com/en-us/library/ms178015.aspx"" rel=""nofollow noreferrer"">DBCC PINTABLE</a> to keep a table cached, and <a href=""http://msdn.microsoft.com/en-us/library/ms184361.aspx"" rel=""nofollow noreferrer"">SET STATISTICS IO</a> to see that it's reading from cache, and not disk. </p>

<p>I can't find anything on Postgres to mimic PINTABLE, but <a href=""http://www.postgresql.org/docs/current/static/pgbuffercache.html"" rel=""nofollow noreferrer"">pg_buffercache</a> seems to give details on what is in the cache - you may want to check that, and see if your table is actually being cached.</p>

<p>A quick back of the envelope calculation makes me suspect that you're paging from disk. Assuming Postgres uses 4-byte integers, you have (6 * 4) bytes per row, so your table is a minimum of (24 * 350,000) bytes ~ 8.4MB. Assuming 40 MB/s sustained throughput on your HDD, you're looking at right around 200ms to read the data (which, <a href=""https://stackoverflow.com/questions/51553/why-are-sql-aggregate-functions-so-much-slower-than-python-and-java-or-poor-man#51668"">as pointed out</a>, should be where almost all of the time is being spent). </p>

<p>Unless I screwed up my math somewhere, I don't see how it's possible that you are able to read 8MB into your Java app and process it in the times you're showing - unless that file is already cached by either the drive or your OS.</p>
","2199","Mark Brackett","-1","","2017-05-23 12:00:12","2008-09-10 01:47:32","","","","0","","",""
"53333","2","","51553","2008-09-10 02:29:45","","5","","<p>I retested with MySQL specifying ENGINE = MEMORY and it doesn't change a thing (still 200 ms).  Sqlite3 using an in-memory db gives similar timings as well (250 ms).</p>

<p>The math <a href=""https://stackoverflow.com/questions/51553/why-are-sql-aggregate-functions-so-much-slower-than-python-and-java-or-poor-man#53303"">here</a> looks correct (at least the size, as that's how big the sqlite db is :-)</p>

<p>I'm just not buying the disk-causes-slowness argument as there is every indication the tables are in memory (the postgres guys all warn against trying too hard to pin tables to memory as they swear the OS will do it better than the programmer)</p>

<p>To clarify the timings, the Java code is not reading from disk, making it a totally unfair comparison if Postgres is reading from the disk and calculating a complicated query, but that's really besides the point, the DB should be smart enough to bring a small table into memory and precompile a stored procedure IMHO.</p>

<p>UPDATE (in response to the first comment below):</p>

<p><em>I'm not sure how I'd test the query without using an aggregation function in a way that would be fair, since if i select all of the rows it'll spend tons of time serializing and formatting everything.  I'm not saying that the slowness is due to the aggregation function, it could still be just overhead from concurrency, integrity, and friends.  I just don't know how to isolate the aggregation as the sole independent variable.</em></p>
","5357","Jacob Rigby","-1","Jacob Rigby","2017-05-23 12:25:13","2008-09-10 09:35:55","","","","1","","",""
"53713","2","","51553","2008-09-10 09:45:20","","1","","<p>Are you using TCP to access the Postgres? In that case Nagle is messing with your timing.</p>
","4997","gabr","","","","2008-09-10 09:45:20","","","","2","","",""
"58296","2","","58294","2008-09-12 04:23:53","","8","","<p>This isn't possible without cooperation from an external server, because there could be any number of NATs between you and the other computer. If it's a custom protocol, you could ask the other system to report what address it's connected to.</p>
","3560","John Millikin","","","","2008-09-12 04:23:53","","","","0","","",""
"58299","2","","58294","2008-09-12 04:24:34","","5","","<p>The only way I can think of that's guaranteed to give it to you is to hit a service like <a href=""http://whatismyip.com/"" rel=""noreferrer"">http://whatismyip.com/</a> to get it.</p>
","4977","Cody Brocious","","","","2008-09-12 04:24:34","","","","2","","",""
"256358","2","","58294","2008-11-02 01:17:04","","1","","<p>import socket</p>

<p>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</p>

<p>s.connect((""msn.com"",80))</p>

<p>s.getsockname()</p>
","","Zsolt Doma","","","","2008-11-02 01:17:04","","","","0","","",""
"2646313","2","","58294","2010-04-15 14:46:48","","0","","<p>Using the address suggested in the source of <a href=""http://whatismyip.com"" rel=""nofollow noreferrer"">http://whatismyip.com</a></p>

<pre><code>import urllib
def get_my_ip_address():
    whatismyip = 'http://www.whatismyip.com/automation/n09230945.asp'
    return urllib.urlopen(whatismyip).readlines()[0]
</code></pre>
","317610","","","","","2010-04-15 14:46:48","","","","1","","",""
"8305740","2","","58294","2011-11-29 04:11:24","","3","","<p><a href=""https://github.com/bobeirasa/mini-scripts/blob/master/externalip.py"" rel=""nofollow"">https://github.com/bobeirasa/mini-scripts/blob/master/externalip.py</a></p>

<pre><code>'''
Finds your external IP address
'''

import urllib
import re

def get_ip():
    group = re.compile(u'(?P&lt;ip&gt;\d+\.\d+\.\d+\.\d+)').search(urllib.URLopener().open('http://jsonip.com/').read()).groupdict()
    return group['ip']

if __name__ == '__main__':
    print get_ip()
</code></pre>
","1070554","","250259","","2011-11-29 04:16:53","2011-11-29 04:16:53","","","","1","","",""
"8848856","2","","58294","2012-01-13 10:10:36","","1","","<pre><code>print (urllib.urlopen('http://automation.whatismyip.com/n09230945.asp').read())
</code></pre>
","1147450","","714965","","2012-01-13 10:21:08","2012-01-13 10:21:08","","","","0","","",""
"58701","2","","58622","2008-09-12 11:11:03","","37","","<p>This is <a href=""http://www.stack.nl/~dimitri/doxygen/docblocks.html#pythonblocks"" rel=""noreferrer"">documented on the doxygen website</a>, but to summarize here:</p>

<p>You can use doxygen to document your Python code. You can either use the Python documentation string syntax:</p>

<pre><code>""""""@package docstring
Documentation for this module.

More details.
""""""

def func():
    """"""Documentation for a function.

    More details.
    """"""
    pass
</code></pre>

<p>In which case the comments will be extracted by doxygen, but you won't be able to use any of the <a href=""http://www.stack.nl/~dimitri/doxygen/commands.html#cmd_intro"" rel=""noreferrer"">special doxygen commands</a>.</p>

<p><strong>Or</strong> you can (similar to C-style languages under doxygen) double up the comment marker (<code>#</code>) on the first line before the member:</p>

<pre><code>## @package pyexample
#  Documentation for this module.
#
#  More details.

## Documentation for a function.
#
#  More details.
def func():
    pass
</code></pre>

<p>In that case, you can use the special doxygen commands. There's no particular Python output mode, but you can apparently improve the results by setting <code>OPTMIZE_OUTPUT_JAVA</code> to <code>YES</code>.</p>

<p>Honestly, I'm a little surprised at the difference - it seems like once doxygen can detect the comments in ## blocks or """""" blocks, most of the work would be done and you'd be able to use the special commands in either case. Maybe they expect people using """""" to adhere to more Pythonic documentation practices and that would interfere with the special doxygen commands?</p>
","1199","Blair Conrad","","","","2008-09-12 11:11:03","","","","3","","",""
"59018","2","","58622","2008-09-12 13:48:59","","12","","<p>An other very good documentation tool is <a href=""http://sphinx.pocoo.org/"" rel=""noreferrer"">sphinx</a>. It will be used for the upcoming python 2.6 <a href=""http://docs.python.org/dev/"" rel=""noreferrer"">documentation</a> and is used by <a href=""http://docs.djangoproject.com/en/dev/"" rel=""noreferrer"">django</a> and a lot of other python projects.</p>

<p>From the sphinx website:</p>

<ul>
<li><strong>Output formats</strong>: HTML (including Windows HTML Help) and LaTeX, for printable PDF versions</li>
<li><strong>Extensive cross-references</strong>: semantic markup and automatic links for functions, classes, glossary terms and similar pieces of information</li>
<li><strong>Hierarchical structure</strong>: easy definition of a document tree, with automatic links to siblings, parents and children</li>
<li><strong>Automatic indices</strong>: general index as well as a module index</li>
<li><strong>Code handling</strong>: automatic highlighting using the Pygments highlighter</li>
<li><strong>Extensions</strong>: automatic testing of code snippets, inclusion of docstrings from Python modules, and more</li>
</ul>
","720","Peter Hoffmann","","","","2008-09-12 13:48:59","","","","2","","",""
"59955","2","","58622","2008-09-12 21:04:48","","20","","<p>Sphinx is mainly a tool for formatting docs written independently from the source code, as I understand it.</p>

<p>For generating API docs from Python docstrings, the leading tools are <a href=""https://github.com/BurntSushi/pdoc"" rel=""nofollow noreferrer"">pdoc</a> and <a href=""https://launchpad.net/pydoctor"" rel=""nofollow noreferrer"">pydoctor</a>. Here's pydoctor's generated API docs for <a href=""http://twistedmatrix.com/documents/current/api"" rel=""nofollow noreferrer"">Twisted</a> and <a href=""http://starship.python.net/crew/mwh/bzrlibapi/"" rel=""nofollow noreferrer"">Bazaar</a>.</p>

<p>Of course, if you just want to have a look at the docstrings while you're working on stuff, there's the ""<a href=""https://docs.python.org/2/library/pydoc.html"" rel=""nofollow noreferrer"">pydoc</a>"" command line tool and as well as the <code>help()</code> function available in the interactive interpreter.</p>
","6043","","9802","","2015-04-04 17:34:57","2015-04-04 17:34:57","","","","2","","",""
"497322","2","","58622","2009-01-30 21:30:02","","53","","<p>The <a href=""https://pypi.python.org/pypi/doxypy/"" rel=""noreferrer"">doxypy</a> input filter allows you to use pretty much all of Doxygen's formatting tags in a standard Python docstring format.  I use it to document a large mixed C++ and Python game application framework, and it's working well.</p>
","","Kevin Mack","192044","","2015-06-28 00:28:20","2015-06-28 00:28:20","","","","3","","",""
"35377654","2","","58622","2016-02-13 08:16:17","","8","","<p>In the end, you only have two options:</p>

<p>You generate your content using Doxygen, or you generate your content using Sphinx*.</p>

<ol>
<li><p><strong>Doxygen</strong>: It is not the tool of choice for most Python projects. But if you have to deal with other related projects written in C or C++ it could make sense. For this you can improve the integration between Doxygen and Python using <a href=""https://github.com/Feneric/doxypypy"" rel=""noreferrer"">doxypypy</a>.</p></li>
<li><p><strong>Sphinx</strong>: The defacto tool for documenting a Python project. You have three options here: manual, semi-automatic (stub generation) and fully automatic (Doxygen like). </p>

<ol>
<li>For manual API documentation you have Sphinx <a href=""http://www.sphinx-doc.org/en/stable/ext/autodoc.html"" rel=""noreferrer"">autodoc</a>. This is great to write a user guide with embedded API generated elements.</li>
<li>For semi-automatic you have Sphinx <a href=""http://www.sphinx-doc.org/en/stable/ext/autosummary.html"" rel=""noreferrer"">autosummary</a>. You can either setup your build system to call sphinx-autogen or setup your Sphinx with the <code>autosummary_generate</code> config. You will require to setup a page with the autosummaries, and then manually edit the pages. You have options, but my experience with this approach is that it requires way too much configuration, and at the end even after creating new templates, I found bugs and the impossibility to determine exactly what was exposed as public API and what not. My opinion is this tool is good for stub generation that will require manual editing, and nothing more. Is like a shortcut to end up in manual.</li>
<li>Fully automatic. This have been criticized many times and for long we didn't have a good fully automatic Python API generator integrated with Sphinx until <a href=""http://autoapi.readthedocs.org/"" rel=""noreferrer"">AutoAPI</a> came, which is a new kid in the block. This is by far the best for automatic API generation in Python (note: shameless self-promotion).</li>
</ol></li>
</ol>

<p>There are other options to note:</p>

<ul>
<li><a href=""https://breathe.readthedocs.org/"" rel=""noreferrer"">Breathe</a>: this started as a very good idea, and makes sense when you work with several related project in other languages that use Doxygen. The idea is to use Doxygen XML output and feed it to Sphinx to generate your API. So, you can keep all the goodness of Doxygen and unify the documentation system in Sphinx. Awesome in theory. Now, in practice, the last time I checked the project wasn't ready for production.</li>
<li><a href=""https://github.com/twisted/pydoctor"" rel=""noreferrer"">pydoctor</a>*: Very particular. Generates its own output. It has some basic integration with Sphinx, and some nice features.</li>
</ul>
","439494","","439494","","2016-02-13 08:43:04","2016-02-13 08:43:04","","","","2","","",""
"6125","2","","5966","2008-08-08 16:45:50","","3","","<p>Why not use SQLite? There is good support in Python and you can write SQL queries to get the data out. Here is the Python docs for <a href=""http://docs.python.org/lib/module-sqlite3.html"" rel=""nofollow noreferrer"">sqlite3</a></p>

<hr>

<p>If you don't want to use SQLite you could do an array of dicts.</p>

<pre><code>episodes = []
episodes.append({'season':1, 'episode': 2, 'name':'Something'})
episodes.append({'season':1, 'episode': 2, 'name':'Something', 'actors':['Billy Bob', 'Sean Penn']})
</code></pre>

<p>That way you add metadata to any record and search it very easily</p>

<pre><code>season_1 = [e for e in episodes if e['season'] == 1]
billy_bob = [e for e in episodes if 'actors' in e and 'Billy Bob' in e['actors']]

for episode in billy_bob:
    print ""Billy bob was in Season %s Episode %s"" % (episode['season'], episode['episode'])
</code></pre>
","309844","","309844","Jon Works","2008-08-08 16:53:10","2008-08-08 16:53:10","","","","0","","",""
"6805","2","","5966","2008-08-09 15:13:14","","0","","<p>I have done something similar in the past and used an in-memory XML document as a quick and dirty hierachical database for storage. You can store each show/season/episode as an element (nested appropriately) and attributes of these things as xml attributes on the elements. Then you can use XQuery to get info back out.</p>

<p><strong>NOTE:</strong> I'm not a Python guy so I don't know what your xml support is like.</p>

<p><strong>NOTE 2:</strong> You'll want to profile this because it'll be bigger and slower than the solution you've already got. Likely enough if you are doing some high-volume processing then XML is probably not going to be your friend.</p>
","358","","","","","2008-08-09 15:13:14","","","","0","","",""
"8165","2","","5966","2008-08-11 20:07:59","","0","","<p>I don't get this part here:</p>

<blockquote>
  <p>This worked okay, but there was no easy way of checking if x[3][24] was supposed to exist or not (so I couldn't raise the season_not_found exception)</p>
</blockquote>

<p>There is a way to do it - called <strong>in</strong>:</p>

<pre><code>&gt;&gt;&gt;x={}
&gt;&gt;&gt;x[1]={}
&gt;&gt;&gt;x[1][2]={}
&gt;&gt;&gt;x
{1: {2: {}}}
&gt;&gt;&gt; 2 in x[1]
True
&gt;&gt;&gt; 3 in x[1]
False
</code></pre>

<p>what seems to be the problem with that?</p>
","985","","","","","2008-08-11 20:07:59","","","","0","","",""
"9080","2","","5966","2008-08-12 17:55:22","","0","","<p>Bartosz/To clarify ""This worked okay, but there was no easy way of checking if x[3][24] was supposed to exist or not""</p>

<p><code>x['some show'][3][24]</code> would return season 3, episode 24 of ""some show"". If there was no season 3, I want the pseudo-dict to raise tvdb_seasonnotfound, if ""some show"" doesn't exist, then raise tvdb_shownotfound</p>

<p>The current system of a series of classes, each with a <code>__getitem__</code> - Show checks <code>if self.seasons.has_key(requested_season_number)</code>, the Season class checks <code>if self.episodes.has_key(requested_episode_number)</code> and so on.</p>

<p>It works, but it there seems to be a lot of repeated code (each class is basically the same, but raises a different error)</p>
","745","dbr","745","dbr","2008-08-13 13:43:48","2008-08-13 13:43:48","","","","0","","",""
"10778","2","","5966","2008-08-14 07:08:19","","5","","<p>OK, what you need is <code>classobj</code> from new module. That would allow you to construct exception classes dynamically (<code>classobj</code> takes a string as an argument for the class name). </p>

<pre><code>import new
myexc=new.classobj(""ExcName"",(Exception,),{})
i=myexc(""This is the exc msg!"")
raise i
</code></pre>

<p>this gives you:</p>

<pre><code>Traceback (most recent call last):
File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
__main__.ExcName: This is the exc msg!
</code></pre>

<p>remember that you can always get the class name through:</p>

<pre><code>self.__class__.__name__
</code></pre>

<p>So, after some string mangling and concatenation, you should be able to obtain appropriate exception class name and construct a class object using that name and then raise that exception.</p>

<p>P.S. - you can also raise strings, but this is deprecated.</p>

<pre><code>raise(self.__class__.__name__+""Exception"")
</code></pre>
","985","Bartosz Radaczy≈Ñski","321731","Bartosz Radaczy≈Ñski","2012-10-29 20:55:28","2012-10-29 20:55:28","","","","0","","",""
"5927","2","","5909","2008-08-08 13:41:43","","7","","<p>The size of the file is sent as the Content-Length header. Here is how to get it with urllib:</p>

<pre><code>&gt;&gt;&gt; site = urllib.urlopen(""http://python.org"")
&gt;&gt;&gt; meta = site.info()
&gt;&gt;&gt; print meta.getheaders(""Content-Length"")
['16535']
&gt;&gt;&gt;
</code></pre>
","309844","","309844","Jon Works","2008-08-08 13:44:47","2008-08-08 13:44:47","","","","0","","",""
"5935","2","","5909","2008-08-08 13:47:26","","18","","<p>Using the returned-urllib-object method <code>info()</code>, you can get various information on the retrived document. Example of grabbing the current Google logo:</p>

<pre><code>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; d = urllib.urlopen(""http://www.google.co.uk/logos/olympics08_opening.gif"")
&gt;&gt;&gt; print d.info()

Content-Type: image/gif
Last-Modified: Thu, 07 Aug 2008 16:20:19 GMT  
Expires: Sun, 17 Jan 2038 19:14:07 GMT 
Cache-Control: public 
Date: Fri, 08 Aug 2008 13:40:41 GMT 
Server: gws 
Content-Length: 20172 
Connection: Close
</code></pre>

<p>It's a dict, so to get the size of the file, you do <code>urllibobject.info()['Content-Length']</code></p>

<pre><code>print f.info()['Content-Length']
</code></pre>

<p>And to get the size of the local file (for comparison), you can use the os.stat() command:</p>

<pre><code>os.stat(""/the/local/file.zip"").st_size
</code></pre>
","745","dbr","","","","2008-08-08 13:47:26","","","","2","","",""
"5938","2","","5909","2008-08-08 13:51:23","","5","","<p>Also if the server you are connecting to supports it, look at <a href=""http://en.wikipedia.org/wiki/HTTP_ETag"" rel=""noreferrer"">Etags</a> and the <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_headers#Requests"" rel=""noreferrer"">If-Modified-Since</a> and <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_headers#Requests"" rel=""noreferrer"">If-None-Match</a> headers.</p>

<p>Using these will take advantage of the webserver's caching rules and will return a <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection"" rel=""noreferrer"">304 Not Modified</a> status code if the content hasn't changed.</p>
","309844","","","","","2008-08-08 13:51:23","","","","0","","",""
"5985","2","","5909","2008-08-08 14:21:51","","20","","<p>I have reproduced what you are seeing:</p>

<pre><code>import urllib, os
link = ""http://python.org""
print ""opening url:"", link
site = urllib.urlopen(link)
meta = site.info()
print ""Content-Length:"", meta.getheaders(""Content-Length"")[0]

f = open(""out.txt"", ""r"")
print ""File on disk:"",len(f.read())
f.close()


f = open(""out.txt"", ""w"")
f.write(site.read())
site.close()
f.close()

f = open(""out.txt"", ""r"")
print ""File on disk after download:"",len(f.read())
f.close()

print ""os.stat().st_size returns:"", os.stat(""out.txt"").st_size
</code></pre>

<p>Outputs this:</p>

<pre><code>opening url: http://python.org
Content-Length: 16535
File on disk: 16535
File on disk after download: 16535
os.stat().st_size returns: 16861
</code></pre>

<p>What am I doing wrong here? Is os.stat().st_size not returning the correct size?</p>

<hr>

<p>Edit:
OK, I figured out what the problem was:</p>

<pre><code>import urllib, os
link = ""http://python.org""
print ""opening url:"", link
site = urllib.urlopen(link)
meta = site.info()
print ""Content-Length:"", meta.getheaders(""Content-Length"")[0]

f = open(""out.txt"", ""rb"")
print ""File on disk:"",len(f.read())
f.close()


f = open(""out.txt"", ""wb"")
f.write(site.read())
site.close()
f.close()

f = open(""out.txt"", ""rb"")
print ""File on disk after download:"",len(f.read())
f.close()

print ""os.stat().st_size returns:"", os.stat(""out.txt"").st_size
</code></pre>

<p>this outputs:</p>

<pre><code>$ python test.py
opening url: http://python.org
Content-Length: 16535
File on disk: 16535
File on disk after download: 16535
os.stat().st_size returns: 16535
</code></pre>

<p>Make sure you are opening both files for binary read/write.</p>

<pre><code>// open for binary write
open(filename, ""wb"")
// open for binary read
open(filename, ""rb"")
</code></pre>
","309844","","309844","Jon Works","2008-08-08 14:26:40","2008-08-08 14:26:40","","","","2","","",""
"25502448","2","","5909","2014-08-26 09:31:46","","2","","<p>In Python3:</p>

<pre><code>&gt;&gt;&gt; import urllib.request
&gt;&gt;&gt; site = urllib.request.urlopen(""http://python.org"")
&gt;&gt;&gt; print(""FileSize: "", site.length)
</code></pre>
","3963432","","","","","2014-08-26 09:31:46","","","","1","","",""
"40957594","2","","5909","2016-12-04 10:21:43","","1","","<p>A <a href=""http://python-requests.org"" rel=""nofollow noreferrer"">requests</a>-based solution using HEAD instead of GET (also prints HTTP headers):</p>

<pre class=""lang-python prettyprint-override""><code>#!/usr/bin/python
# display size of a remote file without downloading

from __future__ import print_function
import sys
import requests

# number of bytes in a megabyte
MBFACTOR = float(1 &lt;&lt; 20)

response = requests.head(sys.argv[1], allow_redirects=True)

print(""\n"".join([('{:&lt;40}: {}'.format(k, v)) for k, v in response.headers.items()]))
size = response.headers.get('content-length', 0)
print('{:&lt;40}: {:.2f} MB'.format('FILE SIZE', int(size) / MBFACTOR))
</code></pre>

<h3>Usage</h3>

<blockquote>
<pre><code>$ python filesize-remote-url.py https://httpbin.org/image/jpeg
...
Content-Length                          : 35588
FILE SIZE (MB)                          : 0.03 MB
</code></pre>
</blockquote>
","191246","","191246","","2017-06-02 13:24:18","2017-06-02 13:24:18","","","","0","","",""
"46440161","2","","5909","2017-09-27 05:33:37","","0","","<p>For a python3 (tested on 3.5) approach I'd recommend:</p>

<pre><code>    with urlopen(file_url) as in_file, open(local_file_address, 'wb') as out_file:
        print(in_file.getheader('Content-Length'))
        out_file.write(response.read())
</code></pre>
","5120089","","","","","2017-09-27 05:33:37","","","","0","","",""
"5129","2","","5102","2008-08-07 18:40:53","","12","","<p>There are two main ways of running Python on Apache. The simplest would be to use CGI and write normal Python scripts while the second is using a web framework like Django or Pylons.</p>

<p>Using CGI is straightforward. Make sure your Apache config file has a cgi-bin set up. If not, follow their documentation (<a href=""http://httpd.apache.org/docs/2.0/howto/cgi.html"" rel=""nofollow noreferrer"">http://httpd.apache.org/docs/2.0/howto/cgi.html</a>). At that point all you need to do is place your Python scripts in the cgi-bin directory and the standard output will become the HTTP response. Refer to Python's documentation for further info (<a href=""https://docs.python.org/library/cgi.html"" rel=""nofollow noreferrer"">https://docs.python.org/library/cgi.html</a>).</p>

<p>If you want to use a web framework you'll need to setup mod_python or FastCGI. These steps are dependent on which framework you want to use. Django provides clear instructions on how to setup mod_python and Django with Apache (<a href=""http://www.djangoproject.com/documentation/modpython/"" rel=""nofollow noreferrer"">http://www.djangoproject.com/documentation/modpython/</a>)</p>
","680","","2213647","","2014-11-13 09:00:56","2014-11-13 09:00:56","","","","1","","",""
"5165","2","","5102","2008-08-07 19:02:57","","8","","<p>Yes, mod_python is pretty confusing to set up.  Here's how I did it.</p>

<p>In httpd.conf:</p>

<pre><code>LoadModule python_module modules/mod_python.so

&lt;Directory ""/serverbase/htdocs/myapp""&gt;
  AddHandler mod_python .py
  PythonHandler myapp
  PythonDebug On
</code></pre>

<p>and in your application directory:</p>

<pre><code>$ /serverbase/htdocs/myapp$ ls -l
total 16
-r-xr-xr-x 1 root sys        6484 May 21 15:54 myapp.py
</code></pre>

<p>Repeat the configuration for each python program you wish to have running under mod_python.</p>
","116","","116","Mark Harrison","2008-08-07 21:19:14","2008-08-07 21:19:14","","","","0","","",""
"5168","2","","5102","2008-08-07 19:05:58","","5","","<p>Are you running Python on UNIX or Windows?</p>

<p>An alternative to mod_python and FastCGI is mod_wsgi. You can find out more at <a href=""http://code.google.com/p/modwsgi/"" rel=""nofollow noreferrer"">modwsgi</a></p>

<p>I have built and installed this on Solaris without problems. I had previously tried mod_python but ran into problems with shared libraries as part of the build. There are <a href=""http://code.google.com/p/modwsgi/wiki/InstallationInstructions"" rel=""nofollow noreferrer"">good install docs</a> available.</p>
","636","","","user1873471","2013-01-28 05:23:02","2013-01-28 05:23:02","","","","0","","",""
"14791003","2","","5102","2013-02-09 20:05:07","","0","","<p>The problem for me wasn't in Apache set up, but in understanding how mod_apache actually uses the .py files. Module-level statements (including those in a <code>if __name__=='__main__'</code> section) are <em>not</em> executed--I assumed that the stdout from running the script at the commandline would be what the server would output, but that's not how it works.</p>

<p>Instead, I wrote a module-level function called <code>index()</code>, and had it return as a string the HTML of the page. It's also possible to have other module-level functions (e.g., <code>otherFunction()</code>) that can be accessed as further segments in the URI (e.g., <code>testScript/otherFunction</code> for the file <code>testScript.py</code>.)</p>

<p>Obviously, this makes more sense than my original stdout conception. Better capability of actually using Python as a scripting language and not a humongous markup language.</p>
","1224886","","","","","2013-02-09 20:05:07","","","","0","","",""
"58917","2","","58711","2008-09-12 13:13:57","","7","","<p>You could actually pull this off, but it would require using metaclasses, which are <em>deep</em> magic (there be dragons). If you want an intro to metaclasses, there's a series of <a href=""http://www.ibm.com/developerworks/linux/library/l-pymeta.html"" rel=""nofollow noreferrer"">articles from IBM</a> which manage to introduce the ideas without melting your brain.</p>

<p>The source code from an ORM like SQLObject might help, too, since it uses this same kind of declarative syntax.</p>
","5616","Justin Voss","","","","2008-09-12 13:13:57","","","","1","","",""
"58990","2","","58711","2008-09-12 13:40:35","","2","","<p>Maybe not as slick as the Ruby version, but how about something like this:</p>

<pre><code>from Boots import App, Para, Button, alert

def Shoeless(App):
    t = Para(text = 'Not Clicked')
    b = Button(label = 'The label')

    def on_b_clicked(self):
        alert('You clicked the button!')
        self.t.text = 'Clicked!'
</code></pre>

<p><a href=""https://stackoverflow.com/questions/58711/how-would-you-design-a-very-pythonic-ui-framework#58917"">Like Justin said</a>, to implement this you would need to use a custom metaclass on class <code>App</code>, and a bunch of properties on <code>Para</code> and <code>Button</code>. This actually wouldn't be too hard.</p>

<p>The problem you run into next is: how do you keep track of the <em>order</em> that things appear in the class definition? In Python 2.x, there is no way to know if <code>t</code> should be above <code>b</code> or the other way around, since you receive the contents of the class definition as a python <code>dict</code>.</p>

<p>However, in Python 3.0 <a href=""http://www.python.org/dev/peps/pep-3115/"" rel=""nofollow noreferrer"">metaclasses are being changed</a> in a couple of (minor) ways. One of them is the <code>__prepare__</code> method, which allows you to supply your own custom dictionary-like object to be used instead -- this means you'll be able to track the order in which items are defined, and position them accordingly in the window.</p>
","3002","dF","-1","dF","2017-05-23 12:08:35","2008-09-12 18:08:05","","","","2","","",""
"60563","2","","58711","2008-09-13 14:20:42","","2","","<p>This could be an oversimplification, i don't think it would be a good idea to try to make a general purpose ui library this way. On the other hand you could use this approach (metaclasses and friends) to simplify the definition of certain classes of user interfaces for an existing ui library and depending of the application that could actually save you a significant amount of time and code lines.</p>
","6267","","6267","Toni Ru≈æa","2008-12-03 08:56:06","2008-12-03 08:56:06","","","","1","","",""
"62780","2","","58711","2008-09-15 13:18:54","","3","","<p>With some Metaclass magic to keep the ordering I have the following working. I'm not sure how pythonic it is but it is good fun for creating simple things. </p>

<pre><code>class w(Wndw):
  title='Hello World'
  class txt(Txt):  # either a new class
    text='Insert name here'
  lbl=Lbl(text='Hello') # or an instance
  class greet(Bbt):
    text='Greet'
    def click(self): #on_click method
      self.frame.lbl.text='Hello %s.'%self.frame.txt.text

app=w()
</code></pre>
","7182","A Nony Mouse","","","","2008-09-15 13:18:54","","","","0","","",""
"334828","2","","58711","2008-12-02 17:48:06","","1","","<p>I have this same problem. I wan to to create a wrapper around any GUI toolkit for Python that is easy to use, and inspired by Shoes, but needs to be a OOP approach (against ruby blocks).</p>

<p>More information in: <a href=""http://wiki.alcidesfonseca.com/blog/python-universal-gui-revisited"" rel=""nofollow noreferrer"">http://wiki.alcidesfonseca.com/blog/python-universal-gui-revisited</a></p>

<p>Anyone's welcome to join the project.</p>
","28516","Alcides","","","","2008-12-02 17:48:06","","","","0","","",""
"334938","2","","58711","2008-12-02 18:23:10","","3","","<p>The only attempt to do this that I know of is <a href=""http://zephyrfalcon.org/labs/dope_on_wax.html"" rel=""nofollow noreferrer"">Hans Nowak's Wax</a> (which is unfortunately dead).</p>
","42559","","","","","2008-12-02 18:23:10","","","","0","","",""
"335077","2","","58711","2008-12-02 19:09:45","","3","","<p>The closest you can get to rubyish blocks is the with statement from pep343: </p>

<p><a href=""http://www.python.org/dev/peps/pep-0343/"" rel=""nofollow noreferrer"">http://www.python.org/dev/peps/pep-0343/</a></p>
","","gabe","","","","2008-12-02 19:09:45","","","","0","","",""
"335132","2","","58711","2008-12-02 19:30:23","","4","","<p>I was never satisfied with David Mertz's articles at IBM on metaclsses so I recently wrote my own <a href=""http://askawizard.blogspot.com/2008/09/metaclasses-python-saga-part-4_30.html"" rel=""nofollow noreferrer"">metaclass article</a>.  Enjoy.</p>
","42586","","","","","2008-12-02 19:30:23","","","","0","","",""
"335358","2","","58711","2008-12-02 20:37:49","","1","","<p>If you really want to code UI, you could try to get something similar to django's ORM; sth like this to get a simple help browser:</p>

<pre><code>class MyWindow(Window):
    class VBox:
        entry = Entry()
        bigtext = TextView()

        def on_entry_accepted(text):
            bigtext.value = eval(text).__doc__
</code></pre>

<p>The idea would be to interpret some containers (like windows) as simple classes, some containers (like tables, v/hboxes) recognized by object names, and simple widgets as objects.</p>

<p>I dont think one would have to name all containers inside a window, so some shortcuts (like old-style classes being recognized as widgets by names) would be desirable.</p>

<p>About the order of elements: in MyWindow above you don't have to track this (window is conceptually a one-slot container). In other containers you can try to keep track of the order assuming that each widget constructor have access to some global widget list. This is how it is done in django (AFAIK).</p>

<p>Few hacks here, few tweaks there... There are still few things to think of, but I believe it is possible... and usable, as long as you don't build complicated UIs.</p>

<p>However I am pretty happy with PyGTK+Glade. UI is just kind of data for me and it should be treated as data. There's just too much parameters to tweak (like spacing in different places) and it is better to manage that using a GUI tool. Therefore I build my UI in glade, save as xml and parse using gtk.glade.XML().</p>
","42610","liori","","","","2008-12-02 20:37:49","","","","0","","",""
"335400","2","","58711","2008-12-02 20:48:23","","1","","<p>Declarative is not necessarily more (or less) pythonic than functional IMHO. I think a layered approach would be the best (from buttom up):</p>

<ol>
<li>A native layer that accepts and returns python data types.</li>
<li>A functional dynamic layer.</li>
<li>One or more declarative/object-oriented layers.</li>
</ol>

<p>Similar to <a href=""http://elixir.ematia.de/trac/wiki"" rel=""nofollow noreferrer"">Elixir</a> + <a href=""http://www.sqlalchemy.org/"" rel=""nofollow noreferrer"">SQLAlchemy</a>.</p>
","42188","muhuk","","","","2008-12-02 20:48:23","","","","3","","",""
"335443","2","","58711","2008-12-02 21:03:49","","1","","<p>Personally, I would try to implement <a href=""http://docs.jquery.com/Main_Page"" rel=""nofollow noreferrer"">JQuery</a> like API in a GUI framework.</p>

<pre><code>class MyWindow(Window):
    contents = (
        para('Hello World!'),
        button('Click Me', id='ok'),
        para('Epilog'),
    )

    def __init__(self):
        self['#ok'].click(self.message)
        self['para'].hover(self.blend_in, self.blend_out)

    def message(self):
        print 'You clicked!'

    def blend_in(self, object):
        object.background = '#333333'

    def blend_out(self, object):
        object.background = 'WindowBackground'
</code></pre>
","39446","","","","","2008-12-02 21:03:49","","","","0","","",""
"335887","2","","58711","2008-12-03 00:15:11","","4","","<p>This is extremely contrived and not pythonic at all, but here's my attempt at a semi-literal translation using the new ""with"" statement.</p>

<pre><code>with Shoes():
  t = Para(""Not clicked!"")
  with Button(""The Label""):
    Alert(""You clicked the button!"")
    t.replace(""Clicked!"")
</code></pre>

<p>The hardest part is dealing with the fact that python will not give us anonymous functions with more than one statement in them.  To get around that, we could create a list of commands and run through those...</p>

<p>Anyway, here's the backend code I ran this with:</p>

<pre><code>context = None

class Nestable(object):
  def __init__(self,caption=None):
    self.caption = caption
    self.things = []

    global context
    if context:
      context.add(self)

  def __enter__(self):
    global context
    self.parent = context
    context = self

  def __exit__(self, type, value, traceback):
    global context
    context = self.parent

  def add(self,thing):
    self.things.append(thing)
    print ""Adding a %s to %s"" % (thing,self)

  def __str__(self):
    return ""%s(%s)"" % (self.__class__.__name__, self.caption)


class Shoes(Nestable):
  pass

class Button(Nestable):
  pass

class Alert(Nestable):
  pass

class Para(Nestable):
  def replace(self,caption):
    Command(self,""replace"",caption)

class Command(Nestable):
  def __init__(self, target, command, caption):
    self.command = command
    self.target  = target
    Nestable.__init__(self,caption)

  def __str__(self):
    return ""Command(%s text of %s with \""%s\"")"" % (self.command, self.target, self.caption)

  def execute(self):
    self.target.caption = self.caption
</code></pre>
","2653","Nick Retallack","2653","Nick Retallack","2008-12-03 00:58:14","2008-12-03 00:58:14","","","","0","","",""
"336089","2","","58711","2008-12-03 02:37:06","","1","","<p>Here's an approach that goes about GUI definitions a bit differently using class-based meta-programming rather than inheritance.</p>

<p>This is largley Django/SQLAlchemy inspired in that it is heavily based on meta-programming and separates your GUI code from your ""code code"".  I also think it should make heavy use of layout managers like Java does because when you're dropping code, no one wants to constantly tweak pixel alignment.  I also think it would be cool if we could have CSS-like properties.</p>

<p>Here is a rough brainstormed example that will show a column with a label on top, then a text box, then a button to click on the bottom which shows a message.</p>

<pre>
from happygui.controls import *

MAIN_WINDOW = Window(width=""500px"", height=""350px"",
    my_layout=ColumnLayout(padding=""10px"",
        my_label=Label(text=""What's your name kiddo?"", bold=True, align=""center""),
        my_edit=EditBox(placeholder=""""),
        my_btn=Button(text=""CLICK ME!"", on_click=Handler('module.file.btn_clicked')),
    ),
)
MAIN_WINDOW.show()

def btn_clicked(sender): # could easily be in a handlers.py file
    name = MAIN_WINDOW.my_layout.my_edit.text
    # same thing: name = sender.parent.my_edit.text
    # best practice, immune to structure change: MAIN_WINDOW.find('my_edit').text
    MessageBox(""Your name is '%s'"" % ()).show(modal=True)
</pre>

<p>One cool thing to notice is the way you can reference the input of my_edit by saying <code>MAIN_WINDOW.my_layout.my_edit.text</code>.  In the declaration for the window, I think it's important to be able to arbitrarily name controls in the function kwargs.</p>

<p>Here is the same app only using absolute positioning (the controls will appear in different places because we're not using a fancy layout manager):</p>

<pre>
from happygui.controls import *

MAIN_WINDOW = Window(width=""500px"", height=""350px"",
    my_label=Label(text=""What's your name kiddo?"", bold=True, align=""center"", x=""10px"", y=""10px"", width=""300px"", height=""100px""),
    my_edit=EditBox(placeholder="""", x=""10px"", y=""110px"", width=""300px"", height=""100px""),
    my_btn=Button(text=""CLICK ME!"", on_click=Handler('module.file.btn_clicked'), x=""10px"", y=""210px"", width=""300px"", height=""100px""),
)
MAIN_WINDOW.show()

def btn_clicked(sender): # could easily be in a handlers.py file
    name = MAIN_WINDOW.my_edit.text
    # same thing: name = sender.parent.my_edit.text
    # best practice, immune to structure change: MAIN_WINDOW.find('my_edit').text
    MessageBox(""Your name is '%s'"" % ()).show(modal=True)
</pre>

<p>I'm not entirely sure yet if this is a super great approach, but I definitely think it's on the right path.  I don't have time to explore this idea more, but if someone took this up as a project, I would love them.</p>
","","J.A. Roberts Tunney","","","","2008-12-03 02:37:06","","","","0","","",""
"336525","2","","58711","2008-12-03 08:48:06","","5","","<pre><code>## All you need is this class:

class MainWindow(Window):
    my_button = Button('Click Me')
    my_paragraph = Text('This is the text you wish to place')
    my_alert = AlertBox('What what what!!!')

    @my_button.clicked
    def my_button_clicked(self, button, event):
        self.my_paragraph.text.append('And now you clicked on it, the button that is.')

    @my_paragraph.text.changed
    def my_paragraph_text_changed(self, text, event):
        self.button.text = 'No more clicks!'

    @my_button.text.changed
    def my_button_text_changed(self, text, event):
        self.my_alert.show()


## The Style class is automatically gnerated by the framework
## but you can override it by defining it in the class:
##
##      class MainWindow(Window):
##          class Style:
##              my_blah = {'style-info': 'value'}
##
## or like you see below:

class Style:
    my_button = {
        'background-color': '#ccc',
        'font-size': '14px'}
    my_paragraph = {
        'background-color': '#fff',
        'color': '#000',
        'font-size': '14px',
        'border': '1px solid black',
        'border-radius': '3px'}

MainWindow.Style = Style

## The layout class is automatically generated
## by the framework but you can override it by defining it
## in the class, same as the Style class above, or by
## defining it like this:

class MainLayout(Layout):
    def __init__(self, style):
        # It takes the custom or automatically generated style class upon instantiation
        style.window.pack(HBox().pack(style.my_paragraph, style.my_button))

MainWindow.Layout = MainLayout

if __name__ == '__main__':
    run(App(main=MainWindow))
</code></pre>

<p>It would be relatively easy to do in python with a bit of that metaclass python magic know how. Which I have. And a knowledge of PyGTK. Which I also have. Gets ideas?</p>
","42751","Sam Sutch","","","","2008-12-03 08:48:06","","","","0","","",""
"336583","2","","58711","2008-12-03 09:18:40","","3","","<p>If you use <a href=""http://www.pygtk.org/"" rel=""nofollow noreferrer"">PyGTK</a> with <a href=""http://glade.gnome.org/"" rel=""nofollow noreferrer"">glade</a> and <a href=""http://www.pixelbeat.org/libs/libglade.py"" rel=""nofollow noreferrer"">this glade wrapper</a>, then PyGTK actually becomes somewhat pythonic. A little at least.</p>

<p>Basically, you create the GUI layout in Glade. You also specify event callbacks in glade. Then you write a class for your window like this:</p>

<pre><code>class MyWindow(GladeWrapper):
    GladeWrapper.__init__(self, ""my_glade_file.xml"", ""mainWindow"")
    self.GtkWindow.show()

    def button_click_event (self, *args):
        self.button1.set_label(""CLICKED"")
</code></pre>

<p>Here, I'm assuming that I have a GTK Button somewhere called <em>button1</em> and that I specified <em>button_click_event</em> as the <em>clicked</em> callback. The glade wrapper takes a lot of effort out of event mapping.</p>

<p>If I were to design a Pythonic GUI library, I would support something similar, to aid rapid development. The only difference is that I would ensure that the widgets have a more pythonic interface too. The current PyGTK classes seem very C to me, except that I use foo.bar(...) instead of bar(foo, ...) though I'm not sure exactly what I'd do differently. Probably allow for a Django models style declarative means of specifying widgets and events in code and allowing you to access data though iterators (where it makes sense, eg widget lists perhaps), though I haven't really thought about it.</p>
","21037","Dan","","","","2008-12-03 09:18:40","","","","0","","",""
"61168","2","","61151","2008-09-14 06:46:03","","11","","<p>I don't believe there is an established ""best practice"".</p>

<p>I put my tests in another directory outside of the app code. I then add the main app directory to sys.path (allowing you to import the modules from anywhere) in my test runner script (which does some other stuff as well) before running all the tests. This way I never have to remove the tests directory from the main code when I release it, saving me time and effort, if an ever so tiny amount.</p>
","3119","dwestbrook","","","","2008-09-14 06:46:03","","","","1","","",""
"61169","2","","61151","2008-09-14 06:46:14","","39","","<p>A common practice is to put the tests directory in the same parent directory as your module/package. So if your module was called foo.py your directory layout would look like:</p>

<pre><code>parent_dir/
  foo.py
  tests/
</code></pre>

<p>Of course there is no one way of doing it. You could also make a tests subdirectory and import the module using <a href=""http://www.python.org/dev/peps/pep-0328/"" rel=""noreferrer"">absolute import</a>.</p>

<p>Wherever you put your tests, I would recommend you use <a href=""http://nose.readthedocs.org/en/latest/"" rel=""noreferrer"">nose</a> to run them. <a href=""http://nose.readthedocs.org/en/latest/"" rel=""noreferrer"">Nose</a> searches through your directories for tests. This way, you can put tests wherever they make the most sense organizationally.</p>
","680","Cristian","","user559633","2015-01-09 05:31:48","2015-01-09 05:31:48","","","","6","","",""
"61518","2","","61151","2008-09-14 18:02:12","","-1","","<p>I've recently started to program in Python, so I've not really had chance to find out best practice yet.
But, I've written a module that goes and finds all the tests and runs them.</p>

<p>So, I have:</p>

<pre>
app/
 appfile.py
test/
 appfileTest.py
</pre>

<p>I'll have to see how it goes as I progress to larger projects.</p>
","4834","quamrana","","","","2008-09-14 18:02:12","","","","1","","",""
"61531","2","","61151","2008-09-14 18:18:58","","13","","<p>I use a <code>tests/</code> directory, and then import the main application modules using relative imports. So in MyApp/tests/foo.py, there might be:</p>

<pre><code>from .. import foo
</code></pre>

<p>to import the <code>MyApp.foo</code> module.</p>
","3560","John Millikin","","","","2008-09-14 18:18:58","","","","2","","",""
"61820","2","","61151","2008-09-15 03:09:29","","1","","<p>In C#, I've generally separated the tests into a separate assembly.</p>

<p>In Python -- so far -- I've tended to either write doctests, where the test is in the docstring of a function, or put them in the <code>if __name__ == ""__main__""</code> block at the bottom of the module.</p>
","6364","George V. Reilly","1199","Blair Conrad","2008-11-07 12:01:37","2008-11-07 12:01:36","","","","0","","",""
"62527","2","","61151","2008-09-15 12:52:00","","132","","<p>For a file <code>module.py</code>, the unit test should normally be called <code>test_module.py</code>, following Pythonic naming conventions.</p>

<p>There are several commonly accepted places to put <code>test_module.py</code>:</p>

<ol>
<li>In the same directory as <code>module.py</code>.</li>
<li>In <code>../tests/test_module.py</code> (at the same level as the code directory).</li>
<li>In <code>tests/test_module.py</code> (one level under the code directory).</li>
</ol>

<p>I prefer #1 for its simplicity of finding the tests and importing them. Whatever build system you're using can easily be configured to run files starting with <code>test_</code>. Actually, the <a href=""https://docs.python.org/library/unittest.html#test-discovery"" rel=""noreferrer"">default <code>unittest</code> pattern used for test discovery is <code>test*.py</code></a>.</p>
","6868","","12892","","2015-07-05 11:12:14","2015-07-05 11:12:14","","","","8","","",""
"63645","2","","61151","2008-09-15 14:56:35","","0","","<p>When writing a package called ""foo"", I will put unit tests into a separate package ""foo_test"". Modules and subpackages will then have the same name as the SUT package module. E.g. tests for a module foo.x.y are found in foo_test.x.y. The __init__.py files of each testing package then contain an AllTests suite that includes all test suites of the package. setuptools provides a convenient way to specify the main testing package, so that after ""python setup.py develop"" you can just use ""python setup.py test"" or ""python setup.py test -s foo_test.x.SomeTestSuite"" to the just a specific suite.</p>
","7779","srittau","","","","2008-09-15 14:56:35","","","","0","","",""
"77145","2","","61151","2008-09-16 21:10:12","","0","","<p>If the tests are simple, simply put them in the docstring -- most of the test frameworks for Python will be able to use that:</p>

<pre><code>&gt;&gt;&gt; import module
&gt;&gt;&gt; module.method('test')
'testresult'
</code></pre>

<p>For other more involved tests, I'd put them either in <code>../tests/test_module.py</code> or in <code>tests/test_module.py</code>.</p>
","","tholo","","","","2008-09-16 21:10:12","","","","1","","",""
"103610","2","","61151","2008-09-19 16:46:53","","22","","<p>I also tend to put my unit tests in the file itself, as Jeremy Cantrell above notes, although I tend to not put the test function in the main body, but rather put everything in an</p>

<pre><code>if __name__ == '__main__':
   do tests...
</code></pre>

<p>block.  This ends up adding documentation to the file as 'example code' for how to use the python file you are testing.</p>

<p>I should add, I tend to write very tight modules/classes.  If your modules require very large numbers of tests, you can put them in another, but even then, I'd still add:</p>

<pre><code>if __name__ == '__main__':
   import tests.thisModule
   tests.thisModule.runtests
</code></pre>

<p>This lets anybody reading your source code know where to look for the test code.</p>
","7061","","7061","Thomas Andrews","2008-09-19 17:04:15","2008-09-19 17:04:15","","","","2","","",""
"128616","2","","61151","2008-09-24 17:44:16","","1","","<p>We use </p>

<p>app/src/code.py</p>

<p>app/testing/code_test.py </p>

<p>app/docs/..</p>

<p>In each test file we insert ""../src/"" in sys.path. It's not the nicest solution but works. I think it would be great if someone came up w/ something like maven in java that gives you standard conventions that just work, no matter what project you work on.</p>
","9683","Andr&#233;","9683","Andr&#233;","2008-09-24 19:26:03","2008-09-24 19:26:03","","","","0","","",""
"382596","2","","61151","2008-12-19 23:48:07","","3","","<p>I prefer toplevel tests directory. This does mean imports become a little more difficult. For that I have two solutions:</p>

<ol>
<li>Use setuptools. Then you can pass <code>test_suite='tests.runalltests.suite'</code> into <code>setup()</code>, and can run the tests simply: <code>python setup.py test</code></li>
<li>Set PYTHONPATH when running the tests: <code>PYTHONPATH=. python tests/runalltests.py</code></li>
</ol>

<p>Here's how that stuff is supported by code in M2Crypto:</p>

<ul>
<li><a href=""http://svn.osafoundation.org/m2crypto/trunk/setup.py"" rel=""nofollow noreferrer"">http://svn.osafoundation.org/m2crypto/trunk/setup.py</a></li>
<li><a href=""http://svn.osafoundation.org/m2crypto/trunk/tests/alltests.py"" rel=""nofollow noreferrer"">http://svn.osafoundation.org/m2crypto/trunk/tests/alltests.py</a></li>
</ul>

<p>If you prefer to run tests with nosetests you might need do something a little different.</p>
","","Heikki Toivonen","67022","","2011-10-07 01:18:59","2011-10-07 01:18:59","","","","0","","",""
"815212","2","","61151","2009-05-02 17:08:05","","25","","<p>We had the very same question when writing Pythoscope (<a href=""http://pythoscope.org"" rel=""noreferrer"">http://pythoscope.org</a>), which generates unit tests for Python programs.  We polled people on the testing in python list before we chose a directory, there were many different opinions.  In the end we chose to put a ""tests"" directory in the same directory as the source code. In that directory we generate a test file for each module in the parent directory.  </p>
","99896","","","","","2009-05-02 17:08:05","","","","1","","",""
"2363162","2","","61151","2010-03-02 12:50:51","","5","","<p>How I do it...</p>

<p>Folder structure:</p>

<pre><code>project/
    src/
        code.py
    tests/
    setup.py
</code></pre>

<p>Setup.py points to src/ as the location containing my projects modules, then i run:</p>

<pre><code>setup.py develop
</code></pre>

<p>Which adds my project into site-packages, pointing to my working copy. To run my tests i use:</p>

<pre><code>setup.py tests
</code></pre>

<p>Using whichever test runner I've configured.</p>
","50746","","50746","","2011-04-05 21:36:05","2011-04-05 21:36:05","","","","1","","",""
"22704148","2","","61151","2014-03-28 04:22:38","","6","","<p>From my experience in developing Testing frameworks in Python, I would suggest to put python unit tests in a separate directory. Maintain a symmetric directory structure. This would be helpful in packaging just the core libraries and not package the unit tests. Below is implemented through a schematic diagram. </p>

<pre><code>                              &lt;Main Package&gt;
                               /          \
                              /            \
                            lib           tests
                            /                \
             [module1.py, module2.py,  [ut_module1.py, ut_module2.py,
              module3.py  module4.py,   ut_module3.py, ut_module.py]
              __init__.py]
</code></pre>

<p>In this way when you package these libraries using an rpm, you can just package the main library modules (only). This helps maintainability particularly in agile environment. </p>
","2726038","","","","","2014-03-28 04:22:38","","","","0","","",""
"23386287","2","","61151","2014-04-30 10:58:51","","29","","<h2>Only 1 test file</h2>

<p>If doesn't have many test files, putting it in a top-level directory is nice (I think this is a pythonic (recommended) way):</p>

<pre><code>module/
  lib/
    __init__.py
    module.py
  test.py
</code></pre>

<h2>Many test files</h2>

<p>If has many test files, put it in a <code>tests</code> folder:</p>

<pre><code>module/
  lib/
    __init__.py
    module.py
  tests/
    test_module.py
    test_module2.py
</code></pre>

<p>but if you put the tests in <code>tests</code> folder, test can't <code>import ..lib</code> in CLI because <code>__main__</code>  can't import relative modules, so instead we can use <a href=""https://nose.readthedocs.org/en/latest/"" rel=""nofollow noreferrer""><kbd>nose</kbd></a>, or we can add a parent directory to the python import path, and for that I will create a</p>

<h3>env.py</h3>

<pre><code>import sys
import os

# append module root directory to sys.path
sys.path.append(
    os.path.dirname(
        os.path.dirname(
            os.path.abspath(__file__)
        )
    )
)
</code></pre>

<p>in</p>

<pre><code>module/
  tests/
    test_module.py
    env.py
</code></pre>

<p>and <code>import env</code> before test import module</p>

<h3>test_module.py</h3>

<pre><code>import unittest
# append parent directory to import path
import env
# now we can import the lib module
from lib import module

if __name__ == '__main__':
    unittest.main()
</code></pre>
","1877620","","2738183","","2017-09-26 18:41:14","2017-09-26 18:41:14","","","","0","","",""
"37122327","2","","61151","2016-05-09 17:54:13","","6","","<p>I recommend you check some main Python projects on GitHub and get some ideas.</p>

<p>When your code gets larger and you add more libraries it's better to create a test folder in the same directory you have setup.py and mirror your project directory structure for each test type (unittest, integration, ...)</p>

<p>For example if you have a directory structure like:</p>

<pre><code>myPackage/
    myapp/
       moduleA/
          __init__.py
          module_A.py
       moduleB/
          __init__.py
          module_B.py
setup.py
</code></pre>

<p>After adding test folder you will have a directory structure like:</p>

<pre><code>myPackage/
    myapp/
       moduleA/
          __init__.py
          module_A.py
       moduleB/
          __init__.py
          module_B.py
test/
   unit/
      myapp/
         moduleA/
            module_A_test.py
         moduleB/
            module_B_test.py
   integration/
          myapp/
             moduleA/
                module_A_test.py
             moduleB/
                module_B_test.py
setup.py
</code></pre>

<p>Many properly written Python packages uses the same structure. A very good example is the Boto package.
Check <a href=""https://github.com/boto/boto"" rel=""noreferrer"">https://github.com/boto/boto</a></p>
","832304","","","","","2016-05-09 17:54:13","","","","0","","",""
"39740835","2","","61151","2016-09-28 07:31:38","","4","","<p>Every once in a while I find myself checking out the topic of test placement, and every time the majority recommends a separate folder structure beside the library code, but I find that every time the arguments are the same and are not that convincing. I end up putting my test modules somewhere beside the core modules. </p>

<p>The main reason for doing this is: <strong>refactoring</strong>.</p>

<p>When I move things around I do want test modules to move with the code; it's easy to lose tests if they are in a separate tree. Let's be honest, sooner or later you end up with a totally different folder structure, like <a href=""https://github.com/django/django"" rel=""nofollow noreferrer"">django</a>, <a href=""https://github.com/pallets/flask"" rel=""nofollow noreferrer"">flask</a> and many others. Which is fine if you don't care.</p>

<p>The main question you should ask yourself is this:  </p>

<p>Am I writing:  </p>

<ul>
<li>a) reusable library or  </li>
<li>b) building a project than bundles together some semi-separated modules?</li>
</ul>

<p>If a: </p>

<p>A separate folder and the extra effort to maintain its structure may be better suited. No one will complain about your tests getting <em>deployed to production</em>. </p>

<p>But it's also just as easy to exclude tests from being distributed when they are mixed with the core folders; <a href=""http://setuptools.readthedocs.io/en/latest/setuptools.html?highlight=find_packages#using-find-packages"" rel=""nofollow noreferrer"">put this in the setup.py</a>:</p>

<pre><code>find_packages(""src"", exclude=[""*.tests"", ""*.tests.*"", ""tests.*"", ""tests""]) 
</code></pre>

<p>If b: </p>

<p>You may wish ‚Äî as every one of us do ‚Äî that you are writing reusable libraries, but most of the time their life is tied to the life of the project. Ability to easily maintain your project should be a priority. </p>

<p>Then if you did a good job and your module is a good fit for another project, it will probably get copied ‚Äî not forked or made into a separate library ‚Äî into this new project, and moving tests that lay beside it in the same folder structure is easy in comparison to fishing up tests in a mess that a separate test folder had become. (You may argue that it shouldn't be a mess in the first place but let's be realistic here).</p>

<p>So the choice is still yours, but I would argue that with mixed up tests you achieve all the same things as with a separate folder, but with less effort on keeping things tidy.    </p>
","260480","","1013457","","2017-08-28 14:43:12","2017-08-28 14:43:12","","","","2","","",""
"67672","2","","67631","2008-09-15 22:37:24","","8","","<p>I believe you can use <a href=""https://docs.python.org/2/library/imp.html#imp.find_module"" rel=""noreferrer""><code>imp.find_module()</code></a> and <a href=""https://docs.python.org/2/library/imp.html#imp.load_module"" rel=""noreferrer""><code>imp.load_module()</code></a> to load the specified module.  You'll need to split the module name off of the path, i.e. if you wanted to load <code>/home/mypath/mymodule.py</code> you'd need to do:</p>

<pre><code>imp.find_module('mymodule', '/home/mypath/')
</code></pre>

<p>...but that should get the job done.</p>
","10035","Matt","734335","","2015-01-02 11:08:38","2015-01-02 11:08:38","","","","0","","",""
"67692","2","","67631","2008-09-15 22:41:16","","749","","<p>For Python 3.5+ use:</p>

<pre><code>import importlib.util
spec = importlib.util.spec_from_file_location(""module.name"", ""/path/to/file.py"")
foo = importlib.util.module_from_spec(spec)
spec.loader.exec_module(foo)
foo.MyClass()
</code></pre>

<p>For Python 3.3 and 3.4 use:</p>

<pre><code>from importlib.machinery import SourceFileLoader

foo = SourceFileLoader(""module.name"", ""/path/to/file.py"").load_module()
foo.MyClass()
</code></pre>

<p>(Although this has been deprecated in Python 3.4.)</p>

<p>Python 2 use:</p>

<pre><code>import imp

foo = imp.load_source('module.name', '/path/to/file.py')
foo.MyClass()
</code></pre>

<p>There are equivalent convenience functions for compiled Python files and DLLs.</p>

<p>See also. <a href=""http://bugs.python.org/issue21436"" rel=""noreferrer"">http://bugs.python.org/issue21436</a>.</p>
","7779","Sebastian Rittau","7779","","2015-12-07 14:31:23","2015-12-07 14:31:23","","","","26","","",""
"67693","2","","67631","2008-09-15 22:41:24","","15","","<p>You can use the </p>

<pre><code>load_source(module_name, path_to_file) 
</code></pre>

<p>method from <a href=""https://docs.python.org/library/imp.html"" rel=""noreferrer"">imp module</a>.</p>
","9812","zuber","2213647","","2014-11-11 07:07:34","2014-11-11 07:07:34","","","","2","","",""
"67705","2","","67631","2008-09-15 22:43:20","","2","","<p><strong>Import package modules at runtime (Python recipe)</strong> </p>

<p><a href=""http://code.activestate.com/recipes/223972/"" rel=""nofollow noreferrer"">http://code.activestate.com/recipes/223972/</a></p>

<pre><code>###################
##                #
## classloader.py #
##                #
###################

import sys, types

def _get_mod(modulePath):
    try:
        aMod = sys.modules[modulePath]
        if not isinstance(aMod, types.ModuleType):
            raise KeyError
    except KeyError:
        # The last [''] is very important!
        aMod = __import__(modulePath, globals(), locals(), [''])
        sys.modules[modulePath] = aMod
    return aMod

def _get_func(fullFuncName):
    """"""Retrieve a function object from a full dotted-package name.""""""

    # Parse out the path, module, and function
    lastDot = fullFuncName.rfind(u""."")
    funcName = fullFuncName[lastDot + 1:]
    modPath = fullFuncName[:lastDot]

    aMod = _get_mod(modPath)
    aFunc = getattr(aMod, funcName)

    # Assert that the function is a *callable* attribute.
    assert callable(aFunc), u""%s is not callable."" % fullFuncName

    # Return a reference to the function itself,
    # not the results of the function.
    return aFunc

def _get_class(fullClassName, parentClass=None):
    """"""Load a module and retrieve a class (NOT an instance).

    If the parentClass is supplied, className must be of parentClass
    or a subclass of parentClass (or None is returned).
    """"""
    aClass = _get_func(fullClassName)

    # Assert that the class is a subclass of parentClass.
    if parentClass is not None:
        if not issubclass(aClass, parentClass):
            raise TypeError(u""%s is not a subclass of %s"" %
                            (fullClassName, parentClass))

    # Return a reference to the class itself, not an instantiated object.
    return aClass


######################
##       Usage      ##
######################

class StorageManager: pass
class StorageManagerMySQL(StorageManager): pass

def storage_object(aFullClassName, allOptions={}):
    aStoreClass = _get_class(aFullClassName, StorageManager)
    return aStoreClass(allOptions)
</code></pre>
","10370","","445131","","2013-12-22 02:17:57","2013-12-22 02:17:57","","","","0","","",""
"67708","2","","67631","2008-09-15 22:44:50","","14","","<p>You can also do something like this and add the directory that the configuration file is sitting in to the Python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case ""config"".</p>

<p>Messy, but it works.</p>

<pre><code>configfile = '~/config.py'

import os
import sys

sys.path.append(os.path.dirname(os.path.expanduser(configfile)))

import config
</code></pre>
","10322","","63550","","2014-01-17 22:38:07","2014-01-17 22:38:07","","","","0","","",""
"67715","2","","67631","2008-09-15 22:46:35","","8","","<p>Do you mean load or import?</p>

<p>You can manipulate the sys.path list specify the path to your module, then import your module. For example, given a module at:</p>

<pre><code>/foo/bar.py
</code></pre>

<p>You could do:</p>

<pre><code>import sys
sys.path[0:0] = '/foo' # puts the /foo directory at the start of your path
import bar
</code></pre>
","70142","Wheat","3957","","2010-07-09 05:30:00","2010-07-09 05:30:00","","","","4","","",""
"68628","2","","67631","2008-09-16 01:43:04","","11","","<pre><code>def import_file(full_path_to_module):
    try:
        import os
        module_dir, module_file = os.path.split(full_path_to_module)
        module_name, module_ext = os.path.splitext(module_file)
        save_cwd = os.getcwd()
        os.chdir(module_dir)
        module_obj = __import__(module_name)
        module_obj.__file__ = full_path_to_module
        globals()[module_name] = module_obj
        os.chdir(save_cwd)
    except:
        raise ImportError

import_file('/home/somebody/somemodule.py')
</code></pre>
","10769","","","","","2008-09-16 01:43:04","","","","3","","",""
"129374","2","","67631","2008-09-24 19:36:16","","246","","<p>The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.  For example:</p>

<pre><code>import sys
# the mock-0.3.1 dir contains testcase.py, testutils.py &amp; mock.py
sys.path.append('/foo/bar/mock-0.3.1')

from testcase import TestCase
from testutils import RunTests
from mock import Mock, sentinel, patch
</code></pre>
","4766","Daryl Spitzer","","","","2008-09-24 19:36:16","","","","7","","",""
"6284270","2","","67631","2011-06-08 19:41:29","","1","","<p>I made a package that uses <code>imp</code> for you. I call it <code>import_file</code> and this is how it's used:</p>

<pre><code>&gt;&gt;&gt;from import_file import import_file
&gt;&gt;&gt;mylib = import_file('c:\\mylib.py')
&gt;&gt;&gt;another = import_file('relative_subdir/another.py')
</code></pre>

<p>You can get it at:</p>

<p><a href=""http://pypi.python.org/pypi/import_file"" rel=""nofollow"">http://pypi.python.org/pypi/import_file</a></p>

<p>or at</p>

<p><a href=""http://code.google.com/p/import-file/"" rel=""nofollow"">http://code.google.com/p/import-file/</a></p>
","177498","","","","","2011-06-08 19:41:29","","","","1","","",""
"8721254","2","","67631","2012-01-04 02:17:21","","3","","<p>This should work</p>

<pre><code>path = os.path.join('./path/to/folder/with/py/files', '*.py')
for infile in glob.glob(path):
    basename = os.path.basename(infile)
    basename_without_extension = basename[:-3]

    # http://docs.python.org/library/imp.html?highlight=imp#module-imp
    imp.load_source(basename_without_extension, infile)
</code></pre>
","914986","","324364","","2012-01-04 04:28:50","2012-01-04 04:28:50","","","","1","","",""
"25827116","2","","67631","2014-09-13 19:57:28","","2","","<p>You can use the <code>pkgutil</code> module (specifically the <a href=""https://docs.python.org/3/library/pkgutil.html#pkgutil.walk_packages"" rel=""nofollow""><code>walk_packages</code></a> method) to get a list of the packages in the current directory. From there it's trivial to use the <code>importlib</code> machinery to import the modules you want:</p>

<pre><code>import pkgutil
import importlib

packages = pkgutil.walk_packages(path='.')
for importer, name, is_package in packages:
    mod = importlib.import_module(name)
    # do whatever you want with module now, it's been imported!
</code></pre>
","783910","","734335","","2015-01-02 11:04:17","2015-01-02 11:04:17","","","","0","","",""
"26995106","2","","67631","2014-11-18 13:06:35","","1","","<p>In Linux, adding a symbolic link in the directory your python script is located works.</p>

<p>ie: </p>

<p>ln -s /absolute/path/to/module/module.py /absolute/path/to/script/module.py</p>

<p>python will create /absolute/path/to/script/module.pyc and will update it if you change the contents of /absolute/path/to/module/module.py</p>

<p>then include the following in mypythonscript.py</p>

<p>from module import *</p>
","2760152","","2760152","","2014-11-18 18:06:37","2014-11-18 18:06:37","","","","2","","",""
"27127448","2","","67631","2014-11-25 12:58:47","","0","","<p>The best way, I think, is from the official documentation (<a href=""https://docs.python.org/3.2/library/imp.html#examples"" rel=""nofollow"">29.1. imp ‚Äî Access the import internals</a>):</p>

<pre><code>import imp
import sys

def __import__(name, globals=None, locals=None, fromlist=None):
    # Fast path: see if the module has already been imported.
    try:
        return sys.modules[name]
    except KeyError:
        pass

    # If any of the following calls raises an exception,
    # there's a problem we can't handle -- let the caller handle it.

    fp, pathname, description = imp.find_module(name)

    try:
        return imp.load_module(name, fp, pathname, description)
    finally:
        # Since we may exit via an exception, close fp explicitly.
        if fp:
            fp.close()
</code></pre>
","2783173","","","","","2014-11-25 12:58:47","","","","0","","",""
"29589414","2","","67631","2015-04-12 12:22:56","","2","","<p>This area of Python 3.4 seems to be extremely tortuous to understand! However with a bit of hacking using the code from Chris Calloway as a start I managed to get something working. Here's the basic function.</p>

<pre><code>def import_module_from_file(full_path_to_module):
    """"""
    Import a module given the full path/filename of the .py file

    Python 3.4

    """"""

    module = None

    try:

        # Get module name and path from full path
        module_dir, module_file = os.path.split(full_path_to_module)
        module_name, module_ext = os.path.splitext(module_file)

        # Get module ""spec"" from filename
        spec = importlib.util.spec_from_file_location(module_name,full_path_to_module)

        module = spec.loader.load_module()

    except Exception as ec:
        # Simple error printing
        # Insert ""sophisticated"" stuff here
        print(ec)

    finally:
        return module
</code></pre>

<p>This appears to use non-deprecated modules from Python 3.4. I don't pretend to understand why, but it seems to work from within a program. I found Chris' solution worked on the command line but not from inside a program.</p>
","4779459","","","","","2015-04-12 12:22:56","","","","0","","",""
"30605451","2","","67631","2015-06-02 19:57:46","","3","","<p>I'm not saying that it is better, but for the sake of completeness, I wanted to suggest the <a href=""https://docs.python.org/3/library/functions.html#exec"" rel=""nofollow""><code>exec</code></a> function, available in both python 2 and 3.
<code>exec</code> allows you to execute arbitrary code in either the global scope, or in an internal scope, provided as a dictionary.</p>

<p>For example, if you have a module stored in <code>""/path/to/module</code>"" with the function <code>foo()</code>, you could run it by doing the following:</p>

<pre><code>module = dict()
with open(""/path/to/module"") as f:
    exec(f.read(), module)
module['foo']()
</code></pre>

<p>This makes it a bit more explicit that you're loading code dynamically, and grants you some additional power, such as the ability to provide custom builtins. </p>

<p>And if having access through attributes, instead of keys is important to you, you can design a custom dict class for the globals, that provides such access, e.g.:</p>

<pre><code>class MyModuleClass(dict):
    def __getattr__(self, name):
        return self.__getitem__(name)
</code></pre>
","493553","","","","","2015-06-02 19:57:46","","","","1","","",""
"32905959","2","","67631","2015-10-02 11:14:13","","2","","<p>To import a module from a given filename, you can temporarily extend the path, and restore the system path in the finally block <a href=""http://effbot.org/zone/import-string.htm"" rel=""nofollow"">reference:</a></p>

<pre><code>filename = ""directory/module.py""

directory, module_name = os.path.split(filename)
module_name = os.path.splitext(module_name)[0]

path = list(sys.path)
sys.path.insert(0, directory)
try:
    module = __import__(module_name)
finally:
    sys.path[:] = path # restore
</code></pre>
","4388898","","","","","2015-10-02 11:14:13","","","","0","","",""
"34570493","2","","67631","2016-01-02 20:37:55","","0","","<p>It may be obvious but in interactive shell:</p>

<pre><code>cd path
import module
</code></pre>
","2101864","","","","","2016-01-02 20:37:55","","","","1","","",""
"37339817","2","","67631","2016-05-20 06:52:17","","7","","<p>It sounds like you don't want to specifically import the configuration file (which has a whole lot of side effects and additional complications involved), you just want to run it, and be able to access the resulting namespace. The standard library provides an API specifically for that in the form of <a href=""https://docs.python.org/3/library/runpy.html#runpy.run_path"" rel=""noreferrer"">runpy.run_path</a>:</p>

<pre><code>from runpy import run_path
settings = run_path(""/path/to/file.py"")
</code></pre>

<p>That interface is available in Python 2.7 and Python 3.2+</p>
","597742","","","","","2016-05-20 06:52:17","","","","0","","",""
"37611448","2","","67631","2016-06-03 10:04:52","","3","","<p>Here is some code that works in all Python versions, from 2.7-3.5 and probably even others.</p>

<pre><code>config_file = ""/tmp/config.py""
with open(config_file) as f:
    code = compile(f.read(), config_file, 'exec')
    exec(code, globals(), locals())
</code></pre>

<p>I tested it. It may be ugly but so far is the only one that works in all versions.</p>
","99834","","","","","2016-06-03 10:04:52","","","","0","","",""
"43602557","2","","67631","2017-04-25 05:45:26","","1","","<p>I have come up with a slightly modified version of @SebastianRittau's wonderful answer (for Python > 3.4 I think), which will allow you to load a file with any extension as a module using <a href=""https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_loader"" rel=""nofollow noreferrer""><code>spec_from_loader</code></a> instead of <a href=""https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_file_location"" rel=""nofollow noreferrer""><code>spec_from_file_location</code></a>:</p>

<pre><code>from importlib.util import spec_from_loader
from importlib.machinery import SourceFileLoader 

spec = spec_from_loader(""module.name"", SourceFileLoader(""module.name"", ""/path/to/file.py""))
mod = module_from_spec(spec)
spec.loader.exec_module(mod)
</code></pre>

<p>The advantage of encoding the path in an explicit <a href=""https://docs.python.org/3/library/importlib.html#importlib.machinery.SourceFileLoader"" rel=""nofollow noreferrer""><code>SourceFileLoader</code></a> is that the <a href=""https://docs.python.org/3/library/importlib.html#module-importlib.machinery"" rel=""nofollow noreferrer"">machinery</a> will not try to figure out the type of the file from the extension. This means that you can load something like a <code>.txt</code> file using this method, but you could not do it with <code>spec_from_file_location</code> without specifying the loader because <code>.txt</code> is not in <a href=""https://docs.python.org/3/library/importlib.html#importlib.machinery.SOURCE_SUFFIXES"" rel=""nofollow noreferrer""><code>importlib.machinery.SOURCE_SUFFIXES</code></a>.</p>
","2988730","","","","","2017-04-25 05:45:26","","","","0","","",""
"68502","2","","68477","2008-09-16 01:21:20","","23","","<p>Yes. You'd use the <code>urllib2</code> module, and encode using the <code>multipart/form-data</code> content type. Here is some sample code to get you started -- it's a bit more than just file uploading, but you should be able to read through it and see how it works:</p>

<pre><code>user_agent = ""image uploader""
default_message = ""Image $current of $total""

import logging
import os
from os.path import abspath, isabs, isdir, isfile, join
import random
import string
import sys
import mimetypes
import urllib2
import httplib
import time
import re

def random_string (length):
    return ''.join (random.choice (string.letters) for ii in range (length + 1))

def encode_multipart_data (data, files):
    boundary = random_string (30)

    def get_content_type (filename):
        return mimetypes.guess_type (filename)[0] or 'application/octet-stream'

    def encode_field (field_name):
        return ('--' + boundary,
                'Content-Disposition: form-data; name=""%s""' % field_name,
                '', str (data [field_name]))

    def encode_file (field_name):
        filename = files [field_name]
        return ('--' + boundary,
                'Content-Disposition: form-data; name=""%s""; filename=""%s""' % (field_name, filename),
                'Content-Type: %s' % get_content_type(filename),
                '', open (filename, 'rb').read ())

    lines = []
    for name in data:
        lines.extend (encode_field (name))
    for name in files:
        lines.extend (encode_file (name))
    lines.extend (('--%s--' % boundary, ''))
    body = '\r\n'.join (lines)

    headers = {'content-type': 'multipart/form-data; boundary=' + boundary,
               'content-length': str (len (body))}

    return body, headers

def send_post (url, data, files):
    req = urllib2.Request (url)
    connection = httplib.HTTPConnection (req.get_host ())
    connection.request ('POST', req.get_selector (),
                        *encode_multipart_data (data, files))
    response = connection.getresponse ()
    logging.debug ('response = %s', response.read ())
    logging.debug ('Code: %s %s', response.status, response.reason)

def make_upload_file (server, thread, delay = 15, message = None,
                      username = None, email = None, password = None):

    delay = max (int (delay or '0'), 15)

    def upload_file (path, current, total):
        assert isabs (path)
        assert isfile (path)

        logging.debug ('Uploading %r to %r', path, server)
        message_template = string.Template (message or default_message)

        data = {'MAX_FILE_SIZE': '3145728',
                'sub': '',
                'mode': 'regist',
                'com': message_template.safe_substitute (current = current, total = total),
                'resto': thread,
                'name': username or '',
                'email': email or '',
                'pwd': password or random_string (20),}
        files = {'upfile': path}

        send_post (server, data, files)

        logging.info ('Uploaded %r', path)
        rand_delay = random.randint (delay, delay + 5)
        logging.debug ('Sleeping for %.2f seconds------------------------------\n\n', rand_delay)
        time.sleep (rand_delay)

    return upload_file

def upload_directory (path, upload_file):
    assert isabs (path)
    assert isdir (path)

    matching_filenames = []
    file_matcher = re.compile (r'\.(?:jpe?g|gif|png)$', re.IGNORECASE)

    for dirpath, dirnames, filenames in os.walk (path):
        for name in filenames:
            file_path = join (dirpath, name)
            logging.debug ('Testing file_path %r', file_path)
            if file_matcher.search (file_path):
                matching_filenames.append (file_path)
            else:
                logging.info ('Ignoring non-image file %r', path)

    total_count = len (matching_filenames)
    for index, file_path in enumerate (matching_filenames):
        upload_file (file_path, index + 1, total_count)

def run_upload (options, paths):
    upload_file = make_upload_file (**options)

    for arg in paths:
        path = abspath (arg)
        if isdir (path):
            upload_directory (path, upload_file)
        elif isfile (path):
            upload_file (path)
        else:
            logging.error ('No such path: %r' % path)

    logging.info ('Done!')
</code></pre>
","3560","John Millikin","","","","2008-09-16 01:21:20","","","","2","","",""
"75158","2","","68477","2008-09-16 18:03:09","","0","","<p>You may also want to have a look at <a href=""http://code.google.com/p/httplib2/"" rel=""nofollow noreferrer"">httplib2</a>, with <a href=""http://bitworking.org/projects/httplib2/doc/html/libhttplib2.html#examples"" rel=""nofollow noreferrer"">examples</a>. I find using httplib2 is more concise than using the built-in HTTP modules.</p>
","8925","pdc","","","","2008-09-16 18:03:09","","","","3","","",""
"525193","2","","68477","2009-02-08 05:20:36","","2","","<p>Chris Atlee's <a href=""http://atlee.ca/software/poster/"" rel=""nofollow noreferrer"">poster</a> library works really well for this (particularly the convenience function <code>poster.encode.multipart_encode()</code>). As a bonus, it supports streaming of large files without loading an entire file into memory. See also <a href=""http://bugs.python.org/issue3244"" rel=""nofollow noreferrer"">Python issue 3244</a>.</p>
","38140","gotgenes","221537","","2010-04-13 19:41:19","2010-04-13 19:41:19","","","","0","","",""
"7969778","2","","68477","2011-11-01 16:43:03","","4","","<p>The only thing that stops you from using urlopen directly on a file object is the fact that the builtin file object lacks a <strong>len</strong> definition. A simple way is to create a subclass, which provides urlopen with the correct file. 
I have also modified the Content-Type header in the file below.</p>

<pre><code>import os
import urllib2
class EnhancedFile(file):
    def __init__(self, *args, **keyws):
        file.__init__(self, *args, **keyws)

    def __len__(self):
        return int(os.fstat(self.fileno())[6])

theFile = EnhancedFile('a.xml', 'r')
theUrl = ""http://example.com/abcde""
theHeaders= {'Content-Type': 'text/xml'}

theRequest = urllib2.Request(theUrl, theFile, theHeaders)

response = urllib2.urlopen(theRequest)

theFile.close()


for line in response:
    print line
</code></pre>
","1024114","","1661254","","2012-09-12 00:14:57","2012-09-12 00:14:57","","","","2","","",""
"10234640","2","","68477","2012-04-19 18:40:02","","141","","<p>From <a href=""http://docs.python-requests.org/en/latest/user/quickstart/#post-a-multipart-encoded-file"" rel=""noreferrer"">http://docs.python-requests.org/en/latest/user/quickstart/#post-a-multipart-encoded-file</a></p>

<p>Requests makes it very simple to upload Multipart-encoded files:</p>

<pre><code>&gt;&gt;&gt; with open('report.xls', 'rb') as f: r = requests.post('http://httpbin.org/post', files={'report.xls': f})
</code></pre>

<p>That's it. I'm not joking - this is one line of code. File was sent. Let's check:</p>

<pre><code>&gt;&gt;&gt; r.text
{
  ""origin"": ""179.13.100.4"",
  ""files"": {
    ""report.xls"": ""&lt;censored...binary...data&gt;""
  },
  ""form"": {},
  ""url"": ""http://httpbin.org/post"",
  ""args"": {},
  ""headers"": {
    ""Content-Length"": ""3196"",
    ""Accept-Encoding"": ""identity, deflate, compress, gzip"",
    ""Accept"": ""*/*"",
    ""User-Agent"": ""python-requests/0.8.0"",
    ""Host"": ""httpbin.org:80"",
    ""Content-Type"": ""multipart/form-data; boundary=127.0.0.1.502.21746.1321131593.786.1""
  },
  ""data"": """"
}
</code></pre>
","95735","","974369","","2017-03-24 17:26:15","2017-03-24 17:26:15","","","","6","","",""
"31305207","2","","68477","2015-07-08 22:51:47","","3","","<p>Looks like python requests does not handle extremely large multi-part files.</p>

<p>The documentation recommends you look into <code>requests-toolbelt</code>.</p>

<p><a href=""https://toolbelt.readthedocs.org/en/latest/uploading-data.html"" rel=""nofollow"">Here's the pertinent page</a> from their documentation.</p>
","5091149","","442945","","2015-07-08 23:09:31","2015-07-08 23:09:31","","","","0","","",""
"36078069","2","","68477","2016-03-18 06:59:16","","0","","<pre><code>def visit_v2(device_code, camera_code):
    image1 = MultipartParam.from_file(""files"", ""/home/yuzx/1.txt"")
    image2 = MultipartParam.from_file(""files"", ""/home/yuzx/2.txt"")
    datagen, headers = multipart_encode([('device_code', device_code), ('position', 3), ('person_data', person_data), image1, image2])
    print """".join(datagen)
    if server_port == 80:
        port_str = """"
    else:
        port_str = "":%s"" % (server_port,)
    url_str = ""http://"" + server_ip + port_str + ""/adopen/device/visit_v2""
    headers['nothing'] = 'nothing'
    request = urllib2.Request(url_str, datagen, headers)
    try:
        response = urllib2.urlopen(request)
        resp = response.read()
        print ""http_status ="", response.code
        result = json.loads(resp)
        print resp
        return result
    except urllib2.HTTPError, e:
        print ""http_status ="", e.code
        print e.read()
</code></pre>
","6081103","","","","","2016-03-18 06:59:16","","","","0","","",""
"37142773","2","","68477","2016-05-10 15:23:21","","2","","<p>I am trying to test django rest api and its working for me:</p>

<pre><code>def test_upload_file(self):
        filename = ""/Users/Ranvijay/tests/test_price_matrix.csv""
        data = {'file': open(filename, 'rb')}
        client = APIClient()
        # client.credentials(HTTP_AUTHORIZATION='Token ' + token.key)
        response = client.post(reverse('price-matrix-csv'), data, format='multipart')

        print response
        self.assertEqual(response.status_code, status.HTTP_200_OK)
</code></pre>
","2654232","","","","","2016-05-10 15:23:21","","","","0","","",""
"942169","2","","942148","2009-06-02 22:15:04","","0","","<p>This is a problem I figured out myself not 10 minutes ago. The solution is to add the post_change_redirect value to the dictionary of arguments you are passing to the password_reset view.</p>

<p>So this is what mine now look like:</p>

<pre><code>(r'^/password/$', password_change, {'template_name': 'testing/password.html', 'post_change_redirect': '/account/'})
</code></pre>

<p>I hope that does it for you! I agree that the documentation for this particular feature is lacking somewhat, but this solved the exact same issue for my project.</p>

<p>Edit: I really should have scrolled across - you've included that already. Apologies for that, but I hope you get it sorted :)</p>
","74169","","","","","2009-06-02 22:15:04","","","","0","","",""
"944440","2","","942148","2009-06-03 12:26:55","","3","","<p><strong>Edit</strong>: I used your example, and had to change to not use keyword parameters.</p>

<pre><code>{% url django.contrib.auth.views.password_reset_confirm uid, token %}
</code></pre>

<p>Named parameters do work, as long as both uid and token are defined.  If either are not defined or blank I get the same error you do:</p>

<pre><code>{% url django.contrib.auth.views.password_reset_confirm uidb36=uid, token=token %}
</code></pre>
","56488","","56488","","2009-06-03 14:53:45","2009-06-03 14:53:45","","","","2","","",""
"945160","2","","942148","2009-06-03 14:38:23","","2","","<p>Just wanted to post the solution I came up with.  The problem was in this line:</p>

<pre><code>{% url django.contrib.auth.views.password_reset_confirm uidb36=uid, token=token %}
</code></pre>

<p>I'm not really a 100% why either, so I just hard coded the url like this:</p>

<pre><code>http://mysite.com/accounts/reset/{{uid}}-{{token}}/
</code></pre>
","74474","","","","","2009-06-03 14:38:23","","","","0","","",""
"6640223","2","","942148","2011-07-10 09:13:00","","2","","<p>I've struggled with this for over an hour trying everything on this page and every other page on the internet. Finally to solve the problem in my case i had to delete </p>

<pre><code>{% load url from future %}
</code></pre>

<p>from the top of my password_reset_email.html template.</p>

<p>Also note, ""uidb36=uid"" in the url script. Here's my full password_reset_email.html template, I hope it saves someone some time:</p>

<pre><code>{% autoescape off %}
    You're receiving this e-mail because you requested a password reset for your user account at {{ site_name }}.


Please go to the following page and choose a new password:
{% block reset_link %}
{{ protocol }}://{{ domain }}{% url django.contrib.auth.views.password_reset_confirm uidb36=uid token=token %}
{% endblock %}

Your username, in case you've forgotten:"" %} {{ user.username }}

Thanks for using our site!

The {{ site_name }} team

{% endautoescape %}
</code></pre>
","11571","","","","","2011-07-10 09:13:00","","","","0","","",""
"7825523","2","","7825361","2011-10-19 17:37:06","","1","","<pre><code>for el in tree.getiterator(tag='page'):
    page_id = el.get('id', None) # returns second arg if id not exists
    if page_id:
        print page_id, el.find('title').text
    else:
        pprint(el.attrib)
</code></pre>

<p><strong>Edit:</strong>  Updated for commment: ""Thanks can i print page_id and title at same time? Means 31239628 - Title""</p>
","1322401","","1322401","","2011-10-19 17:47:04","2011-10-19 17:47:04","","","","1","","",""
"7825769","2","","7825361","2011-10-19 17:54:02","","1","","<p>The <em>element.get()</em> method is used to retrieve option attribute values in a tag:</p>

<pre><code>&gt;&gt;&gt; page_id = tree.find('page').get('id')
&gt;&gt;&gt; if page_id:
        print page_id

31239628
</code></pre>
","1001643","","","","","2011-10-19 17:54:02","","","","0","","",""
"7825517","2","","7825395","2011-10-19 17:36:10","","0","","<p>Yes, it's possible. The ""how"" part depends on the GUI library you choose for which there are many options, but most people will recommend the following two: wxPython or PySide which is Qt for Python.</p>

<p>PySide has good documentation and <a href=""http://developer.qt.nokia.com/wiki/PySide_Tutorials_by_Experience_Level"" rel=""nofollow"">tutorials</a>.</p>

<p>What you will want to do is create a QMainWindow instance and set the WindowFlags to your requirements. You probably want the following combination <code>Qt::Window | Qt::CustomizeWindowHint | Qt::WindowStaysOnTopHint</code>.</p>

<p>Something like this: </p>

<pre><code>import sys
from PySide.QtCore import *
from PySide.QtGui import *

class Form(QMainWindow):

    def __init__(self, parent=None):
        super(Form, self).__init__(parent)
        self.setWindowFlags(Qt::Window | Qt::CustomizeWindowHint | Qt::WindowStaysOnTopHint)


if __name__ == '__main__':
    # Create the Qt Application
    app = QApplication(sys.argv)
    # Create and show the form
    form = Form()
    form.show()
    # Run the main Qt loop
    sys.exit(app.exec_())
</code></pre>

<p>Note, that there is a limit to the ""staying on top"" nature of such windows. There are Win32-specific ways to fight it and get even higher, but such requirement would be a design error. </p>
","140367","","","","","2011-10-19 17:36:10","","","","7","","",""
"7828399","2","","7825991","2011-10-19 21:29:16","","1","","<p><a href=""http://sikuli.org/"" rel=""nofollow noreferrer"">Sikuli</a> might be a perfect for this. It is based on Jython, thus can be extended with Python or Java tools.</p>

<blockquote>
  <p>Sikuli is a visual technology to automate and test graphical user
  interfaces (GUI) using images (screenshots). Sikuli includes Sikuli
  Script, a visual scripting API for Jython, and Sikuli IDE, an
  integrated development environment for writing visual scripts with
  screenshots easily.</p>
</blockquote>

<p><strong>Edit</strong></p>

<p>If the image is that well defined as in your example, that can be easily matched without much image processing. Here I used matplotlib (small image must be exact cropped version of large image).</p>

<p>Target image (65x173):</p>

<p><img src=""https://i.stack.imgur.com/QP2n0.png"" alt=""enter image description here""></p>

<p>Image to be matched (29x29):</p>

<p><img src=""https://i.stack.imgur.com/Wpy2L.png"" alt=""enter image description here""></p>

<pre><code>In [48]: import matplotlib.pyplot as pl

In [49]: target = pl.imread(""r.png"")

In [50]: match = pl.imread(""xx.png"")

In [51]: target.shape
Out[51]: (65, 173, 4)

In [52]: match.shape
Out[52]: (29, 29, 4)

In [53]: for y in range(2):
   ....:     for x in range(5):
   ....:         sub_x = 36*x
   ....:         sub_y = 36*y
   ....:         sub_target = target[sub_y:sub_y+29,sub_x:sub_x+29,:]
   ....:         if (match == sub_target).all():
   ....:             print ""Match found between (%d,%d) and (%d,%d)"" % (sub_x,sub_y,sub_x+29,sub_y+29)
   ....:
Match found between (72,0) and (101,29)
</code></pre>
","843822","","843822","","2011-10-20 04:09:32","2011-10-20 04:09:32","","","","6","","",""
"7995971","2","","7825991","2011-11-03 13:48:42","","0","","<p>I take it the images are always the same so the 6 is at the same offset and covered by the same  tag. Clicking the image at this point will follow the URL defined in the  href attribute. So follow that link.</p>
","105066","","","","","2011-11-03 13:48:42","","","","0","","",""
"7828775","2","","7828717","2011-10-19 22:02:46","","5","","<p>If you want your <code>New</code> class to use the instance of <code>Test</code> you created, you have to pass it in as part of the constructor.</p>

<p>new.py</p>

<pre><code>class New:
    def __init__(self, one):
        one.run()
</code></pre>

<p>test.py</p>

<pre><code>import new

class Test:
    def __init__(self):
        return
    def run(self):
        return 1


if __name__ == ""__main__"":
    one=Test()
    two = new.New(one);
</code></pre>

<p>Playing around with globals is a great way to break your code without realizing how you did it. It is better to explicitly pass in the reference you want to use.</p>
","210526","","210526","","2011-10-19 23:11:45","2011-10-19 23:11:45","","","","2","","",""
"7828784","2","","7828717","2011-10-19 22:03:42","","-1","","<p><code>one</code> is defined inside the <code>if __name__=='__main__'</code> block.
Consequently, <code>one</code> will get defined only if <code>test.py</code> is run as a script (rather than imported). </p>

<p>For the module <code>new</code> to access <code>one</code> from the <code>test</code> module, you'll need to pull <code>one</code> out of the <code>if __name__</code> block:</p>

<p><strong>test.py:</strong></p>

<pre><code>class Test:
    def __init__(self):
        return
    def run(self):
        return 1

one=Test()

if __name__ == ""__main__"":
    one.run()
</code></pre>

<p>Then access <code>one</code> by the qualified name <code>test.one</code>:</p>

<p><strong>new.py:</strong></p>

<pre><code>import test

class New:
    def __init__(self):
        test.one.run()

New()
</code></pre>
","190597","","","","","2011-10-19 22:03:42","","","","6","","",""
"7828789","2","","7828717","2011-10-19 22:04:28","","0","","<p>No, you can't. The closest you can get is to pass the thing you need in to the constructor:</p>

<pre><code>class New(object):
    def __init__(self, one):
        one.run()
</code></pre>
","391531","","","","","2011-10-19 22:04:28","","","","2","","",""
"7828896","2","","7828867","2011-10-19 22:17:39","","9","","<p>You can sort both:</p>

<pre><code>sorted(a) == sorted(b)
</code></pre>

<p>A <a href=""http://en.wikipedia.org/wiki/Counting_sort"">counting sort</a> could also be more efficient (but it requires the object to be hashable).</p>

<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = [1, 2, 3, 1, 2, 3]
&gt;&gt;&gt; b = [3, 2, 1, 3, 2, 1]
&gt;&gt;&gt; print (Counter(a) == Counter(b))
True
</code></pre>
","61974","","61974","","2011-10-19 22:27:10","2011-10-19 22:27:10","","","","5","","",""
"7828964","2","","7828867","2011-10-19 22:25:37","","4","","<p>The best way to do this is by sorting the lists and comparing them. (Using <code>Counter</code> won't work with objects that aren't hashable.) This is straightforward for integers:</p>

<pre><code>sorted(a) == sorted(b)
</code></pre>

<p>It gets a little trickier with arbitrary objects. If you care about object identity, i.e., whether the <em>same</em> objects are in both lists, you can use the <code>id()</code> function as the sort key.</p>

<pre><code>sorted(a, key=id) == sorted(b, key==id)
</code></pre>

<p>(In Python 2.x you don't actually need the <code>key=</code> parameter, because you can compare any object to any object. The ordering is arbitrary but stable, so it works fine for this purpose; it doesn't matter what order the objects are in, only that the ordering is the same for both lists. In Python 3, though, comparing objects of different types is disallowed in many circumstances -- for example, you can't compare strings to integers -- so if you will have objects of various types, best to explicitly use the object's ID.)</p>

<p>If you want to compare the objects in the list by <em>value,</em> on the other hand, first you need to define what ""value"" means for the objects. Then you will need some way to provide that as a key (and for Python 3, as a consistent type). One potential way that would work for a lot of arbitrary objects is to sort by their <code>repr()</code>. Of course, this could waste a lot of extra time and memory building <code>repr()</code> strings for large lists and so on.</p>

<pre><code>sorted(a, key=repr) == sorted(b, key==repr)
</code></pre>

<p>If the objects are all your own types, you can define <code>__lt__()</code> on them so that the object knows how to compare itself to others. Then you can just sort them and not worry about the <code>key=</code> parameter. Of course you could also define <code>__hash__()</code> and use <code>Counter</code>, which will be faster.</p>
","416467","","416467","","2011-10-19 22:31:17","2011-10-19 22:31:17","","","","0","","",""
"7829249","2","","7828867","2011-10-19 23:00:33","","9","","<p>If you know the items are always hashable, you can use a <code>Counter()</code> which is O(n)<br>
If you know the items are always sortable, you can use <code>sorted()</code> which is O(n log n)</p>

<p>In the general case you can't rely on being able to sort, or has the elements, so you need a fallback like this, which is unfortunately O(n^2)</p>

<pre><code>len(a)==len(b) and all(a.count(i)==b.count(i) for i in a)
</code></pre>
","174728","","","","","2011-10-19 23:00:33","","","","0","","",""
"7829388","2","","7828867","2011-10-19 23:20:37","","109","","<p><strong>O(n)</strong>:  The <em><a href=""https://docs.python.org/3.5/library/collections.html#collections.Counter"" rel=""noreferrer"">Counter()</a></em> method is best (if your objects are hashable):</p>

<pre><code>def compare(s, t):
    return Counter(s) == Counter(t)
</code></pre>

<p><strong>O(n log n)</strong>:  The <em><a href=""https://docs.python.org/3.5/library/functions.html#sorted"" rel=""noreferrer"">sorted()</a></em> method is next best (if your objects are orderable):</p>

<pre><code>def compare(s, t):
    return sorted(s) == sorted(t)
</code></pre>

<p><strong>O(n * n)</strong>: If the objects are neither hashable, nor orderable, you can use equality:</p>

<pre><code>def compare(s, t):
    t = list(t)   # make a mutable copy
    try:
        for elem in s:
            t.remove(elem)
    except ValueError:
        return False
    return not t
</code></pre>
","1001643","","2519319","","2016-08-24 08:17:09","2016-08-24 08:17:09","","","","8","","",""
"7829554","2","","7828867","2011-10-19 23:43:05","","0","","<p>Let a,b lists</p>

<pre><code>def ass_equal(a,b):
try:
    map(lambda x: a.pop(a.index(x)), b) # try to remove all the elements of b from a, on fail, throw exception
    if len(a) == 0: # if a is empty, means that b has removed them all
        return True 
except:
    return False # b failed to remove some items from a
</code></pre>

<p>No need to make them hashable or sort them.</p>
","825780","","","","","2011-10-19 23:43:05","","","","1","","",""
"28089750","2","","7828867","2015-01-22 13:17:13","","0","","<p>I hope the below piece of code might work in your case :- </p>

<pre><code>if ((len(a) == len(b)) and
   (all(i in a for i in b))):
    print 'True'
else:
    print 'False'
</code></pre>

<p>This will ensure that all the elements in both the lists <code>a</code> &amp; <code>b</code> are same, regardless of whether they are in same order or not.</p>

<p>For better understanding, refer to my answer in <a href=""https://stackoverflow.com/questions/9623114/python-are-two-lists-equal/28088925#28088925"">this question</a></p>
","4163116","","-1","","2017-05-23 12:09:37","2015-01-22 13:17:13","","","","0","","",""
"34694504","2","","7828867","2016-01-09 14:13:54","","0","","<p>If the comparison is to be performed in a testing context, use <a href=""https://docs.python.org/3.5/library/unittest.html#unittest.TestCase.assertCountEqual"" rel=""nofollow""><code>assertCountEqual(a, b)</code></a> (<code>py&gt;=3.2</code>) and <a href=""https://docs.python.org/2.7/library/unittest.html#unittest.TestCase.assertItemsEqual"" rel=""nofollow""><code>assertItemsEqual(a, b)</code></a> (<code>2.7&lt;=py&lt;3.2</code>).</p>

<p>Works on sequences of unhashable objects too.</p>
","4526633","","","","","2016-01-09 14:13:54","","","","0","","",""
"40016570","2","","7828867","2016-10-13 09:00:33","","0","","<p><a href=""https://docs.python.org/3.5/library/unittest.html#unittest.TestCase.assertCountEqual"" rel=""nofollow"">https://docs.python.org/3.5/library/unittest.html#unittest.TestCase.assertCountEqual</a></p>

<p>assertCountEqual(first, second, msg=None)</p>

<p>Test that sequence first contains the same elements as second, regardless of their order. When they don‚Äôt, an error message listing the differences between the sequences will be generated.</p>

<p>Duplicate elements are not ignored when comparing first and second. It verifies whether each element has the same count in both sequences. Equivalent to: assertEqual(Counter(list(first)), Counter(list(second))) but works with sequences of unhashable objects as well.</p>

<p>New in version 3.2. </p>

<p>or in 2.7:
<a href=""https://docs.python.org/2.7/library/unittest.html#unittest.TestCase.assertItemsEqual"" rel=""nofollow"">https://docs.python.org/2.7/library/unittest.html#unittest.TestCase.assertItemsEqual</a></p>
","674447","","","","","2016-10-13 09:00:33","","","","1","","",""
"41433671","2","","7828867","2017-01-02 21:45:17","","0","","<p>If the list contains items that are not hashable (such as a list of objects) you might be able to use the <a href=""https://docs.python.org/3.5/library/collections.html#collections.Counter%20%20%22Counter()%22%20class"" rel=""nofollow noreferrer"">Counter Class</a> and the id() function such as:</p>

<pre><code>from collections import Counter
...
if Counter(map(id,a)) == Counter(map(id,b)):
    print(""Lists a and b contain the same objects"")
</code></pre>
","7338573","","","","","2017-01-02 21:45:17","","","","0","","",""
"7829202","2","","7828891","2011-10-19 22:54:28","","2","","<p>To more precisely attack the problem, I suggest measuring the file read operation by making 'convertXYZ' a no-op function and timing the result.  And measuring the convert function, by changing the 'read' to always return a simple point, but calling the conversion and output the same number of times as if you were really reading the file.  (And probably another run where the final post-conversion output is a no-op.)  Depending on where the time is going, it may make a lot more sense to attack one or the other.</p>

<p>You might be able to get the local OS to do some interleaving for you by writing the output to the Python's stdout, and having the shell do the actual file IO.  And similarly by streaming the file into stdin (e.g., <code>cat oldformat | python conversion.py > outputfile</code>)</p>

<p>What sort of storage are the input and output files on?  The storage characteristics may have a lot more to do with the performance than the Python code.</p>

<p>Update: Given the output is the slowest, and your storage is pretty slow and shared between both reads and writes, try adding some buffering.  From <a href=""http://docs.python.org/library/functions.html#open"" rel=""nofollow"">the python doc</a> you should be able to add some buffering by adding a third argument to the <code>os.open</code> call.  Try something pretty large like 128*1024?</p>
","960524","","960524","","2011-10-20 00:16:07","2011-10-20 00:16:07","","","","4","","",""
"7831219","2","","7828891","2011-10-20 04:38:47","","0","","<p>Given that <code>formatString</code> is the slowest operation, try this:</p>

<pre><code>def formatString(data_list):
    return "" "".join((str(data_list[1]), str(data_list[2]), str(data_list[3])))
</code></pre>
","5987","","","","","2011-10-20 04:38:47","","","","1","","",""
"7833202","2","","7828891","2011-10-20 08:39:46","","0","","<p>2.1 GB of data should take between 21 (@ 100 MB/s) to 70 (@ 30 MB/s) seconds just to read. You're then formatting that into and writing data which is perhaps five times as large. This means a total of 13 GB to read and write requiring 130-420 seconds.</p>

<p>Your sampling shows that reading takes 24 seconds. Writing should therefore require about two minutes. The reading and writing times can be improved using an SSD for example.</p>

<p>When I convert files (using programs I write in C) I assume that a conversion should take no more time than it takes to read the data itself, a lot less is usually possible. Overlapped reads and writes can also reduce the I/O time. I write my own custom formatting routines since printf is usually far too slow.</p>

<p>How much is 24 seconds? On a modern CPU at least 40 billion instructions. That means that in that time you can process every single byte of data with at least 19 instructions. Easily doable for a C program but not for an interpreted language (Python, Java, C#, VB).</p>

<p>Your 525 second processing (549-24) remainder indicates that Python is spending at least 875 billion instructions processing or 415 instructions per byte of data read. That comes out to 22 to 1: a not uncommon ratio between interpreted and compiled languages. A well-constructed C program should be down around ten instructions per byte or less.</p>
","501673","","","","","2011-10-20 08:39:46","","","","0","","",""
"7829185","2","","7829007","2011-10-19 22:51:58","","1","","<p><strong>Update</strong>: The link I gave you below was to Python 3.0, my apologies I forgot your tag.</p>

<p>The 2.7 docs do not mention blank lines in values, so I suspect they are not supported at all.</p>

<p>See also this SO question (which looks like Python 3): <a href=""https://stackoverflow.com/questions/5984603/how-to-read-multiline-properties-file-in-python"">How to read multiline .properties file in python</a></p>

<hr>

<p>From the <a href=""http://docs.python.org/dev/library/configparser.html"" rel=""nofollow noreferrer"">documentation</a>:</p>

<blockquote>
  <p>Values can also span multiple lines, as long as they are indented
  deeper than the first line of the value. Depending on the parser‚Äôs
  mode, blank lines may be treated as parts of multiline values or
  ignored.</p>
</blockquote>

<p>I don't know what 'parser mode' this is referring to, but not sure if what you want is doable.</p>

<p>On the other hand, the docs also mention the <code>empty_lines_in_values</code> option, which seems to indicate that blank lines <strong>are</strong> supported.
Seems somewhat contradictory to me.</p>
","567650","","-1","","2017-05-23 12:12:02","2011-10-19 23:12:52","","","","2","","",""
"7829376","2","","7829007","2011-10-19 23:19:07","","0","","<p>One way to fix it is to modify the helper function to:</p>

<pre><code>def ConfigSectionMap(section):
    dict1 = {}
    options = Config.options(section)
    for option in options:
        try:
            dict1[option] = Config.get(section, option).replace('\\n', '')
            if dict1[option] == -1:
                DebugPrint(""skip: %s"" % option)
        except:
            print(""exception on %s!"" % option)
            dict1[option] = None
    return dict1
</code></pre>
","564514","","","","","2011-10-19 23:19:07","","","","0","","",""
"7829220","2","","7829188","2011-10-19 22:56:17","","4","","<p>In your simple example it is <strong>of course</strong> better to use <code>in</code>.</p>

<p><strong>However</strong>... in <a href=""https://stackoverflow.com/questions/598398/searching-a-list-of-objects-in-python"">the question you link to</a>, <code>in</code> <em>doesn't work</em> (at least not directly) because the OP does not want to find an object that is equal to something, but an object whose <strong>attribute <code>n</code></strong> is equal to something.</p>

<p>One <a href=""https://stackoverflow.com/questions/598398/searching-a-list-of-objects-in-python/598427#598427"">answer</a> <em>does</em> mention using <code>in</code> on a list comprehension, though I'm not sure why a generator expression wasn't used instead:</p>

<pre><code>if 5 in (data.n for data in myList):
    print ""Found it""
</code></pre>

<p>But this is hardly much of an improvement over the other approaches, such as this one using <code>any</code>:</p>

<pre><code>if any(data.n == 5 for data in myList):
    print ""Found it""
</code></pre>
","61974","","-1","","2017-05-23 12:02:56","2011-10-21 06:18:15","","","","2","","",""
"7829222","2","","7829188","2011-10-19 22:56:45","","2","","<p>the ""if x in thing:"" format is strongly preferred, not just because it takes less code, but it also works on other data types and is (to me) easier to read.</p>

<p>I'm not sure how it's implemented, but I'd expect it to be quite a lot more efficient on datatypes that are stored in a more searchable form. eg. sets or dictionary keys. </p>
","10285","","","","","2011-10-19 22:56:45","","","","2","","",""
"7829294","2","","7829188","2011-10-19 23:08:21","","1","","<p>The <code>if thing in somelist</code> is the preferred and fastest way.</p>

<p>Under-the-hood that use of the in-operator translates to <code>somelist.__contains__(thing)</code> whose implementation is equivalent to:  <code>any((x is thing or x == thing) for x in somelist)</code>.</p>

<p>Note the condition tests identity and then equality.</p>
","1001643","","","","","2011-10-19 23:08:21","","","","0","","",""
"7829336","2","","7829188","2011-10-19 23:13:25","","1","","<pre><code>for i in list
    if i == thingIAmLookingFor
        return True
</code></pre>

<p>The above is a terrible way to test whether an item exists in a collection. It <em>returns</em> <code>True</code> from the function, so if you need the test as part of some code you'd need to move this into a separate utility function, or add <code>thingWasFound = False</code> before the loop and set it to <code>True</code> in the if statement (and then break), either of which is several lines of boilerplate for what could be a simple expression.</p>

<p>Plus, if you just use <code>thingIAmLookingFor in list</code>, this <em>might</em> execute more efficiently by doing fewer Python level operations (it'll need to do the same operations, but maybe in C, as <code>list</code> is a builtin type). But even more importantly, if <code>list</code> is actually bound to some other collection like a set or a dictionary <code>thingIAmLookingFor in list</code> will use the hash lookup mechanism such types support and be <em>much</em> more efficient, while using a <code>for</code> loop will force Python to go through every item in turn.</p>

<p><strong>Obligatory post-script:</strong> <code>list</code> is a terrible name for a variable that contains a list as it shadows the <code>list</code> builtin, which can confuse you or anyone who reads your code. You're much better off naming it something that tells you something about what it <em>means</em>.</p>
","450128","","","","","2011-10-19 23:13:25","","","","0","","",""
"7829286","2","","7829200","2011-10-19 23:06:57","","1","","<p>You get into this situation when you've installed the package required to <em>run</em> a TurboGears app (<code>TurboGears2</code>), but not the one required to <em>develop</em> a TurboGears app (<code>tg.devtools</code>).</p>

<p>Running the following command while in your virtualenv should install the correct package:</p>

<pre class=""lang-none prettyprint-override""><code>easy_install -i http://www.turbogears.org/2.1/downloads/current/index tg.devtools
</code></pre>
","331137","","","","","2011-10-19 23:06:57","","","","1","","",""
"7829463","2","","7829212","2011-10-19 23:31:30","","1","","<p>You can use a normal array for a 2D Matrix. You need only give the length of the dimension to the function.</p>

<p>In the C file do something as that: 
(z is now an array of length N*N)</p>

<pre><code>int fc( int N, const double a[], const double b[], double z[] )
{
    for( int i = 0;  i &lt; N;  i++ ){
        for( int j = 0;  j &lt; N;  j ++ ){
            z[(i*N)+j] = somefunction(a[i],b[j]);
    }
    return N;
}
</code></pre>

<p>In Python you need to do the same, so you can use a 1D Array with N*N elements instead of an 2D Matrix.</p>

<p><strong>Update 3D case</strong></p>

<p>(z is now an array of length N*N*N)</p>

<pre><code>int fc( int N, const double a[], const double b[],const double c[], double z[] )
{
    for( int i = 0;  i &lt; N;  i++ ){
        for( int j = 0;  j &lt; N;  j ++ ){
           for( int k = 0;  k &lt; N;  k ++ ){
            z[((i*N)+j)*N+k] = somefunction(a[i],b[j],c[k]);
    }
    return N;
}
</code></pre>
","992460","","992460","","2011-10-20 15:50:19","2011-10-20 15:50:19","","","","1","","",""
"7829295","2","","7829279","2011-10-19 23:08:31","","4","","<p>Remove <code>PL</code> in your request URI:</p>

<pre><code>playlist_uri = ""http://gdata.youtube.com/feeds/api/playlists/CD939C4D974A5815""
</code></pre>

<p>I'm not sure <em>why</em> YouTube needs it to be in that format, but it needs to be.</p>

<p>You can also just do a <code>.replace('playlists/PL', 'playlists/')</code> on your string.</p>
","464744","","2073738","","2015-08-30 21:45:54","2015-08-30 21:45:54","","","","2","","",""
"7843535","2","","7829311","2011-10-20 23:40:01","","6","","<p>Since there was no such library I have written a small module myself, most code and logic is is from zipfile with the seek/reads translated to HTTP range requests.</p>

<p>Feel free to review and suggest improvements:</p>

<p>The code:</p>

<pre><code>""""""
Read remote ZIP files using HTTP range requests
""""""
import struct
import urllib2
import zlib
import cStringIO
from zipfile import ZipInfo, ZipExtFile, ZipInfo
from os.path import join, basename

# The code is mostly adatpted from the zipfile module
# NOTE: ZIP64 is not supported

# The ""end of central directory"" structure, magic number, size, and indices
# (section V.I in the format document)
structEndArchive = ""&lt;4s4H2LH""
stringEndArchive = ""PK\005\006""
sizeEndCentDir = struct.calcsize(structEndArchive)

_ECD_SIGNATURE = 0
_ECD_DISK_NUMBER = 1
_ECD_DISK_START = 2
_ECD_ENTRIES_THIS_DISK = 3
_ECD_ENTRIES_TOTAL = 4
_ECD_SIZE = 5
_ECD_OFFSET = 6
_ECD_COMMENT_SIZE = 7
# These last two indices are not part of the structure as defined in the
# spec, but they are used internally by this module as a convenience
_ECD_COMMENT = 8
_ECD_LOCATION = 9

# The ""central directory"" structure, magic number, size, and indices
# of entries in the structure (section V.F in the format document)
structCentralDir = ""&lt;4s4B4HL2L5H2L""
stringCentralDir = ""PK\001\002""
sizeCentralDir = struct.calcsize(structCentralDir)

# indexes of entries in the central directory structure
_CD_SIGNATURE = 0
_CD_CREATE_VERSION = 1
_CD_CREATE_SYSTEM = 2
_CD_EXTRACT_VERSION = 3
_CD_EXTRACT_SYSTEM = 4
_CD_FLAG_BITS = 5
_CD_COMPRESS_TYPE = 6
_CD_TIME = 7
_CD_DATE = 8
_CD_CRC = 9
_CD_COMPRESSED_SIZE = 10
_CD_UNCOMPRESSED_SIZE = 11
_CD_FILENAME_LENGTH = 12
_CD_EXTRA_FIELD_LENGTH = 13
_CD_COMMENT_LENGTH = 14
_CD_DISK_NUMBER_START = 15
_CD_INTERNAL_FILE_ATTRIBUTES = 16
_CD_EXTERNAL_FILE_ATTRIBUTES = 17
_CD_LOCAL_HEADER_OFFSET = 18

# The ""local file header"" structure, magic number, size, and indices
# (section V.A in the format document)
structFileHeader = ""&lt;4s2B4HL2L2H""
stringFileHeader = ""PK\003\004""
sizeFileHeader = struct.calcsize(structFileHeader)

_FH_SIGNATURE = 0
_FH_EXTRACT_VERSION = 1
_FH_EXTRACT_SYSTEM = 2
_FH_GENERAL_PURPOSE_FLAG_BITS = 3
_FH_COMPRESSION_METHOD = 4
_FH_LAST_MOD_TIME = 5
_FH_LAST_MOD_DATE = 6
_FH_CRC = 7
_FH_COMPRESSED_SIZE = 8
_FH_UNCOMPRESSED_SIZE = 9
_FH_FILENAME_LENGTH = 10
_FH_EXTRA_FIELD_LENGTH = 11


def _http_get_partial_data(url, start_range, end_range=None):
    req = urllib2.Request(url)
    range_header = ""bytes=%s"" % start_range
    if end_range is not None:
        range_header += ""-%s"" % end_range
    req.headers['Range'] = range_header
    f = urllib2.urlopen(req)    
    return f


def _EndRecData(url):
    """"""Return data from the ""End of Central Directory"" record, or None.

    The data is a list of the nine items in the ZIP ""End of central dir""
    record followed by a tenth item, the file seek offset of this record.""""""
    ECD = _http_get_partial_data(url, -sizeEndCentDir)
    content_range =  ECD.headers.get('Content-Range')
    filesize = int(content_range.split('/')[1]) if content_range and '/' in content_range else 0
    data = ECD.read()
    ECD.close() 
    if data[0:4] == stringEndArchive and data[-2:] == ""\000\000"":
        # the signature is correct and there's no comment, unpack structure
        endrec = struct.unpack(structEndArchive, data)
        endrec = list(endrec)

        # Append a blank comment and record start offset
        endrec.append("""")
        endrec.append(filesize - sizeEndCentDir)
        return endrec
    # Either this is not a ZIP file, or it is a ZIP file with an archive
    # comment.  Search the end of the file for the ""end of central directory""
    # record signature. The comment is the last item in the ZIP file and may be
    # up to 64K long.  It is assumed that the ""end of central directory"" magic
    # number does not appear in the comment.

    # Search by retrieving chunks of 256, 1k and 64k
    try_ranges = (1 &lt;&lt; 8, 1 &lt;&lt; 10, 1 &lt;&lt; 16)
    for check_range in try_ranges:
        ECD = _http_get_partial_data(url, -(check_range + sizeEndCentDir))      
        data = ECD.read()       
        content_range =  ECD.headers.get('Content-Range')       
        ECD.close()
        download_start = content_range.split('-')[0]
        start = data.rfind(stringEndArchive)        
        if start &gt;= 0:          
            # found the magic number; attempt to unpack and interpret
            recData = data[start:start+sizeEndCentDir]
            endrec = list(struct.unpack(structEndArchive, recData))
            commentSize = endrec[_ECD_COMMENT_SIZE] #as claimed by the zip file
            comment = data[start+sizeEndCentDir:start+sizeEndCentDir+commentSize]
            endrec.append(comment)
            endrec.append(download_start + start)           
            return endrec

    raise IOError


class HTTPZipFile:
    def __init__(self, url):
        self.url = url
        self.NameToInfo = {}    # Find file info given name
        self.filelist = []      # List of ZipInfo instances for archive
        self.pwd = None
        self.comment = ''
        self.debug = 0
        self._RealGetContents()     

    def _RealGetContents(self):
        """"""Read in the table of contents for the ZIP file.""""""
        try:
            endrec = _EndRecData(self.url)
        except IOError:
            raise BadZipfile(""File is not a zip file"")
        if not endrec:
            raise BadZipfile, ""File is not a zip file""
        if self.debug &gt; 1:
            print endrec
        size_cd = endrec[_ECD_SIZE]             # bytes in central directory
        offset_cd = endrec[_ECD_OFFSET]         # offset of central directory
        self.comment = endrec[_ECD_COMMENT]     # archive comment

        # ""concat"" is zero, unless zip was concatenated to another file
        concat = endrec[_ECD_LOCATION] - size_cd - offset_cd
        #if endrec[_ECD_SIGNATURE] == stringEndArchive64:
        #   # If Zip64 extension structures are present, account for them
        #   concat -= (sizeEndCentDir64 + sizeEndCentDir64Locator)

        if self.debug &gt; 2:
            inferred = concat + offset_cd
            print ""given, inferred, offset"", offset_cd, inferred, concat
        # self.start_dir:  Position of start of central directory
        self.start_dir = offset_cd + concat
        ECD = _http_get_partial_data(self.url, self.start_dir, self.start_dir+size_cd-1)
        data = ECD.read()
        ECD.close()
        fp = cStringIO.StringIO(data)               
        total = 0
        while total &lt; size_cd:
            centdir = fp.read(sizeCentralDir)
            if centdir[0:4] != stringCentralDir:
                raise BadZipfile, ""Bad magic number for central directory""
            centdir = struct.unpack(structCentralDir, centdir)
            if self.debug &gt; 2:
                print centdir
            filename = fp.read(centdir[_CD_FILENAME_LENGTH])
            # Create ZipInfo instance to store file information
            x = ZipInfo(filename)
            x.extra = fp.read(centdir[_CD_EXTRA_FIELD_LENGTH])
            x.comment = fp.read(centdir[_CD_COMMENT_LENGTH])
            x.header_offset = centdir[_CD_LOCAL_HEADER_OFFSET]
            (x.create_version, x.create_system, x.extract_version, x.reserved,
                x.flag_bits, x.compress_type, t, d,
                x.CRC, x.compress_size, x.file_size) = centdir[1:12]
            x.volume, x.internal_attr, x.external_attr = centdir[15:18]
            # Convert date/time code to (year, month, day, hour, min, sec)
            x._raw_time = t
            x.date_time = ( (d&gt;&gt;9)+1980, (d&gt;&gt;5)&amp;0xF, d&amp;0x1F,
                                     t&gt;&gt;11, (t&gt;&gt;5)&amp;0x3F, (t&amp;0x1F) * 2 )

            x._decodeExtra()
            x.header_offset = x.header_offset + concat
            x.filename = x._decodeFilename()
            self.filelist.append(x)
            self.NameToInfo[x.filename] = x

            # update total bytes read from central directory
            total = (total + sizeCentralDir + centdir[_CD_FILENAME_LENGTH]
                     + centdir[_CD_EXTRA_FIELD_LENGTH]
                     + centdir[_CD_COMMENT_LENGTH])

        if self.debug &gt; 2:
            print ""total"", total

    def namelist(self):
        """"""Return a list of file names in the archive.""""""
        l = []
        for data in self.filelist:
            l.append(data.filename)
        return l

    def infolist(self):
        """"""Return a list of class ZipInfo instances for files in the
        archive.""""""
        return self.filelist

    def printdir(self):
        """"""Print a table of contents for the zip file.""""""
        print ""%-46s %19s %12s"" % (""File Name"", ""Modified    "", ""Size"")
        for zinfo in self.filelist:
            date = ""%d-%02d-%02d %02d:%02d:%02d"" % zinfo.date_time[:6]
            print ""%-46s %s %12d"" % (zinfo.filename, date, zinfo.file_size)

    def getinfo(self, name):
        """"""Return the instance of ZipInfo given 'name'.""""""
        info = self.NameToInfo.get(name)
        if info is None:
            raise KeyError(
                'There is no item named %r in the archive' % name)

        return info         

    def open(self, name, pwd=None):
        """"""Return file-like object for 'name'.""""""
        if not self.url:
            raise RuntimeError, \
                  ""Attempt to read ZIP archive that was already closed""
        zinfo = self.getinfo(name)
        offset = zinfo.header_offset
        f = _http_get_partial_data(self.url, offset, offset+sizeFileHeader-1)
        fheader = f.read()
        f.close()

        fheader = struct.unpack(structFileHeader, fheader)
        offset += sizeFileHeader
        f = _http_get_partial_data(self.url, offset, offset+fheader[_FH_FILENAME_LENGTH]-1)
        fname = f.read()
        f.close()

        if fname != zinfo.orig_filename:
            raise BadZipfile, \
                      'File name in directory ""%s"" and header ""%s"" differ.' % (
                          zinfo.orig_filename, fname)

        is_encrypted = zinfo.flag_bits &amp; 0x1
        if is_encrypted:
            raise RuntimeError, ""File %s is encrypted, "" \
                  ""not supported."" % name

        offset += fheader[_FH_FILENAME_LENGTH]+fheader[_FH_EXTRA_FIELD_LENGTH]
        f = _http_get_partial_data(self.url, offset, offset+fheader[_FH_COMPRESSED_SIZE]-1)
        data = f.read()
        return ZipExtFile(cStringIO.StringIO(data), 'r', zinfo)


if __name__ == ""__main__"":
    # Some tests
    link=""http://dfn.dl.sourceforge.net/project/filezilla/FileZilla_Client/3.5.1/FileZilla_3.5.1_win32.zip""
    hzfile = HTTPZipFile(link)
    hzfile.printdir()
    for fname in ('GPL.html', 'resources/blukis/48x48/filter.png', 'resources/finished.wav'):
        source_name = join('FileZilla-3.5.1', fname)
        dest_fname = join('/tmp', basename(fname))
        print ""Extracing %s to %s"" % (source_name, dest_fname)
        with hzfile.open(source_name) as f:
            data = f.read()
            new_file = open(dest_fname, 'w')
            new_file.write(data)
            new_file.close()
</code></pre>
","401041","","","","","2011-10-20 23:40:01","","","","0","","",""
"7852229","2","","7829311","2011-10-21 16:11:38","","14","","<p>You can solve this a bit more generally with less code.  Essentially, create enough of a file-like object for ZipFile to use.  So you wind up with <code>z = ZipFile(HttpFile(url))</code> and it dynamically downloads just the portion needed.  The advantage with this is you write less code, and it applies to more than just zip files.  (In fact, I wonder if there is something like this already... I'm not finding it though.)</p>

<p>Using the same idea, you could also create a caching wrapper for HttpFile to avoid repeated downloads.</p>

<p>And here's the code: (note the lack of error-handling)</p>

<pre><code>#!/usr/bin/python
import urllib2

class HttpFile(object):
    def __init__(self, url):
        self.url = url
        self.offset = 0
        self._size = -1

    def size(self):
        if self._size &lt; 0:
            f = urllib2.urlopen(self.url)
            self._size = int(f.headers[""Content-length""])
        return self._size

    def read(self, count=-1):
        req = urllib2.Request(self.url)
        if count &lt; 0:
            end = self.size() - 1
        else:
            end = self.offset + count - 1
        req.headers['Range'] = ""bytes=%s-%s"" % (self.offset, end)
        f = urllib2.urlopen(req)
        data = f.read()
        # FIXME: should check that we got the range expected, etc.
        chunk = len(data)
        if count &gt;= 0:
            assert chunk == count
        self.offset += chunk
        return data

    def seek(self, offset, whence=0):
        if whence == 0:
            self.offset = offset
        elif whence == 1:
            self.offset += offset
        elif whence == 2:
            self.offset = self.size() + offset
        else:
            raise Exception(""Invalid whence"")

    def tell(self):
        return self.offset
</code></pre>
","100073","","","","","2011-10-21 16:11:38","","","","1","","",""
"7833642","2","","7833533","2011-10-20 09:15:03","","1","","<p>It's quite easy to do in Python:</p>

<pre><code>a = [3, 5, 7, 9]
b = [2, 3, 4, 5]
c = [2, 4, 6, 8]

a_ex, b_ex, c_ex = zip(*(
                        [elem if elem in col else None
                            for col in a, b, c] 
                                for elem in set(a).union(b, c)
                      ))
</code></pre>

<p>Seems the most direct if you're not worried about the speed.</p>

<p>I also just noticed my answer to <a href=""https://stackoverflow.com/questions/7689205/joining-multiple-iteratorars-by-a-key/7690207#7690207"">Joining multiple iteratorars by a key</a> sort of applies:</p>

<pre><code>def paditers(*args):
    iters = [iter(x) for x in args]

    this = [next(i) for i in iters]

    while True:
        try:
            key = min(i for i in this if i != None)
        except ValueError:
            break
        for i, val in enumerate(this):
            if val == key:
                yield val
                this[i] = next(iters[i], None)
            else:
                yield None

padded = list(paditers(a, b, c))
next_item = iter(padded).next
print zip(*((next_item(), next_item(), next_item()) 
         for _ in range(len(padded) // 3)))
</code></pre>

<p>You can adapt that if you need performance to scale linearly.</p>
","500584","","-1","","2017-05-23 12:19:57","2011-10-20 09:27:01","","","","4","","",""
"7835936","2","","7833668","2011-10-20 12:30:31","","0","","<p>If you do not want to change Primay key values or do not to add new objects to the table, which could be duplicate of the old info - then you need some kind of data which you can use as lookup parameters in your database. </p>

<p>If you have model which represents this data, then its really easy using </p>

<pre><code>m = Model.objects.get(somecolumn = somedata)
m.someothervalue = someotherdata
m.save()
</code></pre>

<p>But why include django in this anyway? If you have CSV table, then updating this info is really a case of writing queries. and programs like Excel and openoffice make this very easy. 
If you already have data in CSV format, then just open the data as spreadsheet and use excels/openoffice's Concactenate function to create update queries</p>

<pre><code>Update mytable set value1 = data1, value2 = data2 where somevalue = somedata;
</code></pre>

<p>If you used openoffice for this, then openoffice has this nifty Text to columns function (under data in program menu), which turns concactenated values into string. Then you can copypaste those strings into command prompt or phppgadmin and run.. and voila, you get updated data in your database.</p>

<p>Edit (In response to you comment.):</p>

<p>Look into this: <a href=""https://docs.djangoproject.com/en/dev/ref/models/querysets/#get-or-create"" rel=""nofollow"">https://docs.djangoproject.com/en/dev/ref/models/querysets/#get-or-create</a></p>

<p>If you want to use django for this, then use get_or_create. But you need to remember here, that if any of the parameters you use in get_or_create method have changed, then new object will be created. Thats why i said in the beginning of the post, that you need some kind of data, which will not change.</p>

<p>for example (taken from the link above)</p>

<pre><code>obj, created = Person.objects.get_or_create(first_name='John', last_name='Lennon',
                  defaults={'birthday': date(1940, 10, 9)})
</code></pre>

<p>will create new obj(Person) when used first time. But if used 2nd time and the date has changed, then new Person with same name and last name but new date will be created.</p>

<p>So to avoid this, you'll still need to do something like</p>

<pre><code>obj.someothervalue = someotherdata
obj.save()
</code></pre>

<p>if you want to have more control over the data, that could have been changed.</p>

<p>Alan.</p>
","153399","","153399","","2011-10-25 07:46:20","2011-10-25 07:46:20","","","","1","","",""
"7833781","2","","7833715","2011-10-20 09:25:59","","14","","<p>Since you are recursing through subdirectories, use <a href=""http://docs.python.org/library/os.html#os.walk"">os.walk</a>:</p>

<pre><code>import os

def scandirs(path):
    for root, dirs, files in os.walk(path):
        for currentFile in files:
            print ""processing file: "" + currentFile
            exts = ('.png', '.jpg')
            if any(currentFile.lower().endswith(ext) for ext in exts):
                os.remove(os.path.join(root, currentFile))
</code></pre>
","190597","","190597","","2015-11-05 14:03:56","2015-11-05 14:03:56","","","","3","","",""
"7833827","2","","7833715","2011-10-20 09:29:26","","1","","<p>If the program works and the speed is acceptable, I wouldn't change it.</p>

<p>Otherwise, you could try unutbu's answer.</p>

<p>Generally, I would leave away the </p>

<pre><code>png = ""png""
jpg = ""jpg""
</code></pre>

<p>stuff as I don't see any purpose in not using the strings directly.</p>

<p>And better test for "".png"" instead of ""png"".</p>

<p>An even better solution would be to define </p>

<pre><code>extensions = ('.png', '.jpg')
</code></pre>

<p>somewhere centally and use that in</p>

<pre><code>if any(currentFile.endswith(ext) for ext in extensions):
    os.remove(currentFile)
</code></pre>

<p>.</p>
","296974","","296974","","2011-10-20 09:35:25","2011-10-20 09:35:25","","","","0","","",""
"7833963","2","","7833807","2011-10-20 09:38:44","","32","","<p>The duration is equal to the number of frames divided by the framerate (frames per second):</p>

<pre><code>import wave
import contextlib
fname = '/tmp/test.wav'
with contextlib.closing(wave.open(fname,'r')) as f:
    frames = f.getnframes()
    rate = f.getframerate()
    duration = frames / float(rate)
    print(duration)
</code></pre>

<hr>

<p>Regarding @edwards' comment, here is some code to produce a 2-channel wave file:</p>

<pre><code>import math
import wave
import struct
FILENAME = ""/tmp/test.wav""
freq = 440.0
data_size = 40000
frate = 1000.0
amp = 64000.0
nchannels = 2
sampwidth = 2
framerate = int(frate)
nframes = data_size
comptype = ""NONE""
compname = ""not compressed""
data = [(math.sin(2 * math.pi * freq * (x / frate)),
        math.cos(2 * math.pi * freq * (x / frate))) for x in range(data_size)]
try:
    wav_file = wave.open(FILENAME, 'w')
    wav_file.setparams(
        (nchannels, sampwidth, framerate, nframes, comptype, compname))
    for values in data:
        for v in values:
            wav_file.writeframes(struct.pack('h', int(v * amp / 2)))
finally:
    wav_file.close()
</code></pre>

<p>If you play the resultant file in an audio player, you'll find that is 40 seconds in duration. If you run the code above it also computes the duration to be 40 seconds. So I believe the number of frames is not influenced by the number of channels and the formula above is correct. </p>
","190597","","674039","","2013-12-16 01:46:05","2013-12-16 01:46:05","","","","8","","",""
"7842081","2","","7833807","2011-10-20 20:50:44","","5","","<pre><code>import os
path=""c:\\windows\\system32\\loopymusic.wav""
f=open(path,""r"")

#read the ByteRate field from file (see the Microsoft RIFF WAVE file format)
#https://ccrma.stanford.edu/courses/422/projects/WaveFormat/
#ByteRate is located at the first 28th byte
f.seek(28)
a=f.read(4)

#convert string a into integer/longint value
#a is little endian, so proper conversion is required
byteRate=0
for i in range(4):
    byteRate=byteRate + ord(a[i])*pow(256,i)

#get the file size in bytes
fileSize=os.path.getsize(path)  

#the duration of the data, in milliseconds, is given by
ms=((fileSize-44)*1000)/byteRate

print ""File duration in miliseconds : "" % ms
print ""File duration in H,M,S,mS : "" % ms/(3600*1000) % "","" % ms/(60*1000) % "","" % ms/1000 % "","" ms%1000
print ""Actual sound data (in bytes) : "" % fileSize-44  
f.close()
</code></pre>
","975642","","1324","","2016-07-09 19:57:49","2016-07-09 19:57:49","","","","3","","",""
"35569519","2","","7833807","2016-02-23 05:25:47","","4","","<p>we can use ffmpeg to get the duration of any video or audio files.</p>

<p>To install ffmpeg follow this <a href=""https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu"" rel=""nofollow"">link</a></p>

<pre><code>import subprocess
import re

process = subprocess.Popen(['ffmpeg',  '-i', path_of_wav_file], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
stdout, stderr = process.communicate()
matches = re.search(r""Duration:\s{1}(?P&lt;hours&gt;\d+?):(?P&lt;minutes&gt;\d+?):(?P&lt;seconds&gt;\d+\.\d+?),"", stdout, re.DOTALL).groupdict()

print matches['hours']
print matches['minutes']
print matches['seconds']
</code></pre>
","5962110","","","","","2016-02-23 05:25:47","","","","0","","",""
"41617943","2","","7833807","2017-01-12 16:11:33","","0","","<p>A very simple method is to use pysoundfile, <a href=""https://github.com/bastibe/PySoundFile"" rel=""nofollow noreferrer"">https://github.com/bastibe/PySoundFile</a></p>

<p>Here's some example code of how to do this:</p>

<pre><code>import soundfile as sf
f = sf.SoundFile('447c040d.wav')
print('samples = {}'.format(len(f)))
print('sample rate = {}'.format(f.samplerate))
print('seconds = {}'.format(len(f) / f.samplerate))
</code></pre>

<p>The output for that particular file is:</p>

<pre><code>samples = 232569
sample rate = 16000
seconds = 14.5355625
</code></pre>

<p>This aligns with soxi:</p>

<pre><code>Input File     : '447c040d.wav'
Channels       : 1
Sample Rate    : 16000
Precision      : 16-bit
Duration       : 00:00:14.54 = 232569 samples ~ 1090.17 CDDA sectors
File Size      : 465k
Bit Rate       : 256k
Sample Encoding: 16-bit Signed Integer PCM
</code></pre>
","1249075","","1249075","","2017-03-15 02:56:32","2017-03-15 02:56:32","","","","0","","",""
"7835341","2","","7833831","2011-10-20 11:36:14","","3","","<p>If you must use a null modem, how about the built in serial line networking support?
Then you can just use normal network methods (psexec, file share, etc) methods to do the update.</p>
","588306","","","","","2011-10-20 11:36:14","","","","0","","",""
"7835687","2","","7833831","2011-10-20 12:06:54","","0","","<p>We've got a few testing laboratories in a similar situation-the labs make money for the company so no touching the ancient computers that run the tests under pain of death.  :-)</p>

<p>Anyway, <a href=""http://pyserial.sourceforge.net/"" rel=""nofollow"">pySerial</a> seems like it'd work for this application, maybe take a look at their <a href=""http://pyserial.sourceforge.net/examples.html#wxpython-examples"" rel=""nofollow"">wxPython examples</a> for some ideas on a GUI.</p>
","151744","","","","","2011-10-20 12:06:54","","","","0","","",""
"7835783","2","","7833831","2011-10-20 12:16:26","","0","","<p>I guess the answer is pretty simple if you are happy using VB6 and the other app is already VB6, then use it. </p>

<p>That will do whatever serial comms you require quite adequately. Remember though you may want to update the application you write to do the updating in which case you are back to using hyperterminal!</p>
","500974","","","","","2011-10-20 12:16:26","","","","0","","",""
"7849945","2","","7833831","2011-10-21 13:17:27","","2","","<h2>Network Method</h2>

<p>I would first get network cards installed in everything.  If you want something that you can just plugin and go, look for any card compatible with NE2000.  That card will work out of the box on Windows 3.11 and 95, no problem.  In particular, you can find the 3Com EtherLink II or the 3C509B for very cheap online.  It's an excellent card.  (The Google Shopping results list several for under $20.)</p>

<p>From there, just enable the Windows File/Print Sharing service over TCP/IP, and you're good to go!  After you've done this, you can remotely manage and upgrade these machines, saving you a lot of headache later on.</p>

<h2>Serial-Port Method</h2>

<p>Deanna's suggestion of using the serial port as a network device and transferring files normally will work as well.  However, there is a bit of setup involved, and it can be a hassle if you've never done it.  There are several other software options.  I recommend <a href=""http://rads.stackoverflow.com/amzn/click/B000E5RC16"" rel=""nofollow"">LapLink</a>.  It's fairly painless.</p>

<p>You could even go all-out and pickup a multi-port serial interface for fairly cheap these days, and manage these computers centrally.  RS232 is very robust and can go a long distance over the proper cabling.</p>

<p><strong>Networking over Ethernet is the way to go though.  If at all possible, choose that option.</strong></p>
","362536","","","","","2011-10-21 13:17:27","","","","0","","",""
"7834115","2","","7833919","2011-10-20 09:51:02","","4","","<p>This might do the trick:</p>

<pre><code>(?=[\w:])(\w*)(?::(\w*))?
</code></pre>

<p><code>(\w*)(?::(\w*))?</code> describes the structure you want, but it has a problem that it also matches empty string; thus we have to assure that there is at least one non-space character at the start (which will get matched by the greedy operators), and the lookahead at the start does it.</p>

<p>Edit: wrong paste :)</p>
","240443","","","","","2011-10-20 09:51:02","","","","2","","",""
"7834326","2","","7833919","2011-10-20 10:07:35","","0","","<pre><code>import re

print([m.groups() for m in re.finditer(
    r'''(?x)               # verbose mode
        (\w+)?             # match zero-or-more \w's
        (?: :|\s)          # match (non-groupingly) a colon or a space 
        (\w+ (?:\s|\Z))?   # match zero-or-more \w's followed by a space or EOL
        ''',
    'A :B C:D')])
</code></pre>

<p>yields</p>

<pre><code>[('A', None), (None, 'B '), ('C', 'D')]
</code></pre>
","190597","","190597","","2011-10-20 11:56:57","2011-10-20 11:56:57","","","","1","","",""
"7835084","2","","7834907","2011-10-20 11:13:27","","2","","<p>The following snippet should do what you want:</p>

<pre><code>import re
from xml.etree import ElementTree                                               

with open('films.xml') as f:                                                    
    xml = ElementTree.parse(f)                                                  

for t in xml.findall('.//{http://www.mediawiki.org/xml/export-0.5/}text'):
    print '===================='
    m = re.search(r'(?s).*?{{(Infobox film.*?)}}', t.text)
    if m:
        print m.group(1)
</code></pre>

<p>The regular expression there begins with <code>(?s)</code>, which turns on the <code>DOTALL</code> option, meaning that <code>.</code> matches newlines as well as any other character.  The two instances of <code>.*?</code> are non-greedy matches of any charcter - i.e. they will find the shortest stretch of zero or more characters until the rest of the expression can be matched.</p>
","223092","","223092","","2011-10-20 12:41:41","2011-10-20 12:41:41","","","","10","","",""
"7835497","2","","7834990","2011-10-20 11:50:03","","5","","<p>Not in the admin UI, but if you modify the URL, you can make the filtering criterion more complex.</p>

<p>For instance, now the URL (after you click on a filter) probably ends with something like</p>

<pre><code>?status__exact=a
</code></pre>

<p>You can change this to</p>

<pre><code>status__in=a%2Cm
</code></pre>

<p>in order to see both statuses <code>a</code> and <code>m</code>. The <code>%2C</code> encodes a comma.</p>
","17498","","","","","2011-10-20 11:50:03","","","","1","","",""
"29198828","2","","7834990","2015-03-22 19:25:28","","0","","<p>You can also add the following query to the URL of your list display page</p>

<pre><code>?my_field__gte=1&amp;myfield__lte=10
</code></pre>

<p>for numeric fields. That way you can have a ranged selection. 
Basically you can use any query you would also use in your code. </p>
","3461003","","","","","2015-03-22 19:25:28","","","","0","","",""
"34410509","2","","7834990","2015-12-22 07:25:24","","1","","<p>You can also add the following query to the URL of your list page.
in my case if i have multiple option.</p>

<pre><code>?bookingstatus__in=booked,refunded.
</code></pre>
","3640659","","","","","2015-12-22 07:25:24","","","","0","","",""
"7839576","2","","7835030","2011-10-20 17:10:20","","14","","<p>What you want is in the wsgi <a href=""http://www.python.org/dev/peps/pep-0333/#environ-variables"" rel=""nofollow noreferrer"">environ</a>, specifically <code>environ['REMOTE_ADDR']</code>. </p>

<p>However, if there is a proxy involved, then <code>REMOTE_ADDR</code> will be the address of the proxy, and the client address will be included (most likely) in <code>HTTP_X_FORWARDED_FOR</code>. </p>

<p>Here's a function that should do what you want, for most cases (all credit to <a href=""https://stackoverflow.com/questions/4581789/how-do-i-get-user-ip-address-in-django/5976065#5976065"">S√¶var</a>):</p>

<pre><code>def get_client_address(environ):
    try:
        return environ['HTTP_X_FORWARDED_FOR'].split(',')[-1].strip()
    except KeyError:
        return environ['REMOTE_ADDR']
</code></pre>

<hr>

<p>You can easily see what is included in the wsgi environ by writing a simple wsgi app and pointing a browser at it, for example:</p>

<pre><code>from eventlet import wsgi
import eventlet

from pprint import pformat

def show_env(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/plain')])
    return ['%s\r\n' % pformat(env)]

wsgi.server(eventlet.listen(('', 8090)), show_env)
</code></pre>

<hr>

<p>And combining the two ...</p>

<pre><code>from eventlet import wsgi
import eventlet

from pprint import pformat

def get_client_address(environ):
    try:
        return environ['HTTP_X_FORWARDED_FOR'].split(',')[-1].strip()
    except KeyError:
        return environ['REMOTE_ADDR']

def show_env(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/plain')])
    return ['%s\r\n\r\nClient Address: %s\r\n' % (pformat(env), get_client_address(env))]

wsgi.server(eventlet.listen(('', 8090)), show_env)
</code></pre>
","780220","","-1","","2017-05-23 11:54:37","2011-10-20 17:10:20","","","","2","","",""
"7840285","2","","7838241","2011-10-20 18:16:38","","1","","<p>For one, you could create a custom subclass of <code>GObject</code>, which provides some <a href=""http://www.pygtk.org/articles/subclassing-gobject/sub-classing-gobject-in-python.htm#d0e570"" rel=""nofollow"">custom signals</a>. The following example is a slightly adapted version of the one given in the linked article:</p>

<pre><code>import pygtk
pygtk.require('2.0')
import gobject

class Car(gobject.GObject):

    __gsignals__ = {
        'engine-started': (gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, ()),
        'engine-stopped': (gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, ()),
    }

    def __init__(self):
        gobject.GObject.__init__(self)
        self._state = 0

    def start(self):
        if not self._state:
            self._state = 1
            self.emit('engine-started')

    def stop(self):
        if self._state:
            self._state = 0
            self.emit('engine-stopped')


gobject.type_register(Car)

def kill_switch(c):
    def callback(*unused, **ignored):
        c.stop()
    return callback

def on_start(*unused, **ignored):
    print ""Started...""

def on_stop(*unused, **ignored):
    print ""Stopped...""

some_car = Car()
some_car.connect('engine-started', on_start)
some_car.connect('engine-started', kill_switch(some_car))
some_car.connect('engine-stopped', on_stop)
some_car.start()
</code></pre>

<p>Another approach would be to take advantage of one of the many event/signalling packages already on PyPI, for example:</p>

<ul>
<li><a href=""http://pypi.python.org/pypi/zope.event"" rel=""nofollow"">Zope Event</a></li>
<li><a href=""http://pypi.python.org/pypi/Louie"" rel=""nofollow"">Louie</a></li>
<li><a href=""http://pydispatcher.sourceforge.net/"" rel=""nofollow"">PyDispatcher</a></li>
<li><a href=""http://pypi.python.org/pypi/darts.util.events"" rel=""nofollow"">Darts Events</a></li>
<li><a href=""http://pypi.python.org/pypi/Trellis"" rel=""nofollow"">Trellis</a></li>
</ul>
","141081","","141081","","2011-10-20 18:30:00","2011-10-20 18:30:00","","","","0","","",""
"7840578","2","","7838241","2011-10-20 18:40:40","","1","","<p>GObjects don't have to be widgets. For example, your application class can be a GObject which defines signals that other widgets connect to.</p>

<p>Also, I don't think you understood the Shotwell design document correctly. It looks to me like their signalling system is 100% GObject signalling system, just with particular guarantees about the order in which signals are handled. As they say in their design document, such things are possible in plain GObject, but Vala makes it easier to code it their way.</p>
","172999","","","","","2011-10-20 18:40:40","","","","1","","",""
"7838328","2","","7838290","2011-10-20 15:26:49","","2","","<p>Don't use regular expression to parse XML/HTML. Use a proper parser like BeautifulSoup or lxml in python.</p>
","10751","","","","","2011-10-20 15:26:49","","","","0","","",""
"7838352","2","","7838290","2011-10-20 15:28:41","","2","","<p>Whenever you find yourself looking at XML data and thinking about regular expressions, you should stop and ask yourself why you aren't considering a real XML parser. The structure of XML makes it perfectly suited for a proper parser, and maddeningly frustrating for regular expressions.</p>

<p>If you <em>must</em> use regular expressions, the following should do. <em>Until your document changes</em>!</p>

<pre><code>import re
p = re.compile(""&lt;text&gt;(.*)&lt;h1&gt;"")
p.search(xml_text).group(1)
</code></pre>

<p><em>Spoiler: regular expressions might be appropriate if this is just a one-off problem that needs a quick and dirty solution. Or they  might be appropriate if you know the input data will be fairly static and can't tolerate the overhead of a parser.</em></p>
","979401","","979401","","2011-10-20 16:47:41","2011-10-20 16:47:41","","","","0","","",""
"7838395","2","","7838290","2011-10-20 15:31:09","","4","","<p>Use an XML parser to parse XML. Using <a href=""http://codespeak.net/lxml/"" rel=""nofollow"">lxml</a>:</p>

<pre><code>import lxml.etree as ET

content='''\
&lt;text&gt;
    The 40-Year-Old Virgin is a 2005 American buddy comedy
    film about a middle-aged man's journey to finally have sex.

    &lt;h1&gt;The plot&lt;/h1&gt;
    Andy Stitzer (Steve Carell) is the eponymous 40-year-old virgin.
    &lt;h1&gt;Cast&lt;/h1&gt;

    &lt;h1&gt;Soundtrack&lt;/h1&gt;

    &lt;h1&gt;External Links&lt;/h1&gt;
&lt;/text&gt;
'''

text=ET.fromstring(content)
print(text.text)
</code></pre>

<p>yields</p>

<pre><code>    The 40-Year-Old Virgin is a 2005 American buddy comedy
    film about a middle-aged man's journey to finally have sex.
</code></pre>
","190597","","","","","2011-10-20 15:31:09","","","","0","","",""
"7838410","2","","7838290","2011-10-20 15:31:52","","2","","<p>Here is how you could do this using <a href=""http://docs.python.org/library/xml.etree.elementtree.html"" rel=""nofollow""><code>ElementTree</code></a>:</p>

<pre><code>In [18]: import xml.etree.ElementTree as et

In [19]: t = et.parse('f.xml')

In [20]: print t.getroot().text.strip()
The 40-Year-Old Virgin is a 2005 American buddy comedy
    film about a middle-aged man's journey to finally have sex.
</code></pre>
","367273","","","","","2011-10-20 15:31:52","","","","0","","",""
"7838436","2","","7838290","2011-10-20 15:32:57","","1","","<p>Here is an example using <a href=""http://docs.python.org/library/xml.etree.elementtree.html"" rel=""nofollow"">xml.etree.ElementTree</a>:</p>

<pre><code>&gt;&gt;&gt; import xml.etree.ElementTree as ET
&gt;&gt;&gt; data = """"""&lt;text&gt;
...     The 40-Year-Old Virgin is a 2005 American buddy comedy
...     film about a middle-aged man's journey to finally have sex.
... 
...     &lt;h1&gt;The plot&lt;/h1&gt;
...     Andy Stitzer (Steve Carell) is the eponymous 40-year-old virgin.
...     &lt;h1&gt;Cast&lt;/h1&gt;
... 
...     &lt;h1&gt;Soundtrack&lt;/h1&gt;
... 
...     &lt;h1&gt;External Links&lt;/h1&gt;
... &lt;/text&gt;""""""
&gt;&gt;&gt; xml = ET.XML(data)
&gt;&gt;&gt; xml.text
""\n    The 40-Year-Old Virgin is a 2005 American buddy comedy\n    film about a middle-aged man's journey to finally have sex.\n\n    ""
&gt;&gt;&gt; xml.text.strip().replace('\n   ', '')
""The 40-Year-Old Virgin is a 2005 American buddy comedy film about a middle-aged man's journey to finally have sex.""
</code></pre>

<p>And there you go!</p>
","194311","","","","","2011-10-20 15:32:57","","","","0","","",""
"7841601","2","","7838356","2011-10-20 20:06:45","","4","","<p>Read this document:</p>

<p><a href=""http://docs.celeryproject.org/en/latest/internals/app-overview.html"" rel=""nofollow"">http://docs.celeryproject.org/en/latest/internals/app-overview.html</a></p>

<p>The <code>App</code> is an instance of the Celery library, you can subclass app to override almost any part and corner of how Celery behaves.</p>
","5577","","","","","2011-10-20 20:06:45","","","","1","","",""
"7841692","2","","7838401","2011-10-20 20:14:25","","0","","<p>Thanks Prusse,It works now - I have increased time limit from 1 to 200 on function queue(s) </p>
","246365","","","","","2011-10-20 20:14:25","","","","0","","",""
"7838636","2","","7838564","2011-10-20 15:49:15","","-1","","<p><a href=""http://docs.python.org/library/getpass.html"" rel=""nofollow"">You can use the <code>getpass</code> module.</a> This doesn't exactly answer the question because the getpass function doesn't output anything to the console except for the prompt. The reason for this is that it's an extra layer of security. If someone is watching over your shoulder, they won't be able to figure out how long your password is.</p>

<p>Here's an example of how to use it:</p>

<pre><code>from getpass import getpass
getpass('Enter your password: ')
</code></pre>

<p>This example will display ""Enter your password: "" and then you can type in your password.</p>
","9903","","","","","2011-10-20 15:49:15","","","","1","","",""
"7838660","2","","7838564","2011-10-20 15:51:41","","6","","<p>The <code>getpass</code> module is written in Python. You could easily modify it to do this. In fact, here is a modified version of <code>getpass.win_getpass()</code> that you could just paste into your code:</p>

<pre><code>import sys

def win_getpass(prompt='Password: ', stream=None):
    """"""Prompt for password with echo off, using Windows getch().""""""
    import msvcrt
    for c in prompt:
        msvcrt.putch(c)
    pw = """"
    while 1:
        c = msvcrt.getch()
        if c == '\r' or c == '\n':
            break
        if c == '\003':
            raise KeyboardInterrupt
        if c == '\b':
            pw = pw[:-1]
            msvcrt.putch('\b')
        else:
            pw = pw + c
            msvcrt.putch(""*"")
    msvcrt.putch('\r')
    msvcrt.putch('\n')
    return pw
</code></pre>

<p>You might want to reconsider this, however. The Linux way is better; even just knowing the number of characters in a password is a significant hint to someone who wants to crack it.</p>
","416467","","416467","","2011-10-20 16:24:17","2011-10-20 16:24:17","","","","1","","",""
"16670956","2","","7838564","2013-05-21 13:12:48","","4","","<p>kindall's answer is close, but it has issues with backspace not erasing the asterisks, as well as backspace being able to go back beyond the input prompt.</p>

<p>Try:</p>

<pre><code>def win_getpass(prompt='Password: ', stream=None):
    """"""Prompt for password with echo off, using Windows getch().""""""
    if sys.stdin is not sys.__stdin__:
        return fallback_getpass(prompt, stream)
    import msvcrt
    for c in prompt:
        msvcrt.putwch(c)
    pw = """"
    while 1:
        c = msvcrt.getwch()
        if c == '\r' or c == '\n':
            break
        if c == '\003':
            raise KeyboardInterrupt
        if c == '\b':
            if pw == '':
                pass
            else:
                pw = pw[:-1]
                msvcrt.putwch('\b')
                msvcrt.putwch("" "")
                msvcrt.putwch('\b')
        else:
            pw = pw + c
            msvcrt.putwch(""*"")
    msvcrt.putwch('\r')
    msvcrt.putwch('\n')
    return pw
</code></pre>

<p>Note mscvrt.putwch does not work with python 2.x, you need to use mscvrt.putch instead.</p>
","2305594","","5321779","","2015-09-10 15:15:56","2015-09-10 15:15:56","","","","0","","",""
"7878083","2","","7838606","2011-10-24 15:31:57","","0","","<p>The error message <code>ConfigParser.NoSectionError: No section: 'formatters'</code> suggests that it's not a missing file but a file with a missing section that you should be looking for.</p>
","418834","","","","","2011-10-24 15:31:57","","","","1","","",""
"7878766","2","","7838606","2011-10-24 16:27:17","","0","","<p>I had a similar problem but couldn't find a elegant fix so far. The 'hack' I use that got me trough, say my project is located in <code>'~/project/project_root'</code>, first in the .spec file:</p>

<pre><code>excluded_sources = TOC([x for x in a.pure if not x[0].startswith('project_root')])
</code></pre>

<p>Here a is the <code>Analysis</code> object, basically I remove all of my projects files from the <code>PYZ</code> so no import is passed there and the logger's relative paths won't be computed from there. After this, create a <code>Tree</code> object from the project.</p>

<pre><code>my_project_tree = Tree('~/project')
</code></pre>

<p>Then add this Tree to the list of TOC that is passed to COLLECT, so :</p>

<pre><code>COLLECT( exe,
           a.binaries,
           a.zipfiles,
           a.datas,
           my_project_tree,
           ....)
</code></pre>

<p>You should have your project folder added to the dist folder. The problem is that you'll end up distributing the pyc's of your project too, but couldn't find a better way so far. Very interested in the valid solution. </p>
","739489","","","","","2011-10-24 16:27:17","","","","6","","",""
"7887341","2","","7838606","2011-10-25 09:38:52","","9","","<p>Firstly, it might be wise to do a print config_file / os.path.exists(config_file) before reading it, so you can be sure where the file is and if python can find it. </p>

<p>As to actually accessing it, <code>os.path.split(__file__)</code> looks almost correct, but I'm not sure it works properly under pyinstaller - the proper way of packing files is to add them to the .spec file, pyinstaller will then load them at compile time and unpack them to $_MEIPASS2/ at run time. To get the _MEIPASS2 dir in packed-mode and use the local directory in unpacked (development) mode, I use this:</p>

<pre><code>def resource_path(relative):
    return os.path.join(
        os.environ.get(
            ""_MEIPASS2"",
            os.path.abspath(""."")
        ),
        relative
    )


# in development
&gt;&gt;&gt; resource_path(""logging.conf"")
""/home/shish/src/my_app/logging.conf""

# in deployment
&gt;&gt;&gt; resource_path(""logging.conf"")
""/tmp/_MEI34121/logging.conf""
</code></pre>
","982134","","","","","2011-10-25 09:38:52","","","","3","","",""
"7839447","2","","7838629","2011-10-20 16:58:17","","4","","<p>I've had some success using socket.io for asynchronous web stuff (comet). For Django in particular, I don't have any personal experience, but I found a nice article about combining <a href=""http://codysoyland.com/2011/feb/6/evented-django-part-one-socketio-and-gevent/"" rel=""nofollow"">Gevent, Socket.io, and Django</a>. Some other resources on Socket.io and Gevent can be found on my in a couple of my <a href=""http://blog.pythonisito.com/2011/07/gevent-zeromq-websockets-and-flot-ftw.html"" rel=""nofollow"">blog</a> <a href=""http://blog.pythonisito.com/2011/08/websockets-to-socketio.html"" rel=""nofollow"">articles</a> as well as a slideshare <a href=""http://www.slideshare.net/rick446/realtime-web-gevent-and-socketio"" rel=""nofollow"">presentation</a>.</p>
","89535","","","","","2011-10-20 16:58:17","","","","3","","",""
"7838935","2","","7838667","2011-10-20 16:11:33","","5","","<p>Unfortunately, no you can't. Google App Engine does not allow you to write files, and that is needed by SQLite.</p>

<p>Until recently, it had no support of SQL at all, preferring a home-grown solution (see the ""CAP theorem"" as for why). This motivated the creation of projects like ""Django-nonrel"" which is a version of Django that does not require a relational database.
Recently, they opened a beta service that proposes a MySQL database. But beware that it is fundamentally less reliable, and that it is probably going to be expensive.</p>

<p>EDIT: As Nick Johnson observed, this new service (Google Cloud SQL) is fundamentally less scalable, but not fundamentally less reliable.</p>
","696341","","696341","","2011-10-27 16:11:41","2011-10-27 16:11:41","","","","3","","",""
"7838875","2","","7838758","2011-10-20 16:07:20","","1","","<p>In Fedora python is already installed. Just run in the command line:</p>

<pre><code> python ./yourProgram.py
</code></pre>
","992460","","","","","2011-10-20 16:07:20","","","","4","","",""
"7838878","2","","7838758","2011-10-20 16:07:37","","6","","<p>Put </p>

<pre><code>#!/usr/bin/env python
</code></pre>

<p>at the top of your file. Then on the command line do </p>

<pre><code>$ chmod u+x your_python_file.py
</code></pre>

<p>(I use <code>$</code> to indicate a shell prompt, don't type that.) 
You can run the file with</p>

<pre><code>$ ./yourpythonfile.py
</code></pre>

<p>You can also just do</p>

<pre><code>$ python yourpythonfile.py
</code></pre>

<p>and don't need the <code>#!/usr....</code> or <code>$ chmod ...</code> stuff, but the first approach is the natural way to do things in unix.</p>
","346587","","346587","","2011-10-20 16:19:26","2011-10-20 16:19:26","","","","5","","",""
"7871059","2","","7839723","2011-10-24 03:31:32","","1","","<p>Set <code>index=False</code> on all properties that you don't need indexed (i.e., properties that you won't use in a query). This cuts down the number of index writes it takes to save an entity.</p>

<p>See <a href=""http://code.google.com/appengine/docs/python/datastore/queries.html#Introduction_to_Indexes"" rel=""nofollow"">http://code.google.com/appengine/docs/python/datastore/queries.html#Introduction_to_Indexes</a> for an explanation.</p>
","62288","","","","","2011-10-24 03:31:32","","","","0","","",""
"7884415","2","","7839723","2011-10-25 03:37:23","","1","","<p>Your first model has 13 indexed properties, while your second one has only 5. It shouldn't be surprising that the first takes more time - you can reduce it by setting properties as unindexed, as Dave suggests.</p>

<blockquote>
  <p>Does that mean we cannot expect GAE to perform insert on data with
  more than 10 properties or do I misunderstand anything?</p>
</blockquote>

<p>App Engine performs the insert just fine - you just have to be prepared for it to spend more time and cost more operations.</p>
","12030","","","","","2011-10-25 03:37:23","","","","0","","",""
"7839930","2","","7839786","2011-10-20 17:40:39","","9","","<p>Use <a href=""http://docs.python.org/library/multiprocessing.html"">multiprocessing</a> to start with.</p>

<p>If you need multiple CPU's, look at <a href=""http://celeryproject.org/"">celery</a>.</p>
","10661","","","","","2011-10-20 17:40:39","","","","4","","",""
"7840047","2","","7839786","2011-10-20 17:51:53","","16","","<p>Native objects don't get shared between processes (due to reference counting).  </p>

<p>Instead, you can pickle them and share them using unix domain sockets, mmap, zeromq, or an intermediary such a sqlite3 that is designed for concurrent accesses.</p>
","1001643","","","","","2011-10-20 17:51:53","","","","5","","",""
"7840185","2","","7839786","2011-10-20 18:06:16","","4","","<p><a href=""http://www.parallelpython.com/"" rel=""nofollow"">Parallel Python</a> might be worth a look, it works on Windows, OS X, and Linux (and I seem to recall I used it on a UltraSPARC Solaris 10 machine a while back).  I don't know if it works with PyPy, but it <a href=""http://www.parallelpython.com/component/option,com_smf/Itemid,29/topic,185.msg583#msg583"" rel=""nofollow"">does seem to work with Psyco</a>.</p>
","151744","","","","","2011-10-20 18:06:16","","","","0","","",""
"7843962","2","","7839786","2011-10-21 00:58:57","","6","","<p>Both <a href=""http://codespeak.net/execnet/"">execnet</a> and <a href=""http://packages.python.org/Pyro4/intro.html#what-can-you-use-it-for"">Pyro</a> mention <code>PyPy &lt;-&gt; CPython</code> communication. Other packages from Python Wiki's <a href=""http://wiki.python.org/moin/ParallelProcessing"">Parallel Processing</a> page are probably suitable too.</p>
","555569","","","","","2011-10-21 00:58:57","","","","0","","",""
"7843795","2","","7843786","2011-10-21 00:26:15","","3","","<p>It sounds like you're using Numpy. If so, the shape <code>(38845,)</code> means you have a 1-dimensional array, of size 38845.</p>
","253686","","","","","2011-10-21 00:26:15","","","","0","","",""
"7843805","2","","7843786","2011-10-21 00:28:47","","8","","<p>Python has tuples, which are like lists but of fixed size. A two-element tuple is <code>(a, b)</code>; a three-element one is <code>(a, b, c)</code>. However, <code>(a)</code> is just <code>a</code> in parentheses. To represent a one-element tuple, Python uses a slightly odd syntax of <code>(a,)</code>. So there is only one dimension, and you have a bunch of elements in that one dimension.</p>
","240443","","","","","2011-10-21 00:28:47","","","","0","","",""
"7843818","2","","7843786","2011-10-21 00:31:22","","1","","<p>It seems you're talking of a Numpy array.</p>

<p><code>shape</code> returns a tuple with the same size as the number of dimensions of the array. Each value of the tuple is the size of the array along the corresponding dimensions, or, as <a href=""http://www.scipy.org/Tentative_NumPy_Tutorial#head-62ef2d3c0a5b4b7d6fdc48e4a60fe48b1ffe5006"" rel=""nofollow"">the tutorial</a> says: </p>

<blockquote>
  <p>An array has a shape given by the number of elements along each axis.</p>
</blockquote>

<p>Here you have a 1D-array (as indicated with a 1-element tuple notation, with the coma (as @Amadan) said), and the size of the 1st (and only dimension) is 38845.
For example <code>(3,4)</code> would be a 2D-array of size 3 for the 1st dimension and 4 for the second.</p>

<p>You can check the documentation for <code>shape</code> here: <a href=""http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.shape.html"" rel=""nofollow"">http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.shape.html</a></p>
","372643","","372643","","2011-10-21 00:36:27","2011-10-21 00:36:27","","","","0","","",""
"7843917","2","","7843786","2011-10-21 00:51:17","","0","","<blockquote>
  <p>Just wondering why this ','.</p>
</blockquote>

<p>Because <code>(38845)</code> is the same thing as <code>38845</code>, but a tuple is expected here, not an int (since in general, your array could have multiple dimensions). <code>(38845,)</code> is a 1-tuple.</p>
","523612","","","","","2011-10-21 00:51:17","","","","0","","",""
"10064716","2","","7843891","2012-04-08 17:16:56","","0","","<p>A little bit late, but:</p>

<p>It is your responsibility to check if a feature is important or not - so you have to choose your features manually that they meet your application's requirements. The SVM tries to get the best result with the features you put in - it wouldn't make much sense to ignore given data just because the choice will get clearer (but maybe more wrong).</p>

<p>Only you can know which features are good, and which not. You have to find them by hand/brain.</p>
","1260229","","","","","2012-04-08 17:16:56","","","","0","","",""
"7844128","2","","7844118","2011-10-21 01:35:55","","118","","<p>You can use the str.split method.</p>

<pre><code>&gt;&gt;&gt; my_string = 'A,B,C,D,E'
&gt;&gt;&gt; my_list = my_string.split("","")
&gt;&gt;&gt; print my_list
['A', 'B', 'C', 'D', 'E']
</code></pre>

<p>If you want to convert it to a tuple, just</p>

<pre><code>&gt;&gt;&gt; print tuple(my_list)
('A', 'B', 'C', 'D', 'E')
</code></pre>

<p>If you are looking to append to a list, try this:</p>

<pre><code>&gt;&gt;&gt; my_list.append('F')
&gt;&gt;&gt; print my_list
['A', 'B', 'C', 'D', 'E', 'F']
</code></pre>
","197663","","197663","","2013-04-18 00:36:57","2013-04-18 00:36:57","","","","0","","",""
"7844141","2","","7844118","2011-10-21 01:39:08","","3","","<pre><code>&gt;&gt;&gt; some_string='A,B,C,D,E'
&gt;&gt;&gt; new_tuple= tuple(some_string.split(','))
&gt;&gt;&gt; new_tuple
('A', 'B', 'C', 'D', 'E')
</code></pre>
","1001643","","1415599","","2014-02-06 19:51:36","2014-02-06 19:51:36","","","","0","","",""
"31131547","2","","7844118","2015-06-30 06:54:47","","6","","<p>In the case of integers that are included at the string, if you want to avoid casting them to <code>int</code> individually you can do:</p>

<pre><code>mList = [int(e) if e.isdigit() else e for e in mStr.split(',')]
</code></pre>

<p>It is called <em>list comprehension</em>, and it is based on set builder notation.</p>

<p>ex: </p>

<pre><code>&gt;&gt;&gt; mStr = ""1,A,B,3,4""
&gt;&gt;&gt; mList = [int(e) if e.isdigit() else e for e in mStr.split(',')]
&gt;&gt;&gt; mList
&gt;&gt;&gt; [1,'A','B',3,4]
</code></pre>
","2324272","","","","","2015-06-30 06:54:47","","","","0","","",""
"7844222","2","","7844187","2011-10-21 01:57:49","","1","","<p>You could change your lines like this:</p>

<pre><code>Billy = Student(Tool('hammer'))
Tommy = Student(Tool('hammer'))
</code></pre>

<p>That'll produce a distinct instance of your Tool class for each instance of the Student class.  the trouble with your posted example code is that you haven't ""called the Tool into being"" (to use your words) more than once.</p>
","351031","","","","","2011-10-21 01:57:49","","","","0","","",""
"7844233","2","","7844187","2011-10-21 01:59:26","","1","","<p>Just call Tool('hammer') every time you want to create a new tool.</p>

<pre><code>h1 = Tool('hammer')
h2 = Tool('hammer')
Billy = Student(h1)
Tommy = Student(h2)
</code></pre>
","1001643","","1001643","","2011-10-21 02:04:44","2011-10-21 02:04:44","","","","0","","",""
"7844236","2","","7844187","2011-10-21 02:00:02","","3","","<p>You have to create new instances of the Tool for each Student.</p>

<pre><code>class Student(object):
    def __init__(self, tool):
        self.tool = tool

    def draw(self):
        if self.tool.broken != True:
            print ""I used my tool. Sweet.""
        else:
            print ""My tool is broken. Wah.""

class Tool(object):
    def __init__(self, name):
        self.name = name
        self.broken = False

    def break(self):
        print ""The %s busted."" % self.name
        self.broken = True

# Instead of instance, make it a callable that returns a new one
def Hammer():
    return Tool('hammer')

# Pass a new object, instead of the type
Billy = Student(Hammer())
Tommy = Student(Hammer())
</code></pre>
","115049","","","","","2011-10-21 02:00:02","","","","0","","",""
"7844281","2","","7844187","2011-10-21 02:11:04","","2","","<blockquote>
  <p>I'll try to be brief. Well.. I always try to be brief, but my level of success is pretty much random.randint(0, never). So yeah.</p>
</blockquote>

<p>Lol. You even failed to be brief about announcing that you will try to be brief.</p>

<p>First, we need to be clear about what ""called into being"" means. Presumably you want a new hammer every time <code>self.tool = object</code> happens. You don't want a new instance every time, for example, you access the tool attribute, or you'd always a get a new, presumably unbroken, hammer every time you check <code>self.tool.broken</code>.</p>

<p>A couple approaches.</p>

<p>One, give Tool a copy method that produces a new object that should equal the original object, but be a different instance. For example:</p>

<pre><code>class Tool:

    def __init__(self, kind):
        self.kind = kind
        self.broken = False

    def copy(self):
        result = Tool(self.kind)
        result.broken = self.broken
        return result
</code></pre>

<p>Then in Student's init you say</p>

<pre><code>    self.tool = tool.copy()
</code></pre>

<p>Option two, use a factory function.</p>

<pre><code>def makehammer():
    return Tool(hammer)

class Student:
    def __init__(self, factory):
        self.tool = factory()

Billy = Student(makehammer)
</code></pre>

<p>I can't think any way in Python that you can write the line <code>self.tool = object</code> and have object automagically make a copy, and I don't think you want to. One thing I like about Python is WYSIWYG. If you want magic use C++. I think it makes code hard to understand when you not only can't tell what a line of code is doing, you can't even tell it's doing <em>anything</em> special.</p>

<p>Note you can get even fancier with a factory <em>object</em>. For example:</p>

<pre><code>class RealisticFactory:
    def __init__(self, kind, failurerate):
        self.kind = kind
        self.failurerate = failurerate

    def make(self):
        result = Tool(self.kind)
        if random.random() &lt; self.failurerate:
            result.broken = True
        if (self.failurerate &lt; 0.01):
            self.failurerate += 0.0001
        return result

factory = RealisticFactory(hammer, 0.0007)
Billy = Student(factory.make)
Tommy = Student(factory.make) # Tommy's tool is slightly more likely to be broken
</code></pre>
","903928","","903928","","2011-10-21 02:37:18","2011-10-21 02:37:18","","","","0","","",""
"7845174","2","","7844187","2011-10-21 05:04:48","","0","","<p>Oh wait, I forgot, Python does have magic.</p>

<pre><code>class Student:
    def __setattr__(self, attr, value):
        if attr == 'tool':
            self.__dict__[attr] = value.copy()
        else:
            self.__dict__[attr] = value
</code></pre>

<p>But I still say you should use magic sparingly.</p>
","903928","","","","","2011-10-21 05:04:48","","","","1","","",""
"7864302","2","","7844187","2011-10-23 04:13:40","","0","","<p>After seeing the tenor of the answers here and remembering the Zen of Python, I'm going to answer my own dang question by saying, ""I probably should have just thought harder about it.""  </p>

<p>I will restate my own question as the answer.  Suppose I have this tiny program:</p>

<pre><code>class Item(object):
    def __init__(self):
        self.broken = False

    def smash(self):
        print ""This object broke.""
        self.broken = True

class Person(object):
    def __init__(self, holding):
        self.holding = holding

    def using(self):
        if self.holding.broken != True:
            print ""Pass.""
        else:
            print ""Fail.""

Foo = Person(Item())
Bar = Person(Item())

Foo.holding.smash()
Foo.using()
Bar.using()
</code></pre>

<p>The program will return ""Fail"" for Foo.using() and ""Pass"" for Bar.using().  Upon <em>actually thinking about what I'm doing</em>, ""Foo.holding = Item()"" and ""Bar.holding = Item()"" are clearly different instances.  I even ran this dumpy program to prove it worked as I surmised it did, and no surprises to you pros, it does.  So I withdraw my question on the basis that I <em>wasn't actually using my brain when I asked it</em>.  The funny thing is, with the program I've been working on, I was already doing it this way but assuming it was the wrong way to do it.  So thanks for humoring me.</p>
","","user890167","","","","2011-10-23 04:13:40","","","","0","","",""
"7845286","2","","7845274","2011-10-21 05:22:56","","0","","<p>Mostly in the source itself. There is almost no documentation on which can be used this way, and not all of them do anything useful.</p>
","20862","","","","","2011-10-21 05:22:56","","","","0","","",""
"7845288","2","","7845274","2011-10-21 05:23:12","","4","","<p>In the <a href=""http://docs.python.org/library/"" rel=""nofollow"">main Python documentation</a>, there is <a href=""http://docs.python.org/library/simplehttpserver.html"" rel=""nofollow"">a note at the bottom of the <code>SimpleHTTPServer</code> documentation</a>. Other modules such as <a href=""http://docs.python.org/library/pdb.html"" rel=""nofollow""><code>pdb</code></a> and <a href=""http://docs.python.org/library/timeit.html"" rel=""nofollow""><code>timeit</code></a> have similar notes.</p>
","200291","","","","","2011-10-21 05:23:12","","","","0","","",""
"7845405","2","","7845274","2011-10-21 05:43:18","","1","","<p>The overall <code>-m</code> command line feature is documented <a href=""http://docs.python.org/using/cmdline.html#cmdoption-unittest-discover-m"" rel=""nofollow"">here</a> and <a href=""http://docs.python.org/library/runpy.html#runpy.run_module"" rel=""nofollow"">here</a>.  You can use it for you own modules. As noted, for individual standard lib modules it's best to consult their source code.</p>
","145403","","","","","2011-10-21 05:43:18","","","","0","","",""
"7845599","2","","7845274","2011-10-21 06:09:35","","0","","<p>Try with:</p>

<pre><code>python2 -m SimpleHTTPServer
</code></pre>

<p>Or in Python 3:</p>

<pre><code>python -m http.server
</code></pre>
","1006524","","","","","2011-10-21 06:09:35","","","","0","","",""
"7849200","2","","7849077","2011-10-21 12:11:01","","3","","<p>The year 2008 was 366 days long, so don't reshape.</p>

<p>Have a look at <a href=""http://pytseries.sourceforge.net/"" rel=""nofollow"">scikits.timeseries</a>:</p>

<pre><code>import scikits.timeseries as ts

start_date = ts.Date('H', '2006-01-01 00:00')
end_date = ts.Date('H', '2010-12-31 18:00')
arr3d = ... # your 3D array [time, X, Y]

dates = ts.date_array(start_date=start_date, end_date=end_date, freq='H')[::6]
t = ts.time_series(arr3d, dates=dates)
# just make sure arr3d.shape[0] == len(dates) !
</code></pre>

<p>Now you can access the <code>t</code> data with day/month/year objects:</p>

<pre><code>t[np.logical_and(t.day == 1, t.month == 1)]
</code></pre>

<p>so for example:</p>

<pre><code>for day_of_year in xrange(1, 366):
    year = np.random.randint(2006, 2011)

    t[np.logical_and(t.day_of_year == day_of_year, t.year == year)]
    # returns a [4, X, Y] array with data from that day
</code></pre>

<p>Play with the attributes of <code>t</code> to make it work with leap years too.</p>
","449449","","449449","","2011-10-21 12:42:40","2011-10-21 12:42:40","","","","2","","",""
"7849448","2","","7849077","2011-10-21 12:34:12","","0","","<p>I don't see a real need to reshape the array, since you can embed the year-size information in your sampling process, and leave the array with its original shape.</p>

<p>For example, you can generate a random offset (from 0 to 365), and pick the slice with index, say, <code>n*365 + offset</code>.</p>

<p>Anyway, I don't think your question is complete, because I didn't quite understand what you need to do, or why.</p>
","401828","","","","","2011-10-21 12:34:12","","","","1","","",""
"7854400","2","","7849117","2011-10-21 19:34:42","","1","","<p>Source: <a href=""http://code.activestate.com/recipes/215418-watching-a-directory-tree-on-unix/"" rel=""nofollow"">http://code.activestate.com/recipes/215418-watching-a-directory-tree-on-unix/</a></p>

<p>The watch_directories() function takes a list of paths and a callable object, and then repeatedly traverses the directory trees rooted at those paths, watching for files that get deleted or have their modification time changed. The callable object is then passed two lists containing the files that have changed and the files that have been removed.</p>

<pre><code>from __future__ import nested_scopes

import os, time

def watch_directories (paths, func, delay=1.0):
    """"""(paths:[str], func:callable, delay:float)
    Continuously monitors the paths and their subdirectories
    for changes.  If any files or directories are modified,
    the callable 'func' is called with a list of the modified paths of both
    files and directories.  'func' can return a Boolean value
    for rescanning; if it returns True, the directory tree will be
    rescanned without calling func() for any found changes.
    (This is so func() can write changes into the tree and prevent itself
    from being immediately called again.)
    """"""

    # Basic principle: all_files is a dictionary mapping paths to
    # modification times.  We repeatedly crawl through the directory
    # tree rooted at 'path', doing a stat() on each file and comparing
    # the modification time.  

    all_files = {}
    def f (unused, dirname, files):
        # Traversal function for directories
        for filename in files:
            path = os.path.join(dirname, filename)

            try:
                t = os.stat(path)
            except os.error:
                # If a file has been deleted between os.path.walk()
                # scanning the directory and now, we'll get an
                # os.error here.  Just ignore it -- we'll report
                # the deletion on the next pass through the main loop.
                continue

            mtime = remaining_files.get(path)
            if mtime is not None:
                # Record this file as having been seen
                del remaining_files[path]
                # File's mtime has been changed since we last looked at it.
                if t.st_mtime &gt; mtime:
                    changed_list.append(path)
            else:
                # No recorded modification time, so it must be
                # a brand new file.
                changed_list.append(path)

            # Record current mtime of file.
            all_files[path] = t.st_mtime

    # Main loop
    rescan = False
    while True:
        changed_list = []
        remaining_files = all_files.copy()
        all_files = {}
        for path in paths:
            os.path.walk(path, f, None)
        removed_list = remaining_files.keys()
        if rescan:
            rescan = False
        elif changed_list or removed_list:
            rescan = func(changed_list, removed_list)

        time.sleep(delay)

if __name__ == '__main__':
    def f (changed_files, removed_files):
        print changed_files
        print 'Removed', removed_files

    watch_directories(['.'], f, 1)
</code></pre>

<p>This recipe is useful where you'd like some way to send jobs to a daemon, but don't want to use some IPC mechanism such as sockets or pipes. Instead, the daemon can sit and watch a submission directory, and jobs can be submitted by dropping a file or directory into the submission directory.</p>

<p>Locking is not taken into account. The watch_directories() function itself doesn't really need to do locking; if it misses a modification on one pass, it'll notice it on the next pass. However, if jobs are written directly into a watched directory, the callable object might start running while a job file is only half-written. To solve this, you can use a lockfile; the callable must acquire the lock when it runs, and submitters must acquire the lock when they wish to add a new job. A simpler approach is to rely on the rename() system call being atomic: write the job into a temporary directory that isn't being watched, and once the file is complete use os.rename() to move it into the submission directory.</p>
","914641","","807423","","2014-05-31 08:38:19","2014-05-31 08:38:19","","","","0","","",""
"7877517","2","","7849145","2011-10-24 14:50:45","","1","","<p>You already have the proper 'Jo√£o', methinks. The difference between <code>&gt;&gt;&gt; 'Jo\xc3\xa3o'</code> and <code>&gt;&gt;&gt; print 'Jo\xc3\xa3o'</code> is that the former calls <code>repr</code> on the object, while the latter calls <code>str</code> (or probably <code>unicode</code>, in your case). It's just how the string is represented.</p>

<p>Some examples might make this more clear:</p>

<pre><code>&gt;&gt;&gt; print 'Jo\xc3\xa3o'.decode('utf-8')
Jo√£o
&gt;&gt;&gt; 'Jo\xc3\xa3o'.decode('utf-8')
u'Jo\xe3o'
&gt;&gt;&gt; print repr('Jo\xc3\xa3o'.decode('utf-8'))
u'Jo\xe3o'
</code></pre>

<p>Notice how the second and third result are identical. The original <code>ldap_username</code> currently is an ASCII string. You can see this on the Python prompt: when it is displaying an ACSII object, it shows as <code>'ASCII string'</code>, while Unicode objects are shown as <code>u'Unicode string'</code> -- the key being the leading <code>u</code>.</p>

<p>So, as your <code>ldap_username</code> reads as <code>'Jo\xc3\xa3o'</code>, and is an ASCII string, the following applies:</p>

<pre><code>&gt;&gt;&gt; 'Jo\xc3\xa3o'.decode('utf-8')
u'Jo\xe3o'
&gt;&gt;&gt; print 'Jo\xc3\xa3o'.decode('utf-8') # To Unicode...
Jo√£o
&gt;&gt;&gt; u'Jo√£o'.encode('utf-8')             # ... back to ASCII
'Jo\xc3\xa3o'
</code></pre>

<p>Summed up: you need to determine the type of the string (use <code>type</code> when unsure), and based on that, decode to Unicode, or encode to ASCII.</p>
","991521","","991521","","2011-10-24 17:40:18","2011-10-24 17:40:18","","","","6","","",""
"7849859","2","","7849169","2011-10-21 13:11:08","","0","","<p>It turns out the best way round it was:</p>

<pre><code>class FileAlarmForm(ModelForm):

    def __init__(self,file,*args,**kwargs):
        super(FileAlarmForm, self).__init__(*args, **kwargs)
        p = Product.objects.get(id=file.product_id)
        self.fields['alarm_type'].widget = Select(attrs={'onchange':'updateAlarmImage'})
        self.fields['alarm_type'].queryset = Alarm.objects.filter(product=p)
</code></pre>
","563247","","","","","2011-10-21 13:11:08","","","","0","","",""
"7850960","2","","7850908","2011-10-21 14:31:59","","24","","<p>You don't have to set either of them.  PYTHONPATH can be set to point to additional directories with private libraries in them.  If PYTHONHOME is not set, Python defaults to using the directory where python.exe was found, so that dir should be in PATH.</p>
","235698","","627492","","2017-04-05 20:59:35","2017-04-05 20:59:35","","","","4","","",""
"7851585","2","","7850908","2011-10-21 15:21:10","","17","","<p>For most installations, you should not set these variables since they are not needed for Python to run.  Python knows where to find its standard library.</p>

<p>The only reason to set PYTHONPATH is to maintain directories of custom Python libraries that you do not want to install in the global default location (i.e., the <code>site-packages</code> directory).</p>

<p>Make sure to read: <a href=""http://docs.python.org/using/cmdline.html#environment-variables"">http://docs.python.org/using/cmdline.html#environment-variables</a></p>
","34855","","","","","2011-10-21 15:21:10","","","","0","","",""
"7932112","2","","7854945","2011-10-28 16:32:55","","1","","<p>Supervisor supports options to set permissions on the Unix domain socket.</p>

<p><a href=""http://supervisord.org/configuration.html#unix-http-server-section-example"" rel=""nofollow"">http://supervisord.org/configuration.html#unix-http-server-section-example</a></p>

<p>I don't know the details but you should be able to call the xmlrpc interface over UNIX domain socket the same way that supervisorctl.py does.  It's calling options.getServerProxy() to get an xmlrpclib.ServerProxy object.</p>

<p><a href=""https://github.com/Supervisor/supervisor/blob/master/supervisor/supervisorctl.py#L188"" rel=""nofollow"">https://github.com/Supervisor/supervisor/blob/master/supervisor/supervisorctl.py#L188</a></p>
","925889","","","","","2011-10-28 16:32:55","","","","0","","",""
"7855122","2","","7855099","2011-10-21 20:48:50","","2","","<ul>
<li><code>get_by__id()</code></li>
<li>no change; it's still a key whether it has an ID or a name</li>
<li><code>key().id()</code> </li>
</ul>
","110707","","","","","2011-10-21 20:48:50","","","","0","","",""
"40452621","2","","7855229","2016-11-06 17:57:35","","2","","<p>To create the plot you want, we need to use matplotlib's <code>plot_surface</code> to plot <code>Z</code> vs <code>(X,Y)</code> surface, and then use the keyword argument <code>facecolors</code> to pass in a new color for each patch.</p>

<pre><code>import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm

# create some fake data
x = y = np.arange(-4.0, 4.0, 0.02)
# here are the x,y and respective z values
X, Y = np.meshgrid(x, y)
Z = np.sinc(np.sqrt(X*X+Y*Y))
# this is the value to use for the color
V = np.sin(Y)

# create the figure, add a 3d axis, set the viewing angle
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.view_init(45,60)

# here we create the surface plot, but pass V through a colormap
# to create a different color for each patch
ax.plot_surface(X, Y, Z, facecolors=cm.Oranges(V))
</code></pre>

<p><a href=""https://i.stack.imgur.com/Fb12y.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Fb12y.png"" alt=""enter image description here""></a></p>
","5003756","","","","","2016-11-06 17:57:35","","","","0","","",""
"7865558","2","","7855235","2011-10-23 10:21:32","","6","","<p>You can use @ee_vin's answer to do this. However, in this situation, why not create two handlers? It's much simpler:</p>

<pre><code>class OneHandler():
   def get(self):
       #only for the first url

class TwoHandler():
   def post(self):
       #only for the second url

handlers = [
   (r""/url1"",OneHandler), #only GET are allowed
   (r""/url2"",TwoHandler), #only POST are allowed
]
</code></pre>

<p>Anyone posting to the first URL or GETting the second would get a method not supported error.</p>
","751070","","751070","","2012-09-30 01:46:45","2012-09-30 01:46:45","","","","1","","",""
"8017058","2","","7855235","2011-11-04 23:50:54","","2","","<p>One way to achieve what you want to do is to use regex in your url and check for the attribute in your methods handler.</p>

<p>Example of urls to map</p>

<pre><code>url_patterns = [
    # here we want to map url1 url2 and url
    (r""/url([1|2])/"", OneAndTwoHandler),
]
</code></pre>

<p>And an example of the corresponding handler</p>

<pre><code>class OneAndTwoHandler(CustomRequestHandler):
    def get(self, my_param, *args, **kwargs):
        if my_param == '2':
            raise HTTPError(405)
        # code for only the first url here...

    def post(self, entry, *args, **kwargs):
        if my_param == '1':
            raise HTTPError(405)
        # code for only the first url here...
</code></pre>

<p>I would map 'my_param' options to a dictionary to keep things clear and to avoid me to dive into the handler if I need to change these values or if I want to add new urls.</p>

<pre><code>my_dict_urls = {
    'get': (1,2,3,4),
    'post': (3,5)
}

if int(my_param) not in my_dict_urls.get('get'):
    # ...
</code></pre>
","155144","","155144","","2011-11-05 00:14:04","2011-11-05 00:14:04","","","","0","","",""
"7855326","2","","7855237","2011-10-21 21:12:57","","5","","<p>It's possible that the helper function better fits in at the module level rather than the class.</p>

<p>If you don't agree that this is the case, there is a <a href=""http://docs.python.org/library/functions.html#staticmethod"" rel=""noreferrer"">staticmethod decorator</a> that you can use on functions inside of the class. Simply put, a static method behaves the same between object instantiations of the same class. It does not rely on instance data.</p>

<p>For this reason, the <code>staticmethod</code> decorator renders behavior on the function such that it does not take an implicit first argument (typically <code>self</code>) as stated in the documentation).</p>
","906469","","","","","2011-10-21 21:12:57","","","","4","","",""
"7855829","2","","7855237","2011-10-21 22:07:55","","41","","<p>When deciding where to put helper functions the question I ask is, ""Is it only for this class?""  If it can help in other places, then it goes at the module level; if it is indeed only for this class, then it goes in the class with either <code>staticmethod</code> (needs no class data to do its job) or <code>classmethod</code> (uses some class, but not instance, data to do its job).</p>

<p>Another python code checker is <a href=""http://pypi.python.org/pypi/pyflakes"" rel=""noreferrer"">pyflakes</a>.</p>
","208880","","","","","2011-10-21 22:07:55","","","","0","","",""
"7855379","2","","7855293","2011-10-21 21:18:31","","0","","<p>It <em>will</em> get serious. See <a href=""http://www.python.org/dev/peps/pep-0004/"" rel=""nofollow"">PEP 4</a> for the details. But <code>DeprecationWarning</code>s tell you that some functionality is about to change in the next Python version.</p>
","383793","","","","","2011-10-21 21:18:31","","","","3","","",""
"7855701","2","","7855293","2011-10-21 21:53:12","","2","","<p>No worries.  The warning is about something in the standard library that was already fixed in Python 2.7.  You can safely ignore it :-)</p>

<p>The <em>sets.py</em> is part of the standard library.  Line 85 is just a warning that the sets module is deprecated in favor of the <em>set()</em> builtin method but that won't disappear until Python3.0.</p>
","1001643","","","","","2011-10-21 21:53:12","","","","0","","",""
"7857201","2","","7855343","2011-10-22 03:26:19","","23","","<p>Gunicorn has 3 gevent workers:</p>

<ul>
<li>-k gevent   (using gunicorn's HTTP parser)</li>
<li>-k gevent_pywsgi   (using gevent.pywsgi module)</li>
<li>-k gevent_wsgi     (using gevent.wsgi module)</li>
</ul>

<p>gevent.wsgi is a fast HTTP server based on libevent.</p>

<p>gevent.pywsgi is WSGI server implemented in Python.</p>

<p>The reason for existence of gevent.pywsgi is libevent-http having a <a href=""http://gevent.org/servers.html"" rel=""noreferrer"">few limitations</a>, such as not supporting keep-alive, streaming, ssl and websockets.</p>

<p>Note, that the new <a href=""http://code.google.com/p/gevent/downloads/list"" rel=""noreferrer"">alpha version (1.0a3) of gevent</a> uses <a href=""http://blog.gevent.org/2011/04/28/libev-and-libevent/"" rel=""noreferrer"">libev</a> and does not  include a WSGI server based on libevent-http. Currently, gevent.wsgi here is an alias for gevent.pywsgi.</p>

<p>The server classes in gevent don't have any features related to process management, restart, reload and so on. Those features are necessary for deployment though. Gunicorn provides that for gevent's WSGI servers. Use it.</p>
","197910","","","","","2011-10-22 03:26:19","","","","0","","",""
"7855729","2","","7855534","2011-10-21 21:56:30","","2","","<p>Define a helper function and pass the object method and its arguments to that function via <code>Pool.map</code>. The helper function would look something like this:</p>

<pre><code>def helper(*args):
    return args[0](*args[1:])
</code></pre>

<p>And you would use it like this:</p>

<pre><code>pool = Pool()
results = pool.map(helper, [obj.method, arg1, arg2])
</code></pre>

<p>Note that the helper function must be directly importable from its containing module.</p>
","984421","","","","","2011-10-21 21:56:30","","","","0","","",""
"7856877","2","","7856843","2011-10-22 01:41:49","","3","","<p><code>AttributeError</code> indicates that you attempted to access a property or method on an object that was not defined in the object's class definition.</p>

<p>It just seems like you have not progressed far enough in the tutorial code to have defined the <code>Worm.move()</code> method.  It occurs at line 43 of the tutorial, just before <code>Worm.draw()</code>.  You are headed for another <code>AttributeError</code> on the <code>draw()</code> method, as you've not yet defined that one either. Just add both of these to the <code>Worm</code> class definition.</p>

<pre><code> 43     def move(self):
 44         """""" Move the worm. """"""
 45         self.x += self.vx
 46         self.y += self.vy
 47 
 48         if (self.x, self.y) in self.body:
 49             self.crashed = True
 50 
 51         self.body.insert(0, (self.x, self.y))
 52 
 53         if (self.grow_to &gt; self.length):
 54             self.length += 1
 55 
 56         if len(self.body) &gt; self.length:
 57             self.body.pop()
 58
 59     def draw(self):
 60         #for x, y in self.body:
 61         #    self.surface.set_at((x, y), self.color)
 62         x, y = self.body[0]
 63         self.surface.set_at((x, y), self.color)
 64         x, y = self.body[-1]
 65         self.surface.set_at((x, y), (0, 0, 0))
</code></pre>

<p><strong>Update</strong></p>

<p>You're now receiving the <code>AttributeError</code> on <code>Worm.vx</code>  because you're missing that property (also <code>vy</code>) from <code>Worm.__init__()</code>. Compare your code to the code under the heading <strong>The improved game</strong> on the tutorial page. When you encounter further errors, compare your class definition to the tutorial's.</p>

<p>Add to <code>__init__()</code></p>

<pre><code>def __init__(self, surface):
    ...
    ...
    self.vx = 0
    self.vy = -1
    ...
    ...
</code></pre>
","541091","","541091","","2011-10-22 02:09:22","2011-10-22 02:09:22","","","","5","","",""
"14293714","2","","7856843","2013-01-12 13:22:04","","0","","<p><code>dir_x</code> and <code>dir_y</code> are vx and vy you should change them... to vx and vy...</p>
","1931274","","","","","2013-01-12 13:22:04","","","","0","","",""
"7856915","2","","7856853","2011-10-22 01:51:35","","0","","<p>Does this work for you?</p>

<pre><code>instancesFound = compiledRegex.findall(origStr)
if instancesFound:
    parsedStr = parsedParts[0]
</code></pre>
","334852","","","","","2011-10-22 01:51:35","","","","0","","",""
"7856926","2","","7856853","2011-10-22 01:55:01","","1","","<p>Use the <em>group</em> method on the match object:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; origStr = ""The cat said hi""
&gt;&gt;&gt; compiledRegex = re.compile('The.*said')
&gt;&gt;&gt; compiledRegex.match(origStr).group()
'The cat said'
</code></pre>
","1001643","","","","","2011-10-22 01:55:01","","","","0","","",""
"7857662","2","","7856853","2011-10-22 05:41:16","","0","","<p>Here's how I'd write it:</p>

<pre><code>search = re.compile(r'^The.*said').search
match = search(input)
if match:
    match = match.group(0)
</code></pre>

<p>If <code>input</code> is ""The cat said my name"", <code>match</code> will be ""The cat said"".</p>

<p>If <code>input</code> is ""The cat never mentioned my name"", <code>match</code> will be <code>None</code>.</p>

<p>I really like the fact that Python makes it possible to compile a regular expression and assign the particular method of interest to a variable in one line.</p>
","312785","","","","","2011-10-22 05:41:16","","","","0","","",""
"7862053","2","","7856918","2011-10-22 19:28:02","","0","","<p>I <em>think</em> what you're asking is how to create what Python calls a <a href=""http://docs.python.org/distutils/builtdist.html"" rel=""nofollow"">Built Distribution</a>.  This can be done with <a href=""http://docs.python.org/library/distutils.html"" rel=""nofollow"">distutils</a> and it <em>is</em> tedious.  And again I'm guessing at the question, but I think you'd benefit from the docs about <a href=""http://docs.python.org/distutils/setupscript.html#describing-extension-modules"" rel=""nofollow"">describing extension modules</a>.</p>

<p>Besides that, I don't think a broad answer would be complete without pointing at <a href=""http://www.py2exe.org/"" rel=""nofollow"">py2exe</a> and <a href=""http://svn.pythonmac.org/py2app/py2app/trunk/doc/index.html"" rel=""nofollow"">py2app</a> -- utilities to create standalone executables for Windows and OS X, respectively.</p>
","277586","","","","","2011-10-22 19:28:02","","","","0","","",""
"7876050","2","","7856949","2011-10-24 13:05:13","","1","","<p>It's documented in <a href=""http://wtforms.simplecodes.com/docs/0.6.2/fields.html#wtforms.fields.SelectField"" rel=""nofollow"">WTForms documentation of the SelectField</a> quoted here for convenience:</p>

<blockquote>
  <p>Select fields keep a choices property which is a sequence of (value,
  label) pairs.</p>
</blockquote>

<p>I'm not sure about <code>form.parent.choices</code> syntax but the code looks like:</p>

<pre><code>form.parent.choices = [(1, 'parent name 1'), (2, 'parent name 2'), (3, 'parent name 3'), (4, 'parent name 4')]
</code></pre>
","140837","","","","","2011-10-24 13:05:13","","","","1","","",""
"7857078","2","","7857000","2011-10-22 02:41:29","","0","","<p>This is a really weird way of explaining it but:    .* when used in files means a group of files... like if you used 
<code>fruits.*</code> instead of <code>fruits.apple</code>, it would be like saying <code>fruits.apples</code>, <code>fruits.oranges</code>, <code>fruits.bananas</code>, and any other files in the fruits group. </p>
","987777","","","","","2011-10-22 02:41:29","","","","7","","",""
"7857701","2","","7857000","2011-10-22 05:49:22","","1","","<p>(.*) doesn't mean anything specific in Python. However, it can mean specific things to certain functions when a part of a string. Hence <code>'(.*)'</code> might mean something to a function, although it means nothing to Python itself. Since</p>

<p>Two functions that do take strings containing (.*) are <a href=""http://docs.python.org/library/glob.html"" rel=""nofollow"">glob.glob</a>, <a href=""http://docs.python.org/library/fnmatch.html"" rel=""nofollow"">fnmatch.fnmatch</a> and the re modules functions.</p>

<p>In glob and fnmatch it is <code>'*'</code> that has special meaning, it means ""anything"". You typically use it to match filenames:</p>

<pre><code>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('/tmp/foobar.*')
['/tmp/foobar.tmp', '/tmp/foobar.txt', '/tmp/foobar.conf']
</code></pre>

<p>And you can also list everything with a specific ending:</p>

<pre><code>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('/tmp/*.txt')
['/tmp/foobar.txt', '/tmp/frotz.txt', '/tmp/wfsh.txt']
</code></pre>

<p>Hence, in these modules <code>'(.*)'</code> would mean anything starts with (. and ends with ) with anything in between it.</p>

<p>In the re module you handle regular expressions. regular expressions is a highly magical text matching language. There <code>'.'</code> means ""any character (except newlines, unless you set a special flag to make it mean newlines as well)"", and '*' means ""zero to infinite amount of repetitions of the previous match"". Hence <code>'.*'</code> means ""pretty much anything"", and is a common thing to stick into regular expressions, as <code>'foobar.*'</code> would mean anything that start with foobar.</p>

<p>Parenthesis means ""groups"", and to know what that mean you'll just have to read the <a href=""http://docs.python.org/library/re.html"" rel=""nofollow"">documentation</a>. You probably won't get it without some experimentation so you see what happens.</p>

<p>Basically '(.*)' matches anything. I'm assuming your regular expression has text before and after it as well?</p>
","126214","","126214","","2011-10-22 13:17:52","2011-10-22 13:17:52","","","","0","","",""
"7861235","2","","7861208","2011-10-22 17:14:32","","6","","<p><a href=""http://docs.python.org/library/decimal.html"" rel=""nofollow""><code>decimal.Decimal</code></a> allows you to use a specific precision.</p>

<pre><code>&gt;&gt;&gt; decimal.Decimal('12.000')
Decimal('12.000')
</code></pre>
","20862","","","","","2011-10-22 17:14:32","","","","0","","",""
"7861255","2","","7861208","2011-10-22 17:17:05","","0","","<p>You may be interested by <a href=""http://docs.python.org/library/decimal.html"" rel=""nofollow"">the decimal python lib</a>.</p>

<p>You can set the precision with <code>getcontext().prec</code>.</p>
","849022","","","","","2011-10-22 17:17:05","","","","0","","",""
"7862381","2","","7861208","2011-10-22 20:28:27","","2","","<p>If you really want to perform <strong>calculations that take precision into account</strong>, the easiest way is to probably to use the <a href=""http://packages.python.org/uncertainties/"" rel=""nofollow"">uncertainties</a> module.  Here is an example</p>

<pre><code>&gt;&gt;&gt; import uncertainties
&gt;&gt;&gt; x = uncertainties.ufloat('12.000')
&gt;&gt;&gt; x
12.0+/-0.001
&gt;&gt;&gt; print 2*x
24.0+/-0.002
</code></pre>

<p>The <a href=""http://packages.python.org/uncertainties/"" rel=""nofollow"">uncertainties</a> module transparently handles uncertainties (precision) for you, whatever the complexity of the mathematical expressions involved.</p>

<hr>

<p>The <a href=""http://docs.python.org/library/decimal.html"" rel=""nofollow"">decimal</a> module, on the other hand, does not handle uncertainties, but instead sets the number of digits after the decimal point: <strong>you can't trust all the digits given by the decimal module</strong>.  Thus,</p>

<pre><code>&gt;&gt;&gt; 100*decimal.Decimal('12.1')
Decimal('1210.0')
</code></pre>

<p>whereas 100*(12.1¬±0.1) = 1210¬±10 (not 1210.0¬±0.1):</p>

<pre><code>&gt;&gt;&gt; 100*uncertainties.ufloat('12.1')
1210.0+/-10.0
</code></pre>

<p>Thus, the decimal module gives '1210.0' even though the precision on 100*(12.1¬±0.1) is 100 times larger than 0.1.</p>

<hr>

<p>So, if you want numbers that have a fixed number of digits after the decimal point (like for accounting applications), the decimal module is good; if you instead need to perform calculations with uncertainties, then the <a href=""http://packages.python.org/uncertainties/"" rel=""nofollow"">uncertainties</a> module is appropriate.</p>

<p>(Disclaimer: I'm the author of the uncertainties module.)</p>
","42973","","42973","","2011-10-24 14:16:11","2011-10-24 14:16:11","","","","0","","",""
"7861440","2","","7861299","2011-10-22 17:44:48","","8","","<p>citing from the <a href=""http://jpype.sourceforge.net/doc/user-guide/userguide.html#python_threads"">JPype documentation</a>:</p>

<blockquote>
  <p>Python Threads</p>
  
  <p>For the most part, python threads based on OS level threads (i.e posix threads), will work without problem. The only thing to remember is to call <code>jpype.attachThreadToJVM()</code> in the thread body to make the JVM usable from that thread. For threads that you do not start yourself, you can call <code>isThreadAttachedToJVM()</code> to check.</p>
</blockquote>

<p>HTH</p>
","81424","","","","","2011-10-22 17:44:48","","","","0","","",""
"8022408","2","","8022337","2011-11-05 18:46:20","","1","","<p>there is no need to use <code>where</code>, you can directly index an array with the boolean array resulting from your comparison operator.</p>

<pre><code>a=array([[[ 7.,  3.,  1.],
          [ 9.,  6.,  9.]],
         [[ 4.,  6.,  8.],
          [ 8.,  1.,  1.]]])


&gt;&gt;&gt; a[a[:, :, 1] &lt; 5]
array([[ 7.,  3.,  1.],
       [ 8.,  1.,  1.]])

&gt;&gt;&gt; a[a[:, :, 1] &lt; 5]=9

&gt;&gt;&gt; a
array([[[ 9.,  9.,  9.],
        [ 9.,  6.,  9.]],
       [[ 4.,  6.,  8.],
        [ 9.,  9.,  9.]]])
</code></pre>

<p>you do not list the expected output in your question, so I am not sure this is what you want.</p>
","597609","","146792","","2011-11-05 18:49:52","2011-11-05 18:49:52","","","","1","","",""
"8022415","2","","8022337","2011-11-05 18:47:15","","3","","<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[[ 7.,  3.,  1.],
...         [ 9.,  6.,  9.]],
...
...        [[ 4.,  6.,  8.],
...         [ 8.,  1.,  1.]]])
&gt;&gt;&gt; a
array([[[ 7.,  3.,  1.],
        [ 9.,  6.,  9.]],

       [[ 4.,  6.,  8.],
        [ 8.,  1.,  1.]]])

&gt;&gt;&gt; a[:,:,1][a[:,:,1] &lt;; 5 ] = 9
&gt;&gt;&gt; a
array([[[ 7.,  9.,  1.],
        [ 9.,  6.,  9.]],

       [[ 4.,  6.,  8.],
        [ 8.,  9.,  1.]]])
</code></pre>

<p><code>a[:,:,1]</code> gives you G channel, I subsetted it by <code>a[:,:,1] &lt; 5</code> using it as index.  then assigned value 9 to that selected elements.</p>
","1013786","","146792","","2011-11-05 18:55:44","2011-11-05 18:55:44","","","","0","","",""
"8022354","2","","8022342","2011-11-05 18:38:20","","2","","<p>The  <code>c.setdefault('castles')</code> line directly assigns <code>c['castles'] = None</code>.  This likely isn't what you intended.</p>

<p>If you intended to make <em>castles</em> show in the <em>__repr__</em>, use <code>c['castles'] = 0</code> instead.</p>

<p>For a <em>Counter</em> to behave as designed, the <em>keys</em> can be anything you want to count and the <em>values</em> need to be a number.  As you've seen, the sort-step in <em>__repr__</em> expects that the values are all numbers  and it won't work if one of the values is set to <em>None</em>.</p>

<p>It might seem that <em>setdefault</em> would be used to give the counter default values or assign a factory function, but that isn't what <em>setdefault</em> does.  And you don't need to do that step at all since <em>Counter</em> objects automatically return default value of zero for you.  No extra work is required.</p>

<p>Here is how it all works, simply and easily:</p>

<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter(houses=5)
&gt;&gt;&gt; c
Counter({'houses': 5})
&gt;&gt;&gt; c['castles']           # counters automatically return zero for missing items, no work required
0
&gt;&gt;&gt; c                      # but missing items won't show in the __repr__
Counter({'houses': 5})
&gt;&gt;&gt; c['castles'] = 0       # unless you specifically add an entry for them
&gt;&gt;&gt; c
Counter({'houses': 5, 'castles': 0})
</code></pre>
","1001643","","1001643","","2011-11-05 18:55:29","2011-11-05 18:55:29","","","","4","","",""
"8022365","2","","8022342","2011-11-05 18:39:29","","2","","<p>Yes, looks like a bug. The problem is that <code>setdefault</code> without a value argument assumes the value is <code>None</code>, while in the case of a <code>Counter</code> it should really insert either one or zero, or fail by raising some exception.</p>

<p>In Python 2.7, your snippet works, btw., although it still inserts a <code>None</code> value, violating <code>Counter</code>'s invariants.</p>

<p>Mind you, this isn't the first <a href=""http://bugs.python.org/issue13121"" rel=""nofollow"">bug/design flaw</a> that I encounter with <code>collections.Counter</code>.</p>
","166749","","166749","","2011-11-05 18:44:35","2011-11-05 18:44:35","","","","8","","",""
"8121230","2","","8121142","2011-11-14 11:59:03","","5","","<p>You might wish to investigate the <a href=""http://www.gnu.org/s/idutils/manual/"" rel=""nofollow"">GNU idutils</a> toolkit. On a local copy of the Linux kernel sources, it can give output like this:</p>

<pre><code>$ gid ugly
include/linux/hil_mlc.h:66:  * a positive return value causes the ""ugly"" branch to be taken.
include/linux/hil_mlc.h:101:    int         ugly;   /* Node to jump to on timeout       */
</code></pre>

<p>Rebuilding the index from a cold cache is reasonably quick:</p>

<pre><code>$ time mkid

real    1m33.022s
user    0m17.360s
sys     0m2.730s
</code></pre>

<p>Rebuilding the index from a warm cache is much faster:</p>

<pre><code>$ time mkid

real    0m15.692s
user    0m15.070s
sys     0m0.520s
</code></pre>

<p>The index only takes 46 megabytes for my 2.1 gigs of data -- which is tiny in comparison to yours, but the ratio feels good.</p>

<p>Finding 399 occurrences of <code>foo</code> took only <code>0.039</code> seconds:</p>

<pre><code>$ time gid foo &gt; /dev/null

real    0m0.038s
user    0m0.030s
sys     0m0.000s
</code></pre>

<p><strong>Update</strong></p>

<p>Larsmans was curious about the performance of <code>git grep</code> on the kernel sources -- which is an excellent way to show how much performance gain <code>gid(1)</code> provides.</p>

<p>On a cold cache, <code>git grep foo</code> (which returned 1656 entries, far more than idutils):</p>

<pre><code>$ time git grep foo &gt; /dev/null

real    0m19.231s
user    0m1.480s
sys     0m0.680s
</code></pre>

<p>Once the cache was warm, <code>git grep foo</code> runs much faster:</p>

<pre><code>$ time git grep foo &gt; /dev/null

real    0m0.264s
user    0m1.320s
sys     0m0.330s
</code></pre>

<p>Because my dataset fits entirely in RAM once the cache is warm, <code>git grep</code> is pretty amazing: it's only seven times slower than the <code>gid(1)</code> utility and certainly it would be more than fast enough for interactive use. If the dataset in question cannot be entirely cached (which is probably where things actually get interesting) then the performance benefit of the index is unmistakable.</p>

<p>The two complaints about idutils:</p>

<ol>
<li><p>No pagination. This is definitely a downside, though in my experience it runs quickly enough to simply store the results of the search elsewhere. If the search is going to return an appreciable percentage of the original dataset, then storage of partial results is definitely going to be annoying.</p></li>
<li><p>No API: true enough, there's no API. But the source is available; <code>src/lid.c</code> function <code>report_grep()</code> takes a linked list of files that match the output. A little fiddling with this function should even offer pagination. (It would take some doing.) At the end of the day, you'd have a C API, which might still not be ideal. But customizing it doesn't look awful.</p></li>
</ol>

<p>However, the weakness that is probably worst is the lack of an incremental database update. If <em>all</em> files are updated three times per day, this is not a big deal. If <em>some</em> files are updated three times a day, it is doing needless work. If a handful of files are updated three times a day, there must be a better solution.</p>
","377270","","377270","","2011-11-14 23:25:59","2011-11-14 23:25:59","","","","3","","",""
"8135762","2","","8121142","2011-11-15 11:37:49","","1","","<p>In case anyone needs it, I created <a href=""https://github.com/knipknap/whooshstore"" rel=""nofollow"">Whooshstore</a>, which is essentially a Whoosh-based, pure Python clone of GNU id utils that provides incremental updates, pagination and a Python API.</p>

<p>The command line client works like this:</p>

<pre><code>ws-update -b --index my.idx datadir  # build the index
ws-update -b --append --index my.idx datadir  # incremental update
ws --index my.idx hello world     # query the index
</code></pre>

<p>(<code>-b</code> is for batch updating, which is faster but requires more memory. For the full CLI syntax use <code>--help</code>.)</p>

<p>It does not come close to the speed of GNU id utils, but by updating the index using several incremental batch (in-memory) updates it's fast enough for us.</p>
","166442","","","","","2011-11-15 11:37:49","","","","0","","",""
"15693931","2","","15670525","2013-03-28 23:27:52","","7","","<p>Gensim has a semi-well-hidden function that can kind of do this for you:</p>

<p><a href=""http://radimrehurek.com/gensim/matutils.html#gensim.matutils.Sparse2Corpus"">http://radimrehurek.com/gensim/matutils.html#gensim.matutils.Sparse2Corpus</a></p>

<p>""class gensim.matutils.Sparse2Corpus(sparse, documents_columns=True)
    Convert a matrix in scipy.sparse format into a streaming gensim corpus.""</p>

<p>I've had some success with it using a corpus extracted with CountVectorizer, then loaded into gensim.</p>
","150087","","","","","2013-03-28 23:27:52","","","","1","","",""
"15675120","2","","15670559","2013-03-28 05:52:08","","2","","<p>Installing a module from a git repository in the usual ways <em>does</em> require a <code>setup.py</code>, but it can be a bare minimum one rather than a fuller one like you'd use for a PyPI module. For example:</p>

<pre><code>#!/usr/bin/env python

from distutils.core import setup

setup(
    name=""foo"",
)
</code></pre>

<p>If you drop something like that into each of your lib repositories then you can make your requirements file point to the git repo using <code>-e git://git.example.com/foo.git#egg=foo</code>. If you install this into a virtualenv then it will appear at <code>src/foo</code> inside the virtualenv directory, and it'll be added to <code>sys.path</code> automatically when running Python from that virtualenv.</p>

<p>The <code>-e</code> option also accepts a local directory as a parameter, so if you guarantee that the current working directory will always be the root of your project when you install from <code>requirements.txt</code> (so that the relative path resolves correctly) it should work just fine to write things like <code>-e lib1</code> in there, and then you can still reference the libraries as git submodules if you want.</p>

<p>If you are determined <em>not</em> to create a <code>setup.py</code> then your task is to emulate what would happen when running <code>python setup.py develop</code>. This command does two things (as of Python 2.7, at least):</p>

<ul>
<li>It creates an <a href=""http://svn.python.org/projects/sandbox/trunk/setuptools/doc/formats.txt"" rel=""nofollow"">egg link</a> in the <code>site-packages</code> lib directory in your virtualenv (or system-wide if you don't have a virtualenv) that points to your target source directory.</li>
<li>It adds a line to <code>easy-install.pth</code>, which is also in the <code>site-packages</code> directory, which also points to your target source directory.</li>
</ul>

<p>You could choose to do both of the above actions by a means other than running <code>setup.py editable</code> and get the same effect for current versions of Python, but of course the implementation of editable distributions may change in newer versions of Python.</p>
","281848","","281848","","2013-03-29 18:24:22","2013-03-29 18:24:22","","","","2","","",""
"15670672","2","","15670586","2013-03-27 22:22:28","","1","","<p>please see this path of how to setup the environment in order to use cpython. </p>

<ol>
<li><a href=""http://en.wikibooks.org/wiki/Python_Programming/Extending_with_C"" rel=""nofollow"">fully detailed tutorial for Linux</a></li>
<li>A small <a href=""https://github.com/zozo123/cpython-module"" rel=""nofollow"">github</a> project contains all the relevant files to use on MAC OSx.</li>
<li>use python-config in order to get the paths to <code>Python.h</code> and to the static lib of python, which you should link your code with.</li>
</ol>
","1031417","","","","","2013-03-27 22:22:28","","","","0","","",""
"34204023","2","","15670586","2015-12-10 14:09:41","","0","","<p>Find the path with:</p>

<pre><code>find / -iname python.h
</code></pre>

<p>Once you have the path, add it to:</p>

<pre><code>Project &gt; Properties &gt; GCC C++ Compiler &gt; Includes
</code></pre>

<p>If needed, add:</p>

<pre><code>python2.7
</code></pre>

<p>to:</p>

<pre><code>GCC C++ Linker &gt; Libraries
</code></pre>
","1797240","","","","","2015-12-10 14:09:41","","","","0","","",""
"41693140","2","","15670586","2017-01-17 09:15:21","","0","","<p>after installing the <code>python-devel</code>, locate On Terminal(ctrl+shift+t) by <code>locate Python.h</code> > the result is the file , copy the path and add it to eclipse by the following instructions.</p>

<p>personaly i like to get in the gist of the code so im adding to the compiler includes. but you can add to the linker as well, as mentioned above.</p>

<p>On eclipse : 
<code>Project &gt; Properties &gt; C/C++ Build &gt; Settings &gt; ...Compiler(*) &gt; Includes &gt; Include paths (-l)</code></p>

<p>Directory : paste the path you've located in terminal.
for example<code>/usr/include/python2.7</code> 
press OK
see it was added to the list
press OK
.
enjoy</p>

<p>(*)note: if you are compiling c project choose the include under '.. GCC Copmiler'
for C++ '..G++ Compiler'</p>
","3486581","","","","","2017-01-17 09:15:21","","","","0","","",""
"15670778","2","","15670751","2013-03-27 22:30:11","","2","","<p>Python will evaluate the arguments left to right in a function call, then the function itself is executed.</p>

<p><a href=""http://docs.python.org/3.3/reference/expressions.html#evaluation-order"" rel=""nofollow"">General evaluation order is left to right</a>.</p>
","722121","","","","","2013-03-27 22:30:11","","","","5","","",""
"15670818","2","","15670751","2013-03-27 22:33:06","","3","","<p>Python uses <a href=""http://en.wikipedia.org/wiki/Strict_evaluation"" rel=""nofollow"">strict (eager) evaluation <em>strategy</em></a>: the arguments to a function are always evaluated completely before the function is applied. The evaluation <em>order</em> is <a href=""http://docs.python.org/3.3/reference/expressions.html#evaluation-order"" rel=""nofollow"">left to right</a> (except when evaluating assignment):</p>

<p>Not descending into attribute lookups:</p>

<ol>
<li>Evaluate <code>text.find</code> (we'll name the result F1)</li>
<li>Evaluate <code>'zip'</code> &rarr; A1</li>
<li>Evaluate <code>text.find</code> &rarr; F2</li>
<li>Evaluate <code>'zip'</code> &rarr; A2</li>
<li>Call <code>F2.__call__(A2)</code> (we'll call the return value R1) (<code>text.find('zip')</code>)</li>
<li>Evaluate <code>1</code> &rarr; A3</li>
<li>Call <code>R1.__add__(A3)</code> (returns R2) (<code>R1 + 1</code>)</li>
<li>Call <code>F1.__call__(A1, R2)</code> (returns the final result) (<code>text.find('zip', R2)</code>)</li>
</ol>
","830012","","830012","","2013-03-27 22:50:42","2013-03-27 22:50:42","","","","4","","",""
"15691577","2","","15670751","2013-03-28 20:30:58","","1","","<p>It is called <a href=""http://docs.python.org/2/reference/expressions.html#operator-precedence"" rel=""nofollow"">operator precedence</a> and <a href=""http://docs.python.org/2/reference/expressions.html#evaluation-order"" rel=""nofollow"">evaluation order</a>. Within an expression, operator precedence applies, and per expression the evaluation order is used.</p>

<p>The <code>text.find()</code> call comes before the <code>+</code> addition operator because it has a higher precedence.</p>

<p>For operators of equal priority, evaluation goes from left to right. In a function call, each argument is a separate expression and these are thus evaluated from left to right.</p>
","100297","","","","","2013-03-28 20:30:58","","","","0","","",""
"15670984","2","","15670760","2013-03-27 22:45:07","","2","","<p>Plaintext files don't really have headers in traditional sense. It's just a stream of characters.</p>

<p>If this were a binary format you could have a strict header and any reader would have to adhere to that format. I assume this is a custom format that you've created, if that's the case you've already got a good solution.</p>

<p>If you want to learn more about headers, you should look at the JPEG header specification, which is simple.<br/>
<a href=""http://www.fastgraph.com/help/jpeg_header_format.html"" rel=""nofollow noreferrer"">http://www.fastgraph.com/help/jpeg_header_format.html</a></p>

<p>See this post for an example of python code that reads the binary jpeg header.<br/>
<a href=""https://stackoverflow.com/questions/266648/python-check-if-uploaded-file-is-jpg"">Python: Check if uploaded file is jpg</a></p>
","2216741","","-1","","2017-05-23 12:11:06","2013-03-27 22:45:07","","","","3","","",""
"15671103","2","","15670760","2013-03-27 22:54:09","","2","","<p>If you can have columns named, e.g., ""3.5"", your code obviously won't work, so I'll assume you can't.</p>

<p>And that means the whole thing is a bit overcomplicated. Really, all you need to do is see if the first character is a valid float starting character for a float:</p>

<pre><code>def check_header(filename):
    with open(filename) as f:
        first = f.read(1)
    return first not in '.-0123456789'
</code></pre>

<p>For an empty file, this will return <code>True</code> instead of raising an exception, but otherwise, it should work for exactly the same use cases as your original code.</p>

<p>I normally wouldn't even mention this, but since you tagged your question ""optimization"", I guess you care: This code is theoretically faster than yours for reasons that should be pretty obvious, but in real life, it will almost always make no difference. According to <code>%timeit</code> on my machine, the part after the <code>read</code>/<code>readline</code> takes 244ns instead of 2.6us. That's more than 10x as fast, as you'd expect. But the <code>read</code>/<code>readline</code> part takes 13.1us vs. 13.2us for a file is in the OS disk cache, or 39.7ms vs. 39.7ms for a file on a remote drive. The I/O cost of reading a block from a file into a buffer, even in the best case, swamps the cost of processing it (both the extra processing in <code>readline</code>, and the extra processing in your code).</p>
","908494","","908494","","2013-03-27 23:10:12","2013-03-27 23:10:12","","","","1","","",""
"15674186","2","","15674026","2013-03-28 04:15:32","","3","","<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; x = [1, 1, 2, 3, 54, 3, 1]
&gt;&gt;&gt; itemgetter(0,1,6)(x) == (1, 1, 1)
True
</code></pre>

<p>How is <code>y</code> <em>really</em> defined. Obviously you can't have <code>n</code> in there as a placeholder? Could your use <code>None</code> perhaps?</p>
","174728","","","","","2013-03-28 04:15:32","","","","2","","",""
"15674195","2","","15674026","2013-03-28 04:16:39","","1","","<pre><code>from itertools import izip, islice
x = [2,1,3,1,1,2,3,54,3,1,5,6,7,1,1,0,0,0,0,1]
y = [1,1,None,None,None,None,1]

print [i for i in xrange(len(x)-len(y)+1) 
         if all(b is None or a==b for a,b in izip(islice(x, i, i+len(y)), y))]
</code></pre>

<p>Or more code for easy to understand:</p>

<pre><code>def nwise(x, n):
    for i in xrange(len(x)-n+1):
        yield i, islice(x, i, i+n)

def match(x, y):
    return all(b is None or a==b for a,b in izip(x, y))

print [i for i, xs in nwise(x, len(y)) if match(xs, y)]
</code></pre>
","772649","","772649","","2013-03-28 04:24:56","2013-03-28 04:24:56","","","","0","","",""
"15674235","2","","15674026","2013-03-28 04:21:16","","1","","<p>I think you are confused about what <code>any</code> means. It is used to check a sequence of values, and see if any of them is ""true"". That's not related to finding out if a value is ""any number"" or ""any of these possibilities"".</p>

<p>If you have a fixed, finite <code>set</code> of possibilities that you want to consider, then what you really want to know is whether your candidate value is <code>in</code> that set:</p>

<pre><code>x in {1, 2, 3, 4, ""hi mom""} # returns whether x is any of those values
</code></pre>

<p>But ""any number"" is not a finite set. First off, you need to define what you mean by <em>number</em>; and then you need to perform the appropriate test. It sounds like what you are trying to do is check whether the value is an integer. In other words, you are concerned with the <em>type</em> of the values in the list.</p>

<p>If you already <strong>know</strong> they're all integers, then there's nothing to test; if you don't care what the value is, then just don't consider it when you make your checks. But if you need to be sure it's an integer, then the way to do that is</p>

<pre><code>isinstance(x, int) # returns whether x is an `int`
</code></pre>

<hr>

<p>But maybe you have confused <strong>me</strong>, by giving an example ""to-search list"" that happens to be the same length as your ""pattern"", when you actually want to look for the pattern at any point in a longer list.</p>

<p>In that case, you can make a function that does an exact match of the pattern against a list of the same length; and then use <code>any</code> to check whether any pattern-lengthed sublist matches. <code>any</code> is designed to be used with generator expressions, and it looks like this:</p>

<pre><code>def match(a_sublist, the_pattern):
    # put your logic here

def search(the_full_list, the_pattern):
    pattern_length, full_length = len(the_pattern), len(the_full_list)
    return any(
        match(the_full_list[i:i+pattern_length], the_pattern)
        for i in range(full_length - pattern_length)
    )
</code></pre>

<p>There are more efficient ways to match, depending on the details of your pattern, that will be inspired by string search algorithms and regular expression engines. But that is getting into much more difficult material - the above should get you started.</p>
","523612","","","","","2013-03-28 04:21:16","","","","1","","",""
"15674322","2","","15674026","2013-03-28 04:32:06","","0","","<p>i think you want to search for a list whose pattern got matched.. .</p>

<pre><code>x = [[1,1,2,3,54,3,1],[1,2,3,4,5,6,7],[2,4,6,8,10,12,14]]
y = [1,1,None,None,None,None,1] ## or [1,1,'n','n','n','n',1]

for l in x:
    if all(map(lambda x:x[0]==x[1],[x for x in zip(l,y) if x[1] and x[1]!='n'])):
        print l
</code></pre>

<p>output:</p>

<pre><code>[1,1,2,3,54,3,1]
</code></pre>
","1283171","","","","","2013-03-28 04:32:06","","","","0","","",""
"15674541","2","","15674026","2013-03-28 04:55:35","","0","","<p>This type of problem is well suited to <a href=""http://www.numpy.org/"" rel=""nofollow"">Numpy</a> <a href=""http://docs.scipy.org/doc/numpy/reference/maskedarray.html"" rel=""nofollow"">masked arrays</a>:</p>

<pre><code>import numpy.ma as ma

x = ma.array([1,1,2,3,54,3,1])
y = ma.array([1,1,1,1,1,1,1], mask=[0,0,1,1,1,1,0])

print x==y           # [True True -- -- -- -- True]
print ma.all(x==y)   # True
</code></pre>

<p>Of course, the use here may not merit installing and importing numpy, but it has advantages in some situations.</p>
","102302","","102302","","2013-03-28 05:01:47","2013-03-28 05:01:47","","","","0","","",""
"15674727","2","","15674026","2013-03-28 05:16:08","","0","","<pre><code>x = [1,1,2,3,54,3,1]
y = [1,1,0,0,0,0,1]
any([i[0]==i[1] for i in zip(x,y)])
</code></pre>
","1911913","","","","","2013-03-28 05:16:08","","","","1","","",""
"15674057","2","","15674037","2013-03-28 04:01:22","","2","","<pre class=""lang-py prettyprint-override""><code>def sumD(num):
    if num == 0: return 0
    return (num % 10) + sumD(num // 10)
</code></pre>
","2208469","","1219006","","2013-03-28 04:26:44","2013-03-28 04:26:44","","","","8","","",""
"15676432","2","","15674410","2013-03-28 07:32:55","","2","","<p>You wanted the <code>while</code> loop to end when the path length reached the number of squares on the board- using <code>and</code> instead of <code>or</code> in your while loop it will end when either this expression:</p>

<pre><code>goal not in path
</code></pre>

<p>or this expression:</p>

<pre><code>len(path) &lt; self.boardSize ** 2
</code></pre>

<p>evaluates to <code>False</code>. Using <code>or</code>, as long as one of those expressions is true, the loop would keep running. So your fixed code would be:</p>

<pre><code>def planPath(self, creature, goal, board):
        print(""in the path"")      
        path = [board[creature.x][creature.y]]       
        while goal not in path and len(path) &lt; self.boardSize ** 2:
            print(""path length"")
            print(len(path))
            nextPossible = {}
            for neighbor in path[-1].neighbors:
                if type(neighbor) is not Land.Water:
                    nextPossible[neighbor] = abs(neighbor.location[0] - goal.location[0]) + abs(neighbor.location[1] - goal.location[1]) + abs(neighbor.elevation - goal.elevation)      
            path.append(min(nextPossible, key=nextPossible.get))
        return path
</code></pre>
","1222578","","","","","2013-03-28 07:32:55","","","","0","","",""
"15674761","2","","15674412","2013-03-28 05:20:03","","0","","<p>Yes,you should take a look at this question <a href=""https://stackoverflow.com/questions/423379/using-global-variables-in-a-function-other-than-the-one-that-created-them"">Using global variables in a function other than the one that created them</a></p>

<p>Briefly speaking,if it is only reading from a name, and the name doesn't exist locally, it will try to look up the name in any containing scopes.That's what happens to <code>temp</code>,which will be found in the global scope.But with <code>hhh</code>,you do writing,which will make Python believe that <code>hhh</code> is a local variable.  </p>

<p>And another thing,but more important,it is not recomended using <code>global</code>.You could invoke <code>actualcrawl()</code> in <code>start()</code>,and pass in <code>hhh,temp</code>,which is the way most people do.</p>

<p>EDIT</p>

<p>It is simple:</p>

<pre><code>import random,os
def start():
    level=1
    temp='     +-!'
    hhh='[X'
    os.system('CLS')
    actualcrawl(temp,hhh)

def actualcrawl(temp,hhh):
    print (temp)
    for a in range(2,128):
        hhh=hhh+temp[random.randrange(1,8)]
    hhh=hhh[:79]+'&gt;'+hhh[80:]
    for i in range(1,3):
        a=random.randrange(3,8)
        b=random.randrange(6,15)
        hhh=hhh[:16*a+b-1]+'='+hhh[16*a+b:]
    for i in range(1,9):
        print (hhh[16*i-16:16*i])
</code></pre>

<p>I don't know what language you use before Python,but you really don't need to declare a variable like in C/C++.Because when you assign to a variable, you are just binding the name to an object.See this <a href=""https://stackoverflow.com/questions/13530998/python-variables-are-pointers"">python variables are pointers?</a></p>
","2142577","","-1","","2017-05-23 11:49:56","2013-03-28 05:59:22","","","","3","","",""
"15674649","2","","15674576","2013-03-28 05:08:06","","2","","<p><a href=""http://docs.python.org/2/library/urllib2.html"" rel=""nofollow noreferrer"">urllib2</a> handles opening and reading URLs. It also handles extra stuff like storing cookies.</p>

<p><a href=""http://docs.python.org/2/library/httplib.html?highlight=httplib#httplib"" rel=""nofollow noreferrer"">httplib</a> handles http requests, its what happens behind the curtain when you open a url. </p>

<p>you can send json request with urllib2 so you should use that.
<a href=""https://stackoverflow.com/questions/3290522/urllib2-and-json"">see this</a>.</p>
","768435","","-1","","2017-05-23 12:30:03","2013-03-28 05:22:21","","","","2","","",""
"15676278","2","","15674601","2013-03-28 07:19:24","","3","","<p>models.py</p>

<pre><code>from django.db import models

class Upload(models.Model):
    name = models.CharField(max_length=100)
    file = models.FileField(upload_to=""images"")
</code></pre>

<p>forms.py</p>

<pre><code>from django import forms
from app_name.models import Upload

class UploadForm(forms.ModelForm):
    class Meta:
        model = Upload
</code></pre>

<p>views.py</p>

<pre><code>def upload_file(request):
    if request.method == 'POST':
        form = UploadForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect('/success/url/')
    else:
        form = UploadFileForm()
    return render_to_response('upload.html', {'form': form})
</code></pre>

<p>upload.html</p>

<pre><code>&lt;form enctype=""multipart/form-data"" action=""/upload/"" name=""test"" method=""post""&gt;
    {% csrf_token %}
    {{form.as_p}}
    &lt;input id=""signUpSubmit"" type=""submit"" value=""Submit""&gt;
&lt;/form&gt;
</code></pre>
","2008506","","","","","2013-03-28 07:19:24","","","","0","","",""
"16370556","2","","15674602","2013-05-04 04:24:21","","0","","<p>I have never try MySQLdb on python 3k. You can read <a href=""http://mysql-python.blogspot.com/2012/09/a-brief-history-of-mysqldb.html"" rel=""nofollow"">the dev blog</a>:</p>

<blockquote>
  <p>Python 3 compatibility is needed now more than ever. I thought I could
  do this in 1.2.4, but I would have to sacrifice compatibility for
  Python &lt; 2.7. So MySQLdb-1.2.4 will be a bugfix release and fully
  Python 2.7 compatible (and should be Python 2.8 compatible), and very
  soon thereafter there will be a 1.3.0 which will require Python 2.7 or
  newer and be compatible with Python 3.</p>
</blockquote>
","325224","","","","","2013-05-04 04:24:21","","","","2","","",""
"15674713","2","","15674701","2013-03-28 05:14:57","","2","","<p>Try this:</p>

<pre><code>for v in test.values():
    for val in v:
        print val
</code></pre>

<p>if you need a list:</p>

<pre><code>print [val for v in test.values() for val in v ]
</code></pre>

<p>If you want to print each record from dict than:</p>

<pre><code>for k, v in test.iteritems():
    print k, v
</code></pre>
","781150","","","","","2013-03-28 05:14:57","","","","0","","",""
"15674719","2","","15674701","2013-03-28 05:15:29","","3","","<pre><code>#Given a dictionary
&gt;&gt;&gt; test ={'line4': (4, 2), 'line3': (3, 2), 'line2': (2, 2), 'line1': (1, 2), 'line10': (10, 2)}

#And if you want a list of tuples, what you need actually is the values of the dictionary
&gt;&gt;&gt; test.values()
[(4, 2), (3, 2), (2, 2), (1, 2), (10, 2)]

#Instead if you want a flat list of values, you can flatten using chain/chain.from_iterable
&gt;&gt;&gt; list(chain(*test.values()))
[4, 2, 3, 2, 2, 2, 1, 2, 10, 2]
#And to print the list 
&gt;&gt;&gt; for v in chain.from_iterable(test.values()):
    print v


4
2
3
2
2
2
1
2
10
2
</code></pre>

<p>Analyzing your code</p>

<pre><code>for i in range(1,len(test)+1):
    print test(1) # should print all the values one by one
</code></pre>

<ol>
<li>You can't index a dictionary. A dictionary is not a sequence like a list</li>
<li>You don;t use parenthesis to index. It turns to be a function call</li>
<li>To iterate a dictionary, you can either iterate the keys or the values. 
<ol>
<li><code>for key in test</code> to iterate a dictionary by keys</li>
<li><code>for key in test.values()</code> to iterate a dictionary by values</li>
</ol></li>
</ol>
","977038","","977038","","2013-03-28 05:21:20","2013-03-28 05:21:20","","","","0","","",""
"15674767","2","","15674701","2013-03-28 05:20:23","","1","","<p>You can use a nested comprehension:</p>

<pre><code>&gt;&gt;&gt; test ={'line4': (4, 2), 'line3': (3, 2), 'line2': (2, 2), 'line1': (1, 2), 'line10': (10, 2)}
&gt;&gt;&gt; print '\n'.join(str(e) for t in test.values() for e in t)
4
2
3
2
2
2
1
2
10
2
</code></pre>

<p>Since dictionaries are unsorted in Python, your tuples will be unsorted as well. </p>
","298607","","","","","2013-03-28 05:20:23","","","","0","","",""
"15674890","2","","15674701","2013-03-28 05:32:15","","3","","<p>Here are a few possibilities. Your question is quite vague and your code isn't even close to working, so it's difficult to understand the question</p>

<pre><code>&gt;&gt;&gt; test ={'line4': (4, 2), 'line3': (3, 2), 'line2': (2, 2), 'line1': (1, 2), 'line10': (10, 2)}
&gt;&gt;&gt; for i in test.items():
...     print i
... 
('line4', (4, 2))
('line3', (3, 2))
('line2', (2, 2))
('line1', (1, 2))
('line10', (10, 2))
&gt;&gt;&gt; for i in test:
...     print i
... 
line4
line3
line2
line1
line10
&gt;&gt;&gt; for i in test.values():
...     print i
... 
(4, 2)
(3, 2)
(2, 2)
(1, 2)
(10, 2)
&gt;&gt;&gt; for i in test.values():
...     for j in i:
...         print j
... 
4
2
3
2
2
2
1
2
10
2
</code></pre>
","174728","","","","","2013-03-28 05:32:15","","","","0","","",""
"15675742","2","","15675469","2013-03-28 06:41:19","","3","","<p>You have a few problems here.  </p>

<p>First, you're using <code>pack</code> and <code>place</code>.  In general, you should only use 1 geometry manager within a container widget.  I don't recommend using <code>place</code>.  That's just too much work that you need to manage.</p>

<p>Second, you're calling the callback <code>movedown</code> when you construct your button.  That's not what you want to do -- You want to pass the function, not the result of the function:</p>

<pre><code>buttonup = Button(window, text = 'down', width = 5, command = movedown)
</code></pre>

<p>Third, <code>globals</code> returns a dictionary of the current namespace -- It's not likely to have an integer key in it.  To get the reference to the object referenced by <code>b</code>, you'd need <code>globals()[""b""]</code>.  Even if it did, changing the value of <code>b</code> in the global namespace won't change the position of your label because the label has no way of knowing that change.  And in general, if you <em>need</em> to use <code>globals</code>, you <em>probably</em> need to rethink your design.</p>

<p>Here's a simple example of how I would do it...</p>

<pre><code>import Tkinter as tk

def window(root):
    buf_frame = tk.Frame(root,height=0)
    buf_frame.pack(side='top')
    label = tk.Label(root,text=""Hello World"")
    label.pack(side='top')
    def movedown():
        buf_frame.config(height=buf_frame['height']+22)

    button = tk.Button(root,text='Push',command=movedown)
    button.pack(side='top')

root = tk.Tk()
window(root)
root.mainloop()
</code></pre>
","748858","","","","","2013-03-28 06:41:19","","","","0","","",""
"15736052","2","","15675469","2013-04-01 00:13:32","","1","","<p>Thanks for the reply but, It was not really what I was looking for. I'll post what I found worked best here for anybody else with the same problem. </p>

<p>Essentially, It is much better, in this case, to use a Canvas instead of a label. With canvases, you can move objects with canvas.move, here is a simple example program </p>

<pre><code># Python 2
from Tkinter import *

# For Python 3 use:
#from tkinter import *

root = Tk()
root.geometry('500x500+100+100')

image1 = PhotoImage(file = 'Image.gif')

canvas = Canvas(root, width = 500, height = 400, bg = 'white')
canvas.pack()
imageFinal = canvas.create_image(300, 300, image = image1)

def move():
    canvas.move(imageFinal, 0, 22)  
    canvas.update()

button = Button(text = 'move', height = 3, width = 10, command = move)
button.pack(side = 'bottom', padx = 5, pady = 5)

root.mainloop()
</code></pre>

<p>my code may not be perfect (sorry!) but that is the basic idea. Hope I help anybody else with this problem </p>
","2218517","","660921","","2017-06-25 00:58:15","2017-06-25 00:58:15","","","","0","","",""
"15679105","2","","15678988","2013-03-28 10:13:10","","5","","<p>You generally wouldn't do this.</p>

<p>You <em>normally</em> would create a base class in <code>baseclass_module</code> instead:</p>

<pre><code># baseclass_module.py

class BaseClass(object):
    def method1(self):
        # ...

    def method2(self):
        # ...
</code></pre>

<p>Then use that in other modules:</p>

<pre><code>from baseclass_module import BaseClass

class Bla(BaseClass):
    # ...
</code></pre>
","100297","","","","","2013-03-28 10:13:10","","","","8","","",""
"15679819","2","","15679067","2013-03-28 10:49:32","","6","","<h2>With standard PyDev</h2>

<p>It seems that this option is only available in Eclipse's Java Editor.</p>

<p>The Java editor allows you to create ""profiles"" for the code formatter, while PyDev's options for the code formatter are very limited.</p>

<h2>However,</h2>

<p>You can hack this. <code>PythonTidy.py</code> is an awesome script that cleans up Python code to make it follow PEP8 conventions, and that can be tweaked with your own settings. </p>

<h2>PythonTidy (code cleanup &amp; formatting)</h2>

<p>Get <a href=""http://lacusveris.com/PythonTidy/PythonTidy-1.22.python"" rel=""noreferrer"">here</a> (<a href=""https://pypi.python.org/pypi/PythonTidy/"" rel=""noreferrer"">homepage</a>) the source for <strong>PythonTidy</strong>. </p>

<p>You will see inside the file, at the beginning of the code and just after the comments, that many settings are defined. </p>

<p>The first one of these is <code>COL_LIMIT</code> with its default value set to <code>72</code>. Now you can use <strong>PythonTidy</strong> to format your code the way you want.</p>

<h2>Integration with PyDev</h2>

<p>Now you have to make this work with PyDev's formatting. This <a href=""http://bear330.wordpress.com/2007/10/30/using-pythontidy-in-pydev-as-code-formatter/"" rel=""noreferrer"">blog post</a> will explain it really better than me, but still I'll sum up the steps :</p>

<ul>
<li>Write a Jython interface betwenn PyDev's editor (<strong>PyEdit</strong>) and <strong>PythonTidy</strong>. This blog's author already wrote a wrapper script in the public domain available in the above link or <a href=""http://pastebin.com/sXDkNT84"" rel=""noreferrer"">here</a> in case the link goes 404.</li>
<li>Save this file anywhere you want, with the name <code>pyedit_pythontidy.py</code>, along with the <code>PythonTidy.py</code> file.</li>
<li><p>Configure PyDev to use this script as its <em>Code Formatter</em>. You can do this in <strong>Preferences > PyDev > Scripting PyDev</strong></p>

<ul>
<li><p><em>Note #1: I really recommend reading the original <a href=""http://bear330.wordpress.com/2007/10/30/using-pythontidy-in-pydev-as-code-formatter/"" rel=""noreferrer"">blog post</a> to have a better understanding</em></p></li>
<li><p><em>Note #2: The wrapper script author did not implement <strong>Code Block formatting</strong>, so this means you can only format a full file. This should not be that hard to implement, up to you.</em></p></li>
<li><p><em>Note #3: All credits goes to <a href=""http://bear330.wordpress.com"" rel=""noreferrer"">bear330</a> for the <strong>PyDev integration</strong> part.</em></p></li>
</ul></li>
</ul>
","1011859","","","","","2013-03-28 10:49:32","","","","3","","","2013-03-28 10:49:32"
"15689093","2","","15679162","2013-03-28 18:06:23","","2","","<p>There is a module for <code>openerp 6.1</code> to remove the create and edit option(in the <code>openerp</code> apps site search for web remove) from the default selection of <code>many2one</code> field. You can use this as an example and create you own module. or you can modify the base codes goto your server, then navigate to <code>openerp/addons/web/static/src/js/view_form.js</code> and remove the quick create functionality defined from the line number <code>2860</code>.</p>

<p>This is the Same answer that I have given in  <code>openerp</code> help site.</p>
","674598","","2401736","","2014-01-28 06:32:09","2014-01-28 06:32:09","","","","1","","",""
"19246498","2","","15679162","2013-10-08 11:27:27","","2","","<p>I have faced the same problem, but I solved it easily.</p>

<p>You need to change your web add-ons.</p>

<p>Please follow the step:</p>

<ol>
<li><p>Go to: web/static/src/js</p></li>
<li><p>open the file: <code>view_form.js</code></p></li>
<li><p>Go to line number 2958 or you can find <code>label: _t</code> (""Create and
Edit...""),</p></li>
<li><p>comment it</p></li>
</ol>

<p>Enjoy, you can now see in your many2one fields don't have 'Create and Edit'</p>

<p>Note : This will affect every many2one field.</p>
","2858333","","253096","","2013-11-26 09:28:00","2013-11-26 09:28:00","","","","0","","",""
"20212921","2","","15679162","2013-11-26 09:23:56","","0","","<p>In v7 you can use the answer as suggested in <a href=""http://help.openerp.com/question/16498/how-to-disable-create-and-edit-from-from-a-menu/"" rel=""nofollow"">http://help.openerp.com/question/16498/how-to-disable-create-and-edit-from-from-a-menu/</a></p>

<pre><code>&lt;form string=""My form"" create=""false""&gt;
</code></pre>

<p>I had this problem in v6.1 though, so I created a new option so that I could apply it to only some fields (not all fields as suggested by @Bipin)</p>

<pre><code>&lt;form string=""My form"" options='{""no_create"": true}'&gt;
</code></pre>

<p>and changed web/static/src/js/view_form.js</p>

<pre><code>     // Hack: check for new ""no_create"" option:
     if (self.get_definition_options().no_create === undefined || !self.get_definition_options().no_create) {
     // the rest of the code stays asis:

        // quick create
        var raw_result = _(data.result).map(function(x) {return x[1];});
        if (search_val.length &gt; 0 &amp;&amp;
            !_.include(raw_result, search_val) &amp;&amp;
            (!self.value || search_val !== self.value[1])) {
            values.push({label: _.str.sprintf(_t('&lt;em&gt;¬†¬†¬†Create ""&lt;strong&gt;%s&lt;/strong&gt;""&lt;/em&gt;'),
                    $('&lt;span /&gt;').text(search_val).html()), action: function() {
                self._quick_create(search_val);
            }});
        }
        // create...
        values.push({label: _t(""&lt;em&gt;¬†¬†¬†Create and Edit...&lt;/em&gt;""), action: function() {
            self._change_int_value(null);
            self._search_create_popup(""form"", undefined, {""default_name"": search_val});
        }});

     } // here endith the hack
</code></pre>

<p>I want to make this into a module, as editing the source code isn't very maintainable.</p>
","253096","","","","","2013-11-26 09:23:56","","","","0","","",""
"15679335","2","","15679261","2013-03-28 10:23:18","","3","","<p>The functions you are looking for are all in the <a href=""http://docs.python.org/2/library/os.html#module-os"" rel=""nofollow"">os module</a>:</p>

<pre><code>import os
for item in os.listdir('.'):
    if os.path.isdir(item):
        newdir = os.path.join(item, 'Metadata')
        if not os.path.exists(newdir):
            os.makedirs(newdir)
</code></pre>
","190597","","","","","2013-03-28 10:23:18","","","","1","","",""
"15679428","2","","15679272","2013-03-28 10:28:52","","1","","<p>Yes, python comes with setup utilities, and there are packages which will put your complete application in a platform specific binary(exe on windows, .app on osx).
Some of the packages I would recommend looking at would be:</p>

<p>cx_freeze</p>

<p>py2app</p>

<p>py2exe</p>
","1737276","","","","","2013-03-28 10:28:52","","","","2","","",""
"15679476","2","","15679359","2013-03-28 10:30:33","","1","","<p><code>urllib</code> does not support parsing a <code>.pac</code> file. The page you see is probably the Apache page for the server serving that <code>.pac</code> configuration file instead.</p>

<p><code>.pac</code> files contain javascript code that present your browser with proxy rules. You can try and open the file directly and see what proxy would be configured for the Python Challenge site instead. See <a href=""http://en.wikipedia.org/wiki/Proxy_auto-config"" rel=""nofollow"">http://en.wikipedia.org/wiki/Proxy_auto-config</a> for more details on the file format.</p>

<p>Once you figured out what proxy server would be used, configure <em>that</em> as server in the <code>proxies</code> mapping instead.</p>
","100297","","","","","2013-03-28 10:30:33","","","","4","","",""
"15679423","2","","15679406","2013-03-28 10:28:44","","4","","<p>You need to call <code>liste.append</code> inside the loop.</p>

<pre><code>import os
liste = []
for root, dirs, files in os.walk(path):
    for subdir in dirs:
        liste.append(os.path.join(root, subdir))

print(liste)        
</code></pre>
","190597","","","","","2013-03-28 10:28:44","","","","1","","",""
"15680848","2","","15679454","2013-03-28 11:41:43","","2","","<p>Use sys.argv. Which gives you a list of the items passed on the command line</p>

<pre><code>x = 10
ssh = paramiko.SSHClient()
ssh.connect(server, username=username, password=password)
ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(""./scriptB.py "" + str(x))
</code></pre>

<p>Script b</p>

<pre><code>import sys

y = int(sys.argv[1])
print y
</code></pre>

<p>sys.argv will be a list that contains <code>['./scriptB.py', '10']</code> in this case.</p>
","639295","","639295","","2013-11-04 10:06:20","2013-11-04 10:06:20","","","","3","","",""
"15679531","2","","15679467","2013-03-28 10:32:53","","6","","<p>Just create a loop over <code>os.listdir()</code>:</p>

<pre><code>import os

path = '/path/to/directory'
for filename in os.listdir(path):
    if not filename.endswith('.xml'): continue
    fullname = os.path.join(path, filename)
    tree = ET.parse(fullname)
</code></pre>
","100297","","","","","2013-03-28 10:32:53","","","","0","","",""
"15679634","2","","15679526","2013-03-28 10:39:42","","2","","<p>The easiest way to do this would be to use <code>zip</code> to combine the elements of the two lists into <code>tuple</code>s:</p>

<pre><code>a, b = zip(*sorted(zip(a, b)))
</code></pre>

<p><code>sorted</code> will compare the <code>tuple</code>s by their first element (the element from <code>a</code>) first; <code>zip(*...)</code> will ""unzip"" the sorted list.</p>
","567292","","","","","2013-03-28 10:39:42","","","","0","","",""
"15679667","2","","15679526","2013-03-28 10:41:25","","2","","<p>or may be just check everything is perfect then..copy list a for b</p>

<pre><code>if all(x in b for x in a) and len(a)==len(b):
    b=a[:]
</code></pre>
","1283171","","1283171","","2013-03-28 10:48:13","2013-03-28 10:48:13","","","","6","","",""
"15680860","2","","15679526","2013-03-28 11:42:16","","0","","<p>If you want to make <code>list2</code> identical to <code>list1</code>, you don't need to mess with order or re-arrange anything, just replace <code>list2</code> with a copy of <code>list1</code>:</p>

<pre><code>list2 = list(list1)
</code></pre>

<p><a href=""http://docs.python.org/3.3/library/functions.html#func-list"" rel=""nofollow""><code>list()</code></a> takes any iterable and produces a new list from it, so we can use this to copy <code>list1</code>, thus creating two lists that are exactly the same.</p>

<p>It might also be possible to just do <code>list2 = list1</code>, but do note that this will cause any changes to either to affect the other (as they point to the same object), so this is probably not what you want.</p>

<p>If <code>list2</code> is referenced elsewhere, and thus needs to remain the same object, it's possible to replace every value in the list using <code>list2[:] = list1</code>.</p>

<p>In general, you probably want the first solution.</p>
","722121","","","","","2013-03-28 11:42:16","","","","0","","",""
"39667373","2","","15679526","2016-09-23 18:29:05","","0","","<p>Sort b based on items' index in a, with all items not in a at the end.</p>

<pre><code>&gt;&gt;&gt; a=[1,4,5,2]
&gt;&gt;&gt; b=[4,3,1,5]
&gt;&gt;&gt; sorted(b, key=lambda x:a.index(x) if x in a else len(a))
[1, 4, 5, 3]
</code></pre>
","5382883","","","","","2016-09-23 18:29:05","","","","0","","",""
"15680677","2","","15679672","2013-03-28 11:32:31","","2","","<p>I'm posting this without further comments, for learning purposes (in the real life please do use a library). Note that there's no error checking (a homework for you!)</p>

<p>Feel free to ask if there's something you don't understand.</p>

<pre><code># PART 1. The Lexer

symbols = None

def read(input):
    global symbols
    import re
    symbols = re.findall(r'\w+|[()]', input)

def getsym():
    global symbols
    return symbols[0] if symbols else None

def popsym():
    global symbols
    return symbols.pop(0)

# PART 2. The Parser
# Built upon the following grammar:
#  
#     program = expr*
#     expr    = '(' func args ')'
#     func    = AND|OR|NOT
#     args    = arg*
#     arg     = string|expr
#     string  = [a..z]

def program():
    r = []
    while getsym():
        r.append(expr())
    return r

def expr():
    popsym() # (
    f = func()
    a = args()
    popsym() # )
    return {f: a}

def func():
    return popsym()

def args():
    r = []
    while getsym() != ')':
        r.append(arg())
    return r

def arg():
    if getsym() == '(':
        return expr()
    return string()

def string():
    return popsym()

# TEST = Lexer + Parser

def parse(input):
    read(input)
    return program()

print parse('(AND a b (OR c d)) (NOT foo) (AND (OR x y))')
# [{'AND': ['a', 'b', {'OR': ['c', 'd']}]}, {'NOT': ['foo']}, {'AND': [{'OR': ['x', 'y']}]}]
</code></pre>
","989121","","989121","","2013-03-28 11:40:47","2013-03-28 11:40:47","","","","1","","",""
"15688085","2","","15679719","2013-03-28 17:15:04","","2","","<p>You are basically reinventing the indexing scheme of a multidimensional array. It is relatively easy to code, but you can use the two functions <a href=""http://docs.scipy.org/doc/numpy/reference/generated/numpy.unravel_index.html"" rel=""nofollow""><code>unravel_index</code></a> and <a href=""http://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel_multi_index.html"" rel=""nofollow""><code>ravel_multi_index</code></a> to your advantage here.</p>

<p>If your grid is of <code>M</code> rows and <code>N</code> columns, to get the <code>idx</code> and <code>idy</code> of a single item you could do:</p>

<pre><code>&gt;&gt;&gt; M, N = 12, 10
&gt;&gt;&gt; np.unravel_index(4, dims=(M, N))
(0, 4)
</code></pre>

<p>This also works if, instead of a single index, you provide an array of indices:</p>

<pre><code>&gt;&gt;&gt; np.unravel_index([15, 28, 32, 97], dims=(M, N))
(array([1, 2, 3, 9], dtype=int64), array([5, 8, 2, 7], dtype=int64))
</code></pre>

<p>So if <code>cells</code> has the indices of several cells you want to find neighbors to:</p>

<pre><code>&gt;&gt;&gt; cells = np.array([15, 28, 32, 44, 87])
</code></pre>

<p>You can get their neighbors as:</p>

<pre><code>&gt;&gt;&gt; idy, idx = np.unravel_index(cells, dims=(M, N))
&gt;&gt;&gt; neigh_idx = np.vstack((idx-1, idx+1, idx, idx))
&gt;&gt;&gt; neigh_idy = np.vstack((idy, idy, idy-1, idy+1))
&gt;&gt;&gt; np.ravel_multi_index((neigh_idy, neigh_idx), dims=(M,N))
array([[14, 27, 31, 43, 86],
       [16, 29, 33, 45, 88],
       [ 5, 18, 22, 34, 77],
       [25, 38, 42, 54, 97]], dtype=int64)
</code></pre>

<p>Or, if you prefer it like that:</p>

<pre><code>&gt;&gt;&gt; np.ravel_multi_index((neigh_idy, neigh_idx), dims=(M,N)).T
array([[14, 16,  5, 25],
       [27, 29, 18, 38],
       [31, 33, 22, 42],
       [43, 45, 34, 54],
       [86, 88, 77, 97]], dtype=int64)
</code></pre>

<p>The nicest thing about going this way is that <code>ravel_multi_index</code> has a <code>mode</code> keyword argument you can use to handle items on the edges of your lattice, see the docs.</p>
","110026","","","","","2013-03-28 17:15:04","","","","0","","",""
"15680192","2","","15679734","2013-03-28 11:07:25","","2","","<p>You'll have to reference the <a href=""http://docs.python.org/2/library/xml.dom.html"" rel=""nofollow"">XML DOM documentation</a> and grit your teeth.</p>

<p>To get the first <code>&lt;server&gt;</code> element, then its <code>&lt;name&gt;</code>:</p>

<pre><code>from xml.dom import minidom

document = minidom.parse(inputfilename)

def findChildNodeByName(parent, name):
¬† ¬† for node in parent.childNodes:
¬† ¬† ¬† ¬† if node.nodeType == node.ELEMENT_NODE and node.localName == name:
            return node
¬† ¬† return None

def getText(nodelist):
    rc = []
    for node in nodelist:
        if node.nodeType == node.TEXT_NODE:
            rc.append(node.data)
    return ''.join(rc)

# Get the first of all `&lt;server&gt;` nodes
server = document.getElementsByTagName('server')[0]

# Get the first child node that is a `&lt;name&gt;` element
name = findChildNodeByName(server, 'name')
if name is not None:
    print getText(name.childNodes)
</code></pre>
","100297","","4023","","2014-03-10 14:11:05","2014-03-10 14:11:05","","","","5","","",""
"15680564","2","","15679762","2013-03-28 11:25:39","","1","","<p>Ok, the code seems somewhat confused. Here's a simpler version that seems to do what you want:</p>

<pre><code>#!/usr/bin/env python3

EXCHANGE_DATA = [('AIA', 'Auckair', 1.50),
                 ('AIR', 'Airnz', 5.60),
                 ('AMP', 'Amp',3.22)]

user_input = input(""Please Specify Shares: "")

names = set(user_input.upper().split())

print ('Listing the following shares: ' + str(names))
print ("" "")

# Print header
n=[""Code"", ""Name"", ""Price""]
print ('{0: &lt;6}{1:&lt;20}{2:&gt;8}'.format(n[0],n[1],n[2]))

#print data
for i in [data for data in EXCHANGE_DATA if data[0] in names]:
  print ('{0: &lt;6}{1:&lt;20}{2:&gt;8}'.format(i[0],i[1],i[2]))
</code></pre>

<p>And here's an example of use:</p>

<pre><code>‚û§ python3 program.py 
Please Specify Shares: air amp
Listing the following shares: {'AMP', 'AIR'}

Code  Name                   Price
AIR   Airnz                    5.6
AMP   Amp                     3.22
</code></pre>

<p>The code sample you provided actually does what was expected, if you gave it space separated quote names.</p>

<p>Hope this helps.</p>
","140264","","","","","2013-03-28 11:25:39","","","","4","","",""
"15679995","2","","15679782","2013-03-28 10:57:04","","16","","<p><code>cr.dictfetchall()</code> will give you all the matching records in the form of ** list of dictionary** containing <strong>key, value</strong>. </p>

<p><code>cr.dictfetchone()</code> works same way as <code>cr.dictfetchall()</code> except it returns only single record.</p>

<p><code>cr.fetchall()</code> will give you all the matching records in the form of <strong>list of tupple</strong>.</p>

<p><code>cr.fetchone()</code> works same way as <code>cr.fetchall()</code> except it returns only single record.</p>

<p>In your given query, if you use:</p>

<ol>
<li><code>cr.dictfetchall()</code> will give you <code>[{'reg_no': 123},{'reg_no': 543},]</code>.</li>
<li><code>cr.dictfetchone()</code> will give you <code>{'reg_no': 123}</code>.</li>
<li><code>cr.fetchall()</code> will give you '[(123),(543)]'.</li>
<li><code>cr.fetchone()</code> will give you '(123)'.</li>
</ol>
","1155500","","1155500","","2013-03-28 11:02:32","2013-03-28 11:02:32","","","","2","","",""
"15680787","2","","15680583","2013-03-28 11:38:34","","0","","<p>This could be due to network congestion in your LAN. If it is just happening for a little while like 1 minute. </p>
","1768226","","","","","2013-03-28 11:38:34","","","","2","","",""
"15680781","2","","15680593","2013-03-28 11:38:22","","14","","<p>Notice you are not only working with 1D arrays:</p>

<pre><code>In [6]: a.ndim
Out[6]: 1

In [7]: b.ndim
Out[7]: 2
</code></pre>

<p>So, <code>b</code> is a 2D array.
You also see this in the output of <code>b.shape</code>: (1,3) indicates two dimensions as (3,) is one dimension.</p>

<p>The behaviour of <code>np.dot</code> is different for 1D and 2D arrays (from the <a href=""http://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html"" rel=""noreferrer"">docs</a>):</p>

<blockquote>
  <p>For 2-D arrays it is equivalent to matrix multiplication, and for 1-D
  arrays to inner product of vectors</p>
</blockquote>

<p>That is the reason you get different results, because you are mixing 1D and 2D arrays. Since <code>b</code> is a 2D array, <code>np.dot(b, b)</code> tries a matrix multiplication on two 1x3 matrices, which fails.</p>

<hr>

<p>With 1D arrays, np.dot does a inner product of the vectors:</p>

<pre><code>In [44]: a = np.array([1,2,3])

In [45]: b = np.array([1,2,3])

In [46]: np.dot(a, b)
Out[46]: 14

In [47]: np.inner(a, b)
Out[47]: 14
</code></pre>

<p>With 2D arrays, it is a matrix multiplication (so 1x3 x 3x1 = 1x1, or 3x1 x 1x3 = 3x3):</p>

<pre><code>In [49]: a = a.reshape(1,3)

In [50]: b = b.reshape(3,1)

In [51]: a
Out[51]: array([[1, 2, 3]])

In [52]: b
Out[52]:
array([[1],
       [2],
       [3]])

In [53]: np.dot(a,b)
Out[53]: array([[14]])

In [54]: np.dot(b,a)
Out[54]:
array([[1, 2, 3],
       [2, 4, 6],
       [3, 6, 9]])

In [55]: np.dot(a,a)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-55-32e36f9db916&gt; in &lt;module&gt;()
----&gt; 1 np.dot(a,a)

ValueError: objects are not aligned
</code></pre>
","653364","","166749","","2013-03-28 15:32:14","2013-03-28 15:32:14","","","","4","","",""
"15682527","2","","15680809","2013-03-28 13:01:54","","0","","<p>Personally, I'd store an rrule object from python-dateutil (<a href=""http://labix.org/python-dateutil"" rel=""nofollow"">http://labix.org/python-dateutil</a>) rather than inventing your own recurrence format. Then you can just define some methods that use <code>rrule. between(after, before)</code> to generate instances of your event object for a given range.</p>

<p>One catch though, dateutil's rrule object <em>doesn't pickle correctly</em>, so you should define your own mechanism of serialising the object to the database. I've generally gone with a JSON representation of the keyword arguments for instantiating the rrule. The annoying edge case is that if you want to store stuff like '2nd Monday of the month', you have to do additional work with MO(2), because the value it returns isn't useful. It's hard to explain, but you'll see the problem when you try it.</p>

<p>I'm not aware of any efficient way to find all eligible events within a range though, you'll have to load in all the Event models that potentially overlap with the range. So you'll always be loading in potentially more data than you'll eventually use. Just make sure relatively smart about it to reduce the burden. Short of someone adding recurrence handling to databases themselves, I'm not aware of any way to improve this.</p>
","15687","","","","","2013-03-28 13:01:54","","","","2","","",""
"16031745","2","","15680836","2013-04-16 08:03:37","","4","","<p>The problem is the name of your script file: <code>netrc.py</code> which is the same as the module name. Rename it.</p>

<p>Providing filename to <code>netrc.netrc()</code> causes only to use the specific netrc file in place of the default <code>~\.netrc</code>.</p>
","2285485","","","","","2013-04-16 08:03:37","","","","0","","",""
"15735445","2","","15684178","2013-03-31 22:45:24","","1","","<p>you said a long line is divided in 2 lines or more,right?</p>

<p>you could count lines this way</p>

<pre><code>count=0
for a in string.split():
    count+= 1+a//MaxLen
</code></pre>

<p>where string is the text you are dealing with, and MaxLen is the maximum number of characters that the textbox can show in a line</p>

<p>but this just doesn't solve the problem if you don't know how to get MaxLen,and i actually don't...</p>
","1569222","","","","","2013-03-31 22:45:24","","","","2","","",""
"32752419","2","","15684178","2015-09-24 02:32:46","","0","","<p>A little late but just in-case someone else could use this, here is my solution. This example will dynamically size the height of the curses textpad widget.</p>

<pre><code>#!/usr/bin/env python 
# -*- coding: utf-8 -*-

# Purpose: Test Scrolling
#
# File test.py
# Author: Dan Huckson
# Date: 20150922
#

import curses

def main(stdscr):
    vpwidth = 1
    vpheight = 30
    string = ""A\n BB\n  CCC\n   DDDD\n    EEEEE\n     FFFFFF\n      GGGGGGG\n       HHHHHHHH\n        JJJJJJJJJ\n         KKKKKKKKKK\n          LLLLLLLLLLL\n           MMMMMMMMMMMM\n            NNNNNNNNNNNNN\n             OOOOOOOOOOOOOO END""

    height = w = 0  
    stdscr.refresh() 
    for c in string:
        if c == '\n' and not w: height += 1
        else:
            if c != '\n':
                w += 1
                if w &lt; vpwidth: continue
            elif w == vpwidth: height += 1
            w = 0     
            height += 1
    if w: height += 1

    pad = curses.newpad(height+1, vpwidth)
    pad.addstr(string)

    top = 0
    left = 3
    offset = key = 0  
    while True:
        if key == curses.KEY_UP and offset: offset -= 1
        elif  key == curses.KEY_DOWN and (offset + vpheight) &lt; height:
            offset += 1

        pad.refresh(offset, 0, top, left, vpheight+top, vpwidth+left)

        for i in range(vpheight):
            stdscr.addstr(i,0, (' %s:' % i)[-3:])

        stdscr.addstr(vpheight,0,   '   ----~----+----~----+----~----+----~----+----~----+----~----+----~----+----~----')
        stdscr.addstr(vpheight+1,0, '            10        20        30        40        50        60        70        ')
        stdscr.addstr(vpheight+2,0, '                                                                               ')
        stdscr.addstr(vpheight+4,0, '%s %s %s %s %s %s %s %s  ' % (offset, 0, 0, 0, vpheight,  vpwidth, height, len(string)))

        key = stdscr.getch()


curses.wrapper(main)
</code></pre>
","4134847","","4134847","","2015-09-25 00:41:44","2015-09-25 00:41:44","","","","0","","",""
"15685030","2","","15684335","2013-03-28 14:53:18","","0","","<p>If there are no results in a list that you query on, TastyPie would just send back Json with zero elements (something like the following): </p>

<pre><code>{
    meta: {
        limit: 20,
        next: null,
        offset: 0,
        previous: null,
        total_count: 0
    },
}
</code></pre>

<p>So it seems that if you're getting a 404, you don't have something set up correctly. </p>

<p>The following things could resolve your issue:</p>

<ul>
<li>Make sure you have <code>?format=json</code> appended to your url before the <code>&amp;</code></li>
<li>Make sure you've registered the APIResource</li>
<li>Make sure you've set up the appropriate urls.py if anything is different.</li>
</ul>
","16587","","","","","2013-03-28 14:53:18","","","","0","","",""
"15686380","2","","15684473","2013-03-28 15:51:56","","2","","<p>I used the following for anyone that is interested:</p>

<pre><code>def peopleInfo():
    txtFile = open(""info.txt"", ""w"")
    i = 0
    for i in range(0, 3):
        name = input(""Enter name "")
        age = input(""Enter age "")
        hometown = input(""Enter hometown "")
        txtFile.write(name + ""\n"" + age + ""\n"" + hometown + ""\n"")
    txtFile.close()

def splitLine():
    txtFile = open(""info.txt"", ""r"")
    lineList = []
    i = 0
    for line in txtFile:
        lineList.append(line.rstrip(""\n""))
        if ""Oxford"" in lineList[i]:
            print(lineList[i - 2])
        i += 1
</code></pre>
","2174444","","1628832","","2013-03-28 16:14:09","2013-03-28 16:14:09","","","","0","","",""
"15684711","2","","15684557","2013-03-28 14:40:18","","1","","<p>You should call it using the class instead of object. So change your call to</p>

<pre><code>QuizWizard.as_view(question_forms)(request)
</code></pre>

<p>Update:</p>

<p>The wizard view takes form class list as parameters not the form instance. You are creating form instances in <code>question_forms</code> and passing it to view.</p>

<p>If you want to pass instance for the form in each step, you can pass <code>instance_dict</code>.
Something like ...</p>

<pre><code>inst_dict = { '0': question_forms[0], #step 0 instance
              '1': question_forms[1], #step 1 instance
            }
QuestFormList = [QuestionForm, QuestionForm ...]
QuizWizard.as_view([QuestFormList, instance_dict=inst_dict)(request)
</code></pre>
","229410","","229410","","2013-04-02 04:32:28","2013-04-02 04:32:28","","","","5","","",""
"15684617","2","","15684605","2013-03-28 14:35:23","","59","","<p>Use the <a href=""http://docs.python.org/2/library/functions.html#enumerate"" rel=""noreferrer""><code>enumerate()</code> function</a> to generate the index along with the elements of the sequence you are looping over:</p>

<pre><code>for index, w in enumerate(loopme):
    print ""CURRENT WORD IS"", w, ""AT CHARACTER"", index 
</code></pre>
","100297","","","","","2013-03-28 14:35:23","","","","5","","",""
"15684860","2","","15684605","2013-03-28 14:47:02","","3","","<p>Do you want to iterate over characters or words?</p>

<p>For words, you'll have to split the words first, such as</p>

<pre><code>for index, word in enumerate(loopme.split("" "")):
    print ""CURRENT WORD IS"", word, ""AT INDEX"", index
</code></pre>

<p>This prints the index of the word.</p>

<p>For the absolute character position you'd need something like</p>

<pre><code>chars = 0
for index, word in enumerate(loopme.split("" "")):
    print ""CURRENT WORD IS"", word, ""AT INDEX"", index, ""AND AT CHARACTER"", chars
    chars += len(word) + 1
</code></pre>
","296974","","","","","2013-03-28 14:47:02","","","","0","","",""
"15684679","2","","15684662","2013-03-28 14:38:53","","2","","<p>You'd read the lines into memory, into a list and then index into that list:</p>

<pre><code>with open('somefile') as fileobj:
    lines = list(fileobj)

for index in indices:
    print lines[index]
</code></pre>
","100297","","","","","2013-03-28 14:38:53","","","","2","","",""
"15685001","2","","15684662","2013-03-28 14:52:15","","0","","<pre><code>file = [ l for l in open('file.name') ]
for i in list:
   print file[i]
</code></pre>
","1952956","","","","","2013-03-28 14:52:15","","","","4","","",""
"15702263","2","","15684687","2013-03-29 11:25:14","","0","","<p>I figured out how to make it work. From this:</p>

<pre><code>qry = ""Insert into prints set print = '{0}'"".format(printBin)
</code></pre>

<p>To this:</p>

<pre><code>qry = ""Insert into prints set print = '0x{0}'"".format(printBin)
</code></pre>
","2220157","","","user1006989","2013-03-30 12:44:19","2013-03-30 12:44:19","","","","0","","",""
"15688667","2","","15684842","2013-03-28 17:44:17","","1","","<p>Assignment itself does nothing. <code>rc</code> here is your client. Doing <code>rc[0]</code>, or any sort of indexing, generates and returns a DirectView object that's a view with whatever engines you specify in []. This is a shorthand for generating the views: it's not actually just getting a specific object.</p>

<p>Thus, those views aren't unique. The best way to explain it, I think, is with an example. Say you have 2 engines. You want to run some tasks on only engine one, and want the tasks to block. You want to run others on only engine one, but don't want them to block. You want to run yet more on engines 1 and 2, and don't want them to block. Then you could do:</p>

<pre><code>view_1_block = rc[0]
view_1_block.block = True
view_2_noblock = rc[0]
view_2_noblock.block = False
view_3_noblock = rc[[0,1]]
view_3_noblock.block = False
</code></pre>

<p>Then, you can use these to run tasks in whatever way you'd like, eg</p>

<pre><code>view_1_block.map(lambda x:x**10, range(32)) # blocks, returns results, runs only on 1
view_3_noblock.map(lambda x:x**10, range(32)) # does not block, returns AsyncResult, runs on 1 and 2
</code></pre>

<p>There's no actual magic being used here. When you run rc[0] twice, it generates two views. The second view is not the same as the first. When you assign rc[0] to a variable, and then use that variable, you're working with one view, and not creating a new one. </p>

<p>iPython, like Numpy and Scipy, has quite a few shorthand notations that don't necessarily fit Python's idioms perfectly. This is especially the case with [] and getitem. A purer Python way of writing this could would be to use the much more unwieldy <code>rc.direct_view(1)</code>, and so on, which would make clear that this wasn't just getting an item, and was actually creating a view.</p>
","599265","","599265","","2013-03-28 17:55:02","2013-03-28 17:55:02","","","","0","","",""
"15685014","2","","15684881","2013-03-28 14:52:44","","22","","<p>The python <a href=""http://docs.python.org/2/library/copy.html"" rel=""noreferrer""><code>copy</code> module</a> can reuse the <a href=""http://docs.python.org/2/library/pickle.html#module-pickle"" rel=""noreferrer""><code>pickle</code> module</a> interface for letting classes customize copy behaviour.</p>

<p>The default for instances of custom classes is to create a new, empty class, swap out the <code>__class__</code> attribute, then for shallow copies, just update the <code>__dict__</code> on the copy with the values from the original. A deep copy recurses over the <code>__dict__</code> instead.</p>

<p>Otherwise, you specify a <code>__getstate__()</code> method to return internal state. This can be any structure that your class <code>__setstate__()</code> can accept again.</p>

<p>You can also specify the <code>__copy__()</code> and/or <code>__deepcopy__()</code> methods to control <em>just</em> copy behaviour. These methods are expected to do all the copying themselves, the <code>__deepcopy__()</code> method is passed a memo mapping to pass on to recursive <code>deepcopy()</code> calls.</p>

<p>An example could be:</p>

<pre><code>from copy import deepcopy

class Foo(object):
    def __init__(self, bar):
        self.bar = bar
        self.spam = expression + that * generates - ham   # calculated

    def __copy__(self):
        # self.spam is to be ignored, it is calculated anew for the copy
        # create a new copy of ourselves *reusing* self.bar
        return type(self)(self.bar)

    def __deepcopy__(self, memo):
        # self.spam is to be ignored, it is calculated anew for the copy
        # create a new copy of ourselves with a deep copy of self.bar
        # pass on the memo mapping to recursive calls to copy.deepcopy
        return type(self)(deepcopy(self.bar, memo))
</code></pre>

<p>This example defines custom copy hooks to prevent <code>self.spam</code> being copied too, as a new instance will calculate it anew.</p>
","100297","","100297","","2013-03-28 21:23:10","2013-03-28 21:23:10","","","","3","","",""
"15685854","2","","15685631","2013-03-28 15:28:43","","1","","<p>When you install python on Windows, select ""for current user only"" rather than ""for all users of this system"" when you're asked. And select the installation target to some custom directory, e.g. D:\mypython\</p>

<p>This kind of installation will package all necessary binaries and DLL files (e.g. msvcr90.dll) to this specified dir, with which you can deploy easily to another system (with same CPU-bit and operating system).</p>

<p>(I got this solution from a Chinese website <a href=""http://www.oschina.net/question/23734_13481"" rel=""nofollow"">http://www.oschina.net/question/23734_13481</a> - comment 1)</p>
","1758036","","","","","2013-03-28 15:28:43","","","","0","","",""
"15685898","2","","15685631","2013-03-28 15:31:06","","1","","<p>I think it certainly sounds like a viable option. As far as I know, the only ""interaction"" the official Python installer has with Windows is to add registry keys associating <code>.py</code> and <code>.pyw</code> files with the proper executables and possibly modifying the <code>PATH</code> variable. As long as the user has the correct <code>.dll</code> files to which the <code>.exe</code>'s are linked, you could just zip up <code>c:\Python33</code> or whichever version you're using and distribute that with your application. Before you do that, though, clone the directory and go through <code>c:\clonedPython\libs\site-packages</code> and get rid of any modules that aren't required for your application. Don't delete any necessary dependencies!</p>

<p><a href=""http://www.portablepython.com/"" rel=""nofollow"">Portable Python</a> is a possibility, but there may be some issues with certain modules not working properly, and it's not available yet for Python 3.3 (3.2.1 is the latest version, as well as 2.7.3), so if you have version-dependent syntax that might not be the best choice.</p>
","1426065","","1426065","","2013-03-28 15:53:26","2013-03-28 15:53:26","","","","7","","",""
"15686095","2","","15685631","2013-03-28 15:39:26","","2","","<p>Use <a href=""http://www.portablepython.com/"" rel=""nofollow"">Portable Python</a> - it is a version of python modified to do exactly what you want.</p>
","206417","","","","","2013-03-28 15:39:26","","","","3","","",""
"17002763","2","","15685682","2013-06-08 18:52:46","","0","","<p>When you call pyglet.app.run(), you enter the pyglet loop and it doesn't come back until the pyglet window is closed, so your m.menu() is called only when the pyglet loop ends. If you remove the pyglet.app.run line from Main and call it like this:</p>

<pre><code>m = Main(pyglet.window.Window(width=1024, height=768))
m.menu()
pyglet.app.run()
print ""Window is closed now.""
</code></pre>

<p>It works.</p>
","2358842","","","","","2013-06-08 18:52:46","","","","0","","",""
"15688783","2","","15688744","2013-03-28 17:51:36","","0","","<p>Why not use <code>split</code> (or <code>partition</code>) and <code>strip</code>?</p>

<pre><code>for line in lines:
    key, sep, value = line.partition(':')
    key = key.strip()
    value = value.strip()
</code></pre>

<p>If you're really needing to use regular expressions, you can format them, too:</p>

<pre><code>r'%s\s*:\s*\d+' % 'width'
</code></pre>

<p>Or for each key:</p>

<pre><code>regexes = [r'%s\s*:\s*\d+' % key for key in ['width', 'height', ...]]
</code></pre>
","173556","","","","","2013-03-28 17:51:36","","","","0","","",""
"15688847","2","","15688744","2013-03-28 17:54:28","","1","","<p>I would do something like the following:</p>

<pre><code>key_word = ['width', 'height', 'left', 'right']
regex_template = r'{}\s*:\s*\d+'
for key in key_word:
    print re.search(regex_template.format(key), line)
</code></pre>
","505154","","","","","2013-03-28 17:54:28","","","","0","","",""
"15688879","2","","15688744","2013-03-28 17:55:44","","1","","<p>You can also just use a generic regex:</p>

<pre><code>matches = re.findall(r'(.*?)\s*:\s*(\d+)', text)
</code></pre>

<p><code>matches</code> will be a list of <code>(key, value)</code> tuples.</p>
","464744","","","","","2013-03-28 17:55:44","","","","0","","",""
"15688986","2","","15688744","2013-03-28 18:00:51","","0","","<p>You don't need regular expressions for this task. See other answers.</p>

<p>However if you insist, you can create one dynamically using <a href=""http://docs.python.org/2/library/re.html#re.escape"" rel=""nofollow""><code>re.escape</code></a>:</p>

<pre><code>import re

key_word = ['width', 'height', 'left', 'right']

myre = r'({})\s*:\s*(\d+)'.format('|'.join(map(re.escape, key_word)))
</code></pre>
","1002469","","","","","2013-03-28 18:00:51","","","","0","","",""
"15688937","2","","15688887","2013-03-28 17:58:46","","10","","<p>This depends on the OS and the CPU architecture. On x86 (Intel compatible) the operating system might execute <a href=""http://en.wikipedia.org/wiki/HLT"" rel=""nofollow"">HLT</a> instructions, making the CPU wait until something interesting happens, such as a hardware interrupt. This supposedly consumes very little power. Operating systems report the time spent doing this as ""<a href=""http://en.wikipedia.org/wiki/Idle_%28CPU%29"" rel=""nofollow"">idle</a>"" and may even assign it to a fictional ""idle"" process.</p>

<p>So, when in Windows task manager you see that the <a href=""http://en.wikipedia.org/wiki/System_Idle_Process"" rel=""nofollow"">System Idle Process</a> is consuming 90% CPU what it really means is that the CPU does not have an actual a program to run 90% of the time.</p>

<p>Here's a good article on the subject: <a href=""http://duartes.org/gustavo/blog/post/what-does-an-idle-cpu-do/"" rel=""nofollow"">What does an idle CPU do?</a></p>
","318758","","318758","","2014-12-30 15:44:17","2014-12-30 15:44:17","","","","3","","",""
"15688958","2","","15688887","2013-03-28 17:59:48","","2","","<p>There's always code to run, the idle task is the code if there's nothing else. It may execute a special CPU instruction to power down the CPU until a hardware interrupt arrives. On x86 CPUs it's <code>hlt</code> (halt).</p>
","968261","","","","","2013-03-28 17:59:48","","","","0","","",""
"15689206","2","","15688887","2013-03-28 18:12:31","","4","","<p>Historically it's been a lot of different schemes, especially before reducing power consumption in idle was an issue.</p>

<p>Generally there is an ""idle"" process/task that runs at the lowest priority and hence always gets control when there's nothing else to do.  Many older systems would simply have this process run a ""do forever"" loop with nothing of consequence in the loop body.  One OS I heard of would run machine diagnostics in the idle process.  A number of early PCs would run a memory refresh routine (since memory needed to be cycled regularly or it would ""evaporate"").</p>

<p>(A benefit of this scheme is that 100% minus the % CPU used by the idle process gives you the % CPU utilization -- a feature that was appreciated by OS designers.)</p>

<p>But the norm on most modern systems is to either run a ""halt"" or ""wait"" instruction or have a special flag in the process control block that even more directly tells the processor to simply stop running and go into power-saving mode.</p>
","581994","","581994","","2013-03-28 19:52:04","2013-03-28 19:52:04","","","","1","","",""
"15690680","2","","15688887","2013-03-28 19:39:24","","2","","<p>This answer is specific to Windows NT-based OS.</p>

<h3>Idle thread functioality</h3>

<p>Tasks may vary between architectures, but generally these are the tasks performed by idle threads:</p>

<ul>
<li>Enable interrupts to allow pending interrupts be delivered</li>
<li>Disable interrupts (using <code>STI</code> or <code>CLI</code> instructions, <a href=""https://en.wikipedia.org/wiki/Interrupt_flag"" rel=""nofollow"">more on wiki</a>)</li>
<li>On the <code>DEBUG</code> (or <a href=""http://msdn.microsoft.com/en-gb/library/windows/hardware/ff543450%28v=vs.85%29.aspx"" rel=""nofollow"">checked</a>) builds, query if a kernel debugger is attached and allow breakpoints if been requested</li>
<li>Handle deferred procedure calls</li>
<li>Check if there are any runnable threads ready for execution. If there is one, update the idle processor control block with a pointer to the thread</li>
<li>Check the queues of other processors, if possible schedule thread awaiting execution on the idle processor</li>
<li>Call a power management routine, which may halt a processor or downgrade CPU tick rate and do other similar power saving activities</li>
</ul>

<h3>Additional info</h3>

<p>When there are no runnable threads for a logical processor, Windows executes a kernel-mode idle thread. There is only 1 Idle process that has as many idle threads as there are logical processors. So on a Quad core machine with 4 logical/physical processors, there will be 1 Idle process and 4 idle threads.</p>

<p>In Windows, Idle process has ID = 0, so do all the Idle threads. These objects are represented by standard <code>EPROCESS/KPROCESS</code> and <code>ETHREAD/KTHREAD</code> data structures. But they are not executive manager processes and threads objects. There are no user-land address space and no user-land code is executed..</p>

<p>Idle process is statically allocated at system boot time before the process manager and object manager are set up. Idle thread structures are allocated dynamically as logical processors are brought live.</p>

<p>Idle thread priority is set to 0. However, this value doesn't actually matter as this thread only gets executed when there are no other threads available to run. Idle thread priority is never compared with priority of any other threads.</p>

<p>Idle threads are also special cases for <a href=""https://en.wikipedia.org/wiki/Preemption_%28computing%29"" rel=""nofollow"">preemption</a>. The idle thread main routine <code>KiIdleLoop</code> (<a href=""http://doxygen.reactos.org/d8/dc0/ntoskrnl_2ke_2amd64_2stubs_8c_ac8f6ede68a6bffcf075696a6c8d36ce9.html#ac8f6ede68a6bffcf075696a6c8d36ce9"" rel=""nofollow"">implementation</a> from <a href=""http://reactos.org"" rel=""nofollow"">reactos</a>) performs several tasks that are not interrupted by other threads. When there are no runnable threads available to run on a processor, that processor is marked as idle in a processor control block. Then if a runnable threads arrives to the queue scheduled for execution, that thread's address pointer is stored in the <code>NextThread</code> pointer of the idle processor control block. During the run of an idle thread, this pointer address gets checked on every iteration inside a <code>while</code> loop.</p>

<p><sup>Source: Windows Internals. M. Russinovich. 6-th edition. Part 1, p.453 - 456.</sup></p>
","706456","","","","","2013-03-28 19:39:24","","","","0","","",""
"15688943","2","","15688889","2013-03-28 17:58:56","","4","","<p>It's equivalent to </p>

<pre><code>status = app.exec_()   # run app, show window, wait for input
sys.exit(status)       # terminate program with a status code returned from app
</code></pre>
","830012","","","","","2013-03-28 17:58:56","","","","5","","",""
"15688946","2","","15688889","2013-03-28 17:59:00","","3","","<p>The last line is two functions. First it runs <code>app.exec_()</code> (which shows the main window of your application), then when that function ends, it passes the return value to as a parameter to <a href=""http://docs.python.org/2/library/sys.html#sys.exit"" rel=""nofollow""><code>sys.exit</code></a>, which ends the program and sends the return value to the operating system (you can see this on *nix systems with <code>echo $?</code> after the program ends).</p>

<p>The reason it doesn't immediately exit is that Python can't execute <code>sys.exit</code> until it knows the value of the parameter to it, and it won't know that until <code>app.exec_()</code> finishes.</p>
","212555","","","","","2013-03-28 17:59:00","","","","1","","",""
"15689294","2","","15688898","2013-03-28 18:16:36","","6","","<p>Buildpacks are the mechanism Heroku uses to build your application including installing dependencies. Pip is not installed by default, the Python buildpack itself pulls this dependency in. You could use the multi-buildpack which allows you to include several buildpacks. </p>

<p>Multi buildpack - <a href=""https://github.com/ddollar/heroku-buildpack-multi"">https://github.com/ddollar/heroku-buildpack-multi</a></p>

<p>Python buildpack - <a href=""https://github.com/heroku/heroku-buildpack-python"">https://github.com/heroku/heroku-buildpack-python</a></p>

<p>Ruby buildpack - <a href=""https://github.com/heroku/heroku-buildpack-ruby"">https://github.com/heroku/heroku-buildpack-ruby</a></p>
","322705","","","","","2013-03-28 18:16:36","","","","0","","",""
"15692895","2","","15688954","2013-03-28 21:58:41","","1","","<p>You can't unload C extension modules at all.  There is just no way to do it, and I know for sure that most of the standard extension modules would leak like crazy if there was.</p>
","1556290","","","","","2013-03-28 21:58:41","","","","1","","",""
"15689238","2","","15689151","2013-03-28 18:13:46","","3","","<p>You can set the root to use your FE url patterns like this:</p>

<pre><code>urlpatterns = patterns('',
    url(r'^', include('frontend.urls', namespace=""frontend"")),
)
</code></pre>

<p>If you wanna forcibly redirect to /frontend/ then you will need a view to handle the redirect.</p>

<p>Maybe look at the Redirect Generic view: <a href=""https://docs.djangoproject.com/en/1.1/ref/generic-views/#django-views-generic-simple-redirect-to"" rel=""nofollow"">https://docs.djangoproject.com/en/1.1/ref/generic-views/#django-views-generic-simple-redirect-to</a></p>
","1199394","","","","","2013-03-28 18:13:46","","","","1","","",""
"15689361","2","","15689237","2013-03-28 18:20:40","","2","","<p>In this case, the preferred form is <code>x &lt; 5000</code> because it is simpler and you are already using a numpy array.</p>

<p><code>ufunc</code>s are meant to allow these operations to be done on any type of data (not only numpy arrays)</p>

<pre><code>&gt;&gt;&gt; numpy.less([1, 2, 3, 4, 6, 8], 5)
array([ True,  True,  True,  True, False, False], dtype=bool)

&gt;&gt;&gt; [1, 2, 3, 4, 6, 8] &lt; 5
False
</code></pre>

<p>On Python 3, this last comparison will raise an error.</p>
","754991","","","","","2013-03-28 18:20:40","","","","3","","",""
"15689944","2","","15689237","2013-03-28 18:54:00","","2","","<p>Generally speaking, thinking of the ""readability counts"" mantra, the actual operator should always be your preferred choice. Using the <code>operator</code> versions has a place, when you can replace <code>lambda a, b: a &lt; b</code> with the more compact <code>operator.lt</code>, but not much outside of that. And you really shouldn't be using explicit calls to the corresponding ufunc, unless you want to use the <code>out</code> parameter to store the calculated values directly in an existing array.</p>

<p>That said, if what you are worried is performance, you should do fair comparisons, because as you say, all your calls are eventually handled by numpy's <code>less</code> ufunc.</p>

<p>If your data is already in a numpy array, then you have already shown that they are all performing similarly, so go with the <code>&lt;</code> operator for clarity.</p>

<p>What if your data is in a python object, say a list? Well, here are some timings for you to ponder:</p>

<pre><code>In [13]: x = range(10**5)

In [19]: %timeit [j &lt; 5000 for j in x]
100 loops, best of 3: 5.32 ms per loop

In [20]: %timeit np.less(x, 5000)
100 loops, best of 3: 11.3 ms per loop

In [21]: %timeit [operator.lt(j, 5000) for j in x]
100 loops, best of 3: 16.2 ms per loop
</code></pre>

<p>Not sure why <code>operator.lt</code> is so slow, but you clearly want to stay away from it. If you want to get a numpy array as output from a Python object input, then this will probably be the fastest:</p>

<pre><code>In [22]: %timeit np.fromiter((j &lt; 5000 for j in x), dtype=bool, count=10**5)
100 loops, best of 3: 7.91 ms per loop
</code></pre>

<p>Note that ufuncs operating on numpy arrays are <strong>much</strong> faster than any of the above:</p>

<pre><code>In [24]: y = np.array(x)

In [25]: %timeit y &lt; 5000
10000 loops, best of 3: 82.8 us per loop
</code></pre>
","110026","","110026","","2013-03-28 20:02:34","2013-03-28 20:02:34","","","","2","","",""
"17602727","2","","15689260","2013-07-11 20:20:31","","0","","<p>I found a hacky workaround, as per usual.  But this behavior is still a bug.</p>

<p>The workaround is to <code>dispose()</code> of the old window and then to call <code>edit_traits()</code> on it.  This edits the <code>File</code> trait and also happens to make it the active window.  Disposing of the window manually has to be done inside the handler and is a little trickier than might be expected.</p>

<pre><code>from traits.api import *
from traitsui.api import *
from traitsui.file_dialog import *

class BigApplication(Handler):
  subwindow=Instance(Handler)
  open_subwindow=Button('clickme')

  traits_view=View(Item(name='open_subwindow'),height=200,width=200)

  def _subwindow_default(self):
    return Subwindow()

  def _open_subwindow_fired(self):
    self.subwindow.edit_traits()

class Subwindow(Handler):
  f=File
  some_additional_option=Bool
  openf=Button('Browse')

  traits_view=View(Item(name='f',style='text'),
    Item(name='some_additional_option'),
    Item(name='openf'),
    buttons=OKCancelButtons)

  def _openf_fired(self):
    self.f=open_file()
    self.do_dispose(self.info)
    self.edit_traits()

  #handler methods
  def init_info(self,info):
    self.info=info
  def do_dispose(self,info):
    info.ui.dispose()

BigApplication().configure_traits()
</code></pre>
","2040716","","","","","2013-07-11 20:20:31","","","","0","","",""
"15689317","2","","15689290","2013-03-28 18:18:28","","2","","<p>You can use list comprehension for achieving this:</p>

<pre><code>str_list = ['%s'%(x) for x in range(0, 5)]
</code></pre>
","1628832","","","","","2013-03-28 18:18:28","","","","0","","",""
"15689331","2","","15689290","2013-03-28 18:19:26","","4","","<p>You're looking for:</p>

<pre><code>for x in (str(y) for y in range(0, 5)):
</code></pre>

<p>This doesn't come with the overhead of instantiating the <code>str</code> list (though with 5 elements it's hardly an issue). Whenever I encounter this, though, I generally just use <code>str(y)</code> within the body of the loop.</p>
","173556","","","","","2013-03-28 18:19:26","","","","2","","",""
"15689346","2","","15689290","2013-03-28 18:19:55","","4","","<p>An easy way is to use the <code>map()</code> function:</p>

<pre><code>for y in map(str, range(0, 5)):
    # ...
</code></pre>

<p>The <code>map()</code> function takes an iterable and passes each elem through the first arg which is a callable.</p>
","1172428","","","","","2013-03-28 18:19:55","","","","5","","",""
"15689351","2","","15689290","2013-03-28 18:20:17","","1","","<p>You want to search for <a href=""http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions"" rel=""nofollow"">List Comprehensions</a> most likely.</p>

<pre><code>[(str(y),y) for y in range(0,5)]
</code></pre>

<p>This will give you tuples of strings and ints as a list, then iterate through that list like you would any other</p>
","1222076","","","","","2013-03-28 18:20:17","","","","0","","",""
"15689400","2","","15689290","2013-03-28 18:22:38","","0","","<p>Your question is unclear, since it relies upon a piece of code that doesn't actually compile.</p>

<pre><code>for x,y in ((str(z), z) for z in range(0, 5)):
  print x, y
</code></pre>

<p>The above construct will bind <code>x</code> and <code>y</code> to a <code>str</code> and an <code>int</code>, respectively, for each loop iteration. The output is:</p>

<pre><code>0 0
1 1
2 2
3 3
4 4
</code></pre>
","8747","","8747","","2013-03-28 18:27:44","2013-03-28 18:27:44","","","","1","","",""
"17243193","2","","15690071","2013-06-21 19:47:06","","1","","<p>I am not sure if you want a list or dictionary or a dictionary of lists so here are all of them</p>

<pre><code>if a.get('href').find('boa')&gt;-1:
    boat_links.append(a.get('href'))
</code></pre>

<p>Here is a dictionary with the a tags text as the key and the href as the value</p>

<pre><code>boat_links = {}
for a in soup.find_all('a'):
    if a.get('href').find('boa')&gt;-1:
         boat_links[a.text] = a.get('href')
</code></pre>

<p>Here is a dictionary of lists based on the a.tags (what if you have multiple links with the same text)</p>

<pre><code>boat_links = {}
for a in soup.find_all('a'):
    if a.get('href').find('boa')&gt;-1
         if boat_links.has_key(a.text):
              boat_links[a.text].append(a.get('href'))
         else:
              boat_links[a.text] = [a.get('href')]
</code></pre>
","2429593","","2429593","","2014-10-08 19:31:06","2014-10-08 19:31:06","","","","0","","",""
"15690383","2","","15690185","2013-03-28 19:21:23","","0","","<p>The AlphaDrawing example in the wxPython demo shows how to overlap multiple drawings. This uses wx.GraphicContext / wx.GCDC. If you look at the <a href=""http://wxpython.org/Phoenix/docs/html/GraphicsContext.html"" rel=""nofollow noreferrer"">documentation</a>, you'll note that it has CreateBitmapFromImage and CreateBitmap methods that probably apply to what you want to do. See also the DragImage demo and the following links for related information:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/1622884/wx-python-card-game"">wx python card game</a></li>
<li><a href=""http://rummy-py.sourceforge.net/"" rel=""nofollow noreferrer"">http://rummy-py.sourceforge.net/</a> (look at the original that was done in wx)</li>
</ul>
","393194","","-1","","2017-05-23 10:25:50","2013-03-28 19:21:23","","","","1","","",""
"15724125","2","","15690185","2013-03-30 22:16:38","","0","","<p>I found this post, which reading the comments, does a good job of showing me want I was looking for. </p>

<p><a href=""https://stackoverflow.com/questions/8071613/delete-image-in-wxpython"">Delete image in wxpython?</a></p>
","2209860","","-1","","2017-05-23 10:25:51","2013-03-30 22:16:38","","","","0","","",""
"15692480","2","","15690201","2013-03-28 21:26:07","","1","","<p>I'm not sure what you mean by ""installing it as a framework"".  If you are using an OS X server hosting environment, then maybe you're talking about Framework with a Capital F.  However, OS X server hosting isn't a very common environment so I'm guessing that's not it.</p>

<p>If you just want to know how to install a Python library in your home directory, then the general answer is:</p>

<pre><code>$ python setup.py install --user
</code></pre>

<p>This Just Works‚Ñ¢ on Python 2.7 (assuming the package uses distutils, which Twisted does, and you unpack the source .tar.gz and change your working directory to the directory that is the root of the contents of that .tar.gz), so you should be done after that.</p>
","18243","","","","","2013-03-28 21:26:07","","","","1","","",""
"15705793","2","","15690201","2013-03-29 14:58:53","","1","","<p>Use virtualenv to create your private Python libraries installation.</p>
","2177109","","","","","2013-03-29 14:58:53","","","","0","","",""
"15690429","2","","15690224","2013-03-28 19:25:05","","4","","<p>The major problem with passing <code>locals()</code> (or <code>globals()</code>) to <code>format</code> (or <code>%</code>) is that often, format strings can come from untrusted sources, and you risk exposing variables you didn't want to. If you're just formatting a literal string, that isn't an issue, but if you ever may have untrusted format strings, you have to think very carefully about what you're doing‚Äîand it's easier to just not do it.</p>

<p>The more minor problem is that some of your code's readers won't understand <code>locals</code>, or the <code>**</code> syntax, and will have a hard time figuring out what it does or why it works. This isn't much of an argument. In fact, you could even say that a lot of Python's design decisions come down to making sure this is almost never a good argument‚Äîthe language is exactly big enough that it's reasonable to expect your readers to understand/learn anything pythonic you write. But it's still worth thinking about.</p>

<p>Then there's the style issue. Every few months, someone comes along suggesting that the language should make it easier to do this, and it starts an argument on the mailing lists. Some people definitely think that this feels ""implicit rather than explicit"". Others disagree. I think it's pretty well settled that magic locals here would not be pythonic‚Ä¶ but if you have to explicitly pass <code>locals()</code>, maybe that's fine and maybe it isn't. Like most style arguments that haven't gathered a consensus, it's really up to you. (By the way, the <code>format</code> API ultimately came out of an argument like this, where the original suggestion was for more-perl-like string interpolation with an implicit <code>locals</code>.)</p>

<p>But ultimately, you have to consider what you're saving. Compare this:</p>

<pre><code>filename = ""data/avatars/{player_name}.{ext}"".format(**locals())
</code></pre>

<p>to:</p>

<pre><code>filename = ""data/avatars/{0}.{1}"".format(player_name, ext)
</code></pre>

<p>Your version isn't clearer, more explicit, easier to type, or even shorter. So, I'd say the risk of making it a little harder for novices to read, and annoying to some segment of the community (even if it's for bad reasons), isn't worth it if there's no benefit.</p>
","908494","","","","","2013-03-28 19:25:05","","","","3","","",""
"15690479","2","","15690224","2013-03-28 19:28:23","","1","","<p>As I commented above, this should not be used on untrusted sources. Also it may not me explicit enough to be Pythonic.</p>

<p>One can also define a function to do that, but to access the right locals, it needs to do some frame handling</p>

<pre><code>def format_locals(string):
    return string.format(**sys._getframe().f_back.f_locals)
</code></pre>

<p>This kind of pattern is not nice and things like Pypy can't optmize this kind of code.</p>

<p>I would use this code (unless you need Python 2.6 support so you must add the indexes):</p>

<pre><code>filename = 'data/avatars/{}.{}'.format(player_name, ext)
</code></pre>
","754991","","","","","2013-03-28 19:28:23","","","","1","","",""
"15701844","2","","15693448","2013-03-29 10:54:22","","6","","<p>The response to your login request will contain a <code>Set-Cookie</code> header looking something like this:</p>

<pre><code>Set-Cookie:session=&lt;encoded session&gt;; Path=/; HttpOnly
</code></pre>

<p>You need to send that cookie with your curl request so that the session data is available for processing, you can add additional headers to curl requests with <code>-H</code>, or specify the cookie explicitly:</p>

<pre><code>curl --cookie ""session=&lt;encoded session&gt;"" http://localhost:5000/address/
</code></pre>

<p>Browsers will handle this for you of course, but curl is totally stateless and wont parse and store the <code>Set-Cookie</code> header for you by default, though if you're performing the login using curl, you can tell it to store the cookie in a cookie jar with <code>-c &lt;file&gt;</code>, and then you can read from it on your next request with <code>-b file</code></p>

<p><a href=""http://en.wikipedia.org/wiki/HTTP_cookie#Session_cookie"" rel=""noreferrer"">HTTP Cookie wiki page</a></p>

<p><a href=""http://curl.haxx.se/docs/http-cookies.html"" rel=""noreferrer"">Curl cookie docs</a></p>

<p><a href=""http://curl.haxx.se/docs/manpage.html"" rel=""noreferrer"">Curl man page</a></p>
","1949092","","1949092","","2013-03-29 18:57:56","2013-03-29 18:57:56","","","","1","","",""
"16034387","2","","15693529","2013-04-16 10:15:00","","4","","<p>There are a number of ways you can achieve what you want. For example, one way is to make a custom initialiser for your handler:</p>

<pre><code>import os
import yaml

def logmaker():
    path = os.path.dirname(os.path.realpath(__file__))
    path = os.path.join(path, 'bot.log')
    return logging.FileHandler(path)

def main():
    # The file's path
    path = os.path.dirname(os.path.realpath(__file__))

    # Config file relative to this file
    loggingConf = open('{0}/logging.yml'.format(path), 'r')
    logging.config.dictConfig(yaml.load(loggingConf))
    loggingConf.close()
    logger = logging.getLogger('cloaked_chatter')
    logger.debug('Hello, world!')

if __name__ == '__main__':
    main()
</code></pre>

<p>Note that I moved the <code>logging.yml</code> to be adjacent to the script. The <code>logmaker</code> is the custom initialiser. Specify it in the YAML as follows:</p>

<pre><code>version: 1
formatters:
  default:
    format: '%(asctime)s %(levelname)s %(name)s %(message)s'
handlers:
  console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: default
    stream: ext://sys.stdout
  file:
    () : __main__.logmaker
    formatter: default
loggers:
  cloaked_chatter:
    level: DEBUG
    handlers: [console, file]
    propagate: no
</code></pre>

<p>If you run the Python script, you should find that the <code>bot.log</code> is created adjacent to the script and YAML file. The same message is printed to the console and <code>bot.log</code>:</p>

<pre><code>2013-04-16 11:08:11,178 DEBUG cloaked_chatter Hello, world!
</code></pre>

<p>N.B. The script could be a little tidier, but it illustrates my point.</p>

<p><strong>Update:</strong> As per <a href=""http://docs.python.org/2/library/logging.config.html#user-defined-objects"" rel=""nofollow"">the documentation</a>, the use of <code>()</code> as a key in dictionary indicates that the value is a callable which is essentially a custom constructor for the handler.</p>
","118903","","118903","","2013-04-17 14:43:10","2013-04-17 14:43:10","","","","1","","",""
"15693722","2","","15693565","2013-03-28 23:06:16","","1","","<p>To debug this:</p>

<ul>
<li>Add <code>set -x</code> towards the top of your shell script.</li>
<li>Set a PS4 which prints the line number of each line when it's invoked: <code>PS4='+ $BASH_SOURCE:$FUNCNAME:$LINENO:'</code></li>
<li>Look in particular for any places where your scripts assume environment variables which aren't set when Hudson is running.</li>
</ul>

<p>If your Python scripts redirect stderr (where logs from <code>set -x</code> are directed) and don't pass it through to Hudson (and so don't log it), you can redirect it to a file from within the script: <code>exec 2&gt;&gt;logfile</code></p>

<p>There are a number of tools other than Jenkins for kicking off jobs across a number of machines, by the way; <A HREF=""https://puppetlabs.com/mcollective/"" rel=""nofollow"">MCollective</A> (which works well if you already use Puppet), <A HREF=""http://docs.opscode.com/knife.html"" rel=""nofollow"">knife ssh</A> (which you'll already have if you use Chef -- which, in my not-so-humble opinion, you should!), <A HREF=""http://rundeck.org/"" rel=""nofollow"">Rundeck</A> (which has a snazzy web UI, but shouldn't be used by anyone until <A HREF=""https://github.com/dtolabs/rundeck/issues/298"" rel=""nofollow"">this security bug</A> is fixed), <A HREF=""http://fabfile.org/"" rel=""nofollow"">Fabric</A> (which is a very good choice if you don't have mcollective or knife already), and many more.</p>
","14122","","14122","","2013-03-28 23:13:18","2013-03-28 23:13:18","","","","1","","",""
"15953727","2","","15693565","2013-04-11 16:10:17","","1","","<p>I solved my own problem and even though it's a bit of a corner case, I'll still answer it here. The script that Jenkins was launching itself launched a threaded Python server using ThreadedTCPServer implemented more or less exactly from <a href=""http://docs.python.org/2/library/socketserver.html"" rel=""nofollow"">here</a>. That threaded server wasn't properly exiting, so it left some pipes open. Although the server process died, the leaky pipes made it impossible for Jenkins to properly determine that the process was over (Jenkins waits for an EOF from the child process to determine if the process completed). The solution was a reimplementation of the socket server that exited properly. Hope this helps someone in the future!</p>
","949664","","","","","2013-04-11 16:10:17","","","","0","","",""
"15693791","2","","15693597","2013-03-28 23:14:17","","3","","<p>Use the <code>powerset</code> function given in the <a href=""http://docs.python.org/3/library/itertools.html#itertools-recipes"" rel=""nofollow"">itertools examples</a>. <code>powerset([L1,L2,L3])</code> will give you all subsets of the set of 3 lists. For each subset you can take the cartesian product, and then chain them all together.</p>

<pre><code>&gt;&gt;&gt; from itertools import chain, product
&gt;&gt;&gt; result = chain.from_iterable(product(*lists) for lists in powerset([L1,L2,L3]))        
&gt;&gt;&gt; list(result)

[(), (1,), (2,), ('a',), ('b',), ('A',), ('B',), (1, 'a'), (1, 'b'), (2, 'a'), 
(2, 'b'), (1, 'A'), (1, 'B'), (2, 'A'), (2, 'B'), ('a', 'A'), ('a', 'B'), 
('b', 'A'), ('b', 'B'), (1, 'a', 'A'), (1, 'a', 'B'), (1, 'b', 'A'), 
(1, 'b', 'B'), (2, 'a', 'A'), (2, 'a', 'B'), (2, 'b', 'A'), (2, 'b', 'B')]
</code></pre>
","189205","","189205","","2013-03-28 23:19:51","2013-03-28 23:19:51","","","","1","","",""
"15707644","2","","15693605","2013-03-29 16:48:35","","0","","<p>I've made a slight modification to your base code:</p>

<pre><code>def __repr__(self):
    return 'DictKey(' + self.member + ')'
</code></pre>

<p>Then if you want to retrieve the instance of DictKey in the set of keys you can do the following:</p>

<pre><code>index_of_instance = d.keys().index('hello')
my_instance_of_dict_key = d.keys()[index_of_instance]
</code></pre>

<p>Hope it helps.</p>
","1629755","","","","","2013-03-29 16:48:35","","","","1","","",""
"15707814","2","","15693605","2013-03-29 16:57:50","","2","","<p>A more conventional way to store ""meta"" data along with a dict would be either:</p>

<ol>
<li>to maintain two <code>dict</code>s with same set of keys, one for the actual data, one for ""meta""</li>
<li>to have a <code>dict</code> with (""raw"") keys, and values are 2-tuples: ( value, item-meta-data )</li>
</ol>

<p>Both are simple and require no special magic.  You would also avoid problems like the one you describe in your question (and others to come).</p>
","2096752","","","","","2013-03-29 16:57:50","","","","2","","",""
"15699000","2","","15693633","2013-03-29 07:12:44","","2","","<p>Dropping <code>modules</code> first makes the foreign key constraint in <code>modulesfiles</code> invalid.</p>

<p>Drop the child table first.</p>
","11654","","","","","2013-03-29 07:12:44","","","","1","","",""
"15694075","2","","15693703","2013-03-28 23:40:41","","1","","<p>The program that is being called by <code>myprogram.py</code> lands you in the python prompt. Why that happens we cannot tell you unless you show us the code.</p>

<p>Using the <code>subprocess</code> module (which is more versatile) is preferred to using <code>os.system</code>.</p>

<p>But you're not using subprocess correctly. Try it like this:</p>

<pre><code>with open('outputfile.txt', 'w+') as outf:
    rc = subprocess.call(['python', 'myprogram.py', '-arg1'], stdout=outf)
</code></pre>

<p>The <code>with</code> statement will close the file once <code>subprocess.call</code> is done. The program and its arguments should be given as a list of strings. Redirection is achieved by using the <code>std...</code> arguments.</p>

<p>After <code>myprogram.py</code> finishes, <code>rc</code> contains its return code.</p>

<p>If you want to capture the output of the program, use <code>subprocess.check_output()</code> instead.</p>
","1219295","","","","","2013-03-28 23:40:41","","","","4","","",""
"15694498","2","","15693735","2013-03-29 00:27:47","","2","","<pre><code>from bs4 import BeautifulSoup
import re
file=open(""input"")
soup = BeautifulSoup(file)
for t in soup(text=re.compile(""."")):
  path = '/'.join(reversed([p.name for p in t.parentGenerator() if p]))
  print path+""/""+ t.strip()
</code></pre>

<p><strong>Output</strong></p>

<pre><code>[document]/html/body/div/span/span/28. february 2012
[document]/html/body/div/span/14:46
[document]/html/body/div/Something,
[document]/html/body/div/p/something else
[document]/html/body/div/continuing.
</code></pre>
","390913","","","","","2013-03-29 00:27:47","","","","1","","",""
"15693802","2","","15693756","2013-03-28 23:15:01","","5","","<p><a href=""https://pypi.python.org/pypi/Unidecode/"" rel=""noreferrer"">Unidecode</a> might be of use to you.</p>

<pre><code>Python 3.2.3 (default, Jun  8 2012, 05:36:09) 
[GCC 4.7.0 20120507 (Red Hat 4.7.0-5)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; from unidecode import unidecode
&gt;&gt;&gt; unidecode(""√¶, √∂ or √ß"")
'ae, o or c'
</code></pre>
","1133718","","","","","2013-03-28 23:15:01","","","","3","","",""
"15693858","2","","15693808","2013-03-28 23:20:16","","1","","<p>That package isn't in the PyPI. There's a page, but the source code is hosted elsewhere for some reason (this is the first time I've seen it):</p>

<p>Ubuntu has a (probably old) package:</p>

<pre><code>$ sudo apt-get install python-pcapy
</code></pre>

<p>You can also build it from source:</p>

<pre><code>$ sudo pip install ""http://corelabs.coresecurity.com/index.php?module=Wiki&amp;action=attachment&amp;type=tool&amp;page=Pcapy&amp;file=pcapy-0.10.8.tar.gz""
</code></pre>
","464744","","","","","2013-03-28 23:20:16","","","","0","","",""
"15693954","2","","15693859","2013-03-28 23:30:20","","2","","<p>As @larsmans guessed the <code>ssh</code> call was consuming stdin, breaking the outer bash loop.  Adding the <code>-n</code> option to the <code>ssh</code> command resolved the issue:</p>

<pre><code>output = subprocess.check_output(['ssh', '-n', 'user@host', 'cmd'])
</code></pre>
","166185","","","","","2013-03-28 23:30:20","","","","0","","",""
"15707208","2","","15693880","2013-03-29 16:24:23","","0","","<p>You need to use the <code>Text</code> widget's <code>get</code> method to get all of the text from <code>'1.0'</code> (line 1, character 0) to <code>END</code>. </p>

<p>Here's a modified version of your code that does this in a <code>write_text</code> function. I also added scroll bars and switched to using <code>grid</code> instead of pack.</p>

<pre><code>from tkinter import *
from tkinter import ttk

def write_text():
    text = edit.get('1.0', END)
    with open(""DATA/Test.txt"", ""w"") as f:
        f.write(text)

root = Tk()
root.title(""This May Help"")
root.geometry(""600x600"")

edit = Text(root, width=80, height=25, wrap=NONE)
edit.insert('1.0', '[enter text]')
edit.grid(column=0, row=0, sticky=(N,W,E,S))

yscroll = ttk.Scrollbar(root, orient=VERTICAL, command=edit.yview)
yscroll.grid(column=1, row=0, sticky=(N,S))
edit['yscrollcommand'] = yscroll.set

xscroll = ttk.Scrollbar(root, orient=HORIZONTAL, command=edit.xview)
xscroll.grid(column=0, row=1, sticky=(W,E))
edit['xscrollcommand'] = xscroll.set

write_button = Button(text=""Write"", command=write_text)
write_button.grid(column=0, row=2)
</code></pre>
","205580","","","","","2013-03-29 16:24:23","","","","1","","",""
"15694036","2","","15693900","2013-03-28 23:37:36","","4","","<p>Seeing that the text is the only large blob, and everything else is barely larger than a pixel, a simple morphological opening should suffice</p>

<p>You can do this <a href=""http://docs.opencv.org/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html#opening"" rel=""nofollow noreferrer"">in opencv</a>
or <a href=""http://www.imagemagick.org/Usage/morphology/#open"" rel=""nofollow noreferrer"">with imagemagic</a></p>

<p>Afterwards the white rectangle should be the only thing left in the image. You can find it with opencvs findcontours, with the CvBlobs library for opencv or with the imagemagick -crop function</p>

<p>Here is your image with 2 steps of erosion followed by 2 steps of dilation applied:
<img src=""https://i.stack.imgur.com/nMJUy.png"" alt=""enter image description here"">
You can simply plug this image into the opencv findContours function as in the <a href=""https://code.ros.org/trac/opencv/browser/trunk/opencv/samples/cpp/squares.cpp?rev=4244"" rel=""nofollow noreferrer"">Squares tutorial example</a> to get the position</p>
","145999","","145999","","2013-03-28 23:45:37","2013-03-28 23:45:37","","","","2","","",""
"15699181","2","","15693900","2013-03-29 07:30:56","","11","","<p>Using your test image I was able to <strong>remove all the noises with a simple <a href=""http://docs.opencv.org/modules/imgproc/doc/filtering.html?highlight=erode#erode"" rel=""nofollow noreferrer"">erosion</a></strong> operation.</p>

<p><img src=""https://i.stack.imgur.com/u456X.png"" width=""400"" height=""350""></p>

<p>After that, <strong>a simple iteration on the <code>Mat</code> to find for the corner pixels</strong> is trivial, and I talked about that on <a href=""https://stackoverflow.com/a/10317919/176769"">this answer</a>. For testing purposes we can draw <em>green</em> lines between those points to display the area we are interested at in the original image:</p>

<p><img src=""https://i.stack.imgur.com/6KoMV.png"" width=""400"" height=""350""></p>

<p>At the end, I <strong>set the ROI in the original image and crop</strong> out that part. </p>

<p>The final result is displayed on the image below:</p>

<p><img src=""https://i.stack.imgur.com/thZUs.png"" width=""380"" height=""300""></p>

<p>I wrote a sample code that performs this task using the <strong>C++ interface</strong> of OpenCV. I'm confident in your skills to translate this code to Python. If you can't do it, forget the code and stick with the <a href=""http://en.wikipedia.org/wiki/Technology_roadmap"" rel=""nofollow noreferrer"">roadmap</a> I shared on this answer.</p>

<pre><code>#include &lt;cv.h&gt;
#include &lt;highgui.h&gt;

int main(int argc, char* argv[])
{
    cv::Mat img = cv::imread(argv[1]);
    std::cout &lt;&lt; ""Original image size: "" &lt;&lt; img.size() &lt;&lt; std::endl;

    // Convert RGB Mat to GRAY
    cv::Mat gray;
    cv::cvtColor(img, gray, CV_BGR2GRAY);
    std::cout &lt;&lt; ""Gray image size: "" &lt;&lt; gray.size() &lt;&lt; std::endl;

    // Erode image to remove unwanted noises
    int erosion_size = 5;
    cv::Mat element = cv::getStructuringElement(cv::MORPH_CROSS,
                                       cv::Size(2 * erosion_size + 1, 2 * erosion_size + 1),
                                       cv::Point(erosion_size, erosion_size) );
    cv::erode(gray, gray, element);

    // Scan the image searching for points and store them in a vector
    std::vector&lt;cv::Point&gt; points;
    cv::Mat_&lt;uchar&gt;::iterator it = gray.begin&lt;uchar&gt;();
    cv::Mat_&lt;uchar&gt;::iterator end = gray.end&lt;uchar&gt;();
    for (; it != end; it++)
    {
        if (*it) 
            points.push_back(it.pos()); 
    }

    // From the points, figure out the size of the ROI
    int left, right, top, bottom;
    for (int i = 0; i &lt; points.size(); i++)
    {
        if (i == 0) // initialize corner values
        {
            left = right = points[i].x;
            top = bottom = points[i].y;
        }

        if (points[i].x &lt; left)
            left = points[i].x;

        if (points[i].x &gt; right)
            right = points[i].x;

        if (points[i].y &lt; top)
            top = points[i].y;

        if (points[i].y &gt; bottom)
            bottom = points[i].y;
    }
    std::vector&lt;cv::Point&gt; box_points;
    box_points.push_back(cv::Point(left, top));
    box_points.push_back(cv::Point(left, bottom));
    box_points.push_back(cv::Point(right, bottom));
    box_points.push_back(cv::Point(right, top));

    // Compute minimal bounding box for the ROI
    // Note: for some unknown reason, width/height of the box are switched.
    cv::RotatedRect box = cv::minAreaRect(cv::Mat(box_points));
    std::cout &lt;&lt; ""box w:"" &lt;&lt; box.size.width &lt;&lt; "" h:"" &lt;&lt; box.size.height &lt;&lt; std::endl;

    // Draw bounding box in the original image (debugging purposes)
    //cv::Point2f vertices[4];
    //box.points(vertices);
    //for (int i = 0; i &lt; 4; ++i)
    //{
    //    cv::line(img, vertices[i], vertices[(i + 1) % 4], cv::Scalar(0, 255, 0), 1, CV_AA);
    //}
    //cv::imshow(""Original"", img);
    //cv::waitKey(0);

    // Set the ROI to the area defined by the box
    // Note: because the width/height of the box are switched, 
    // they were switched manually in the code below:
    cv::Rect roi;
    roi.x = box.center.x - (box.size.height / 2);
    roi.y = box.center.y - (box.size.width / 2);
    roi.width = box.size.height;
    roi.height = box.size.width;
    std::cout &lt;&lt; ""roi @ "" &lt;&lt; roi.x &lt;&lt; "","" &lt;&lt; roi.y &lt;&lt; "" "" &lt;&lt; roi.width &lt;&lt; ""x"" &lt;&lt; roi.height &lt;&lt; std::endl;

    // Crop the original image to the defined ROI
    cv::Mat crop = img(roi);

    // Display cropped ROI
    cv::imshow(""Cropped ROI"", crop);
    cv::waitKey(0);

    return 0;
}
</code></pre>
","176769","","-1","","2017-05-23 12:18:01","2013-03-29 07:30:56","","","","9","","",""
"17378072","2","","15693938","2013-06-29 08:01:53","","0","","<p><em>I shouldn't give full answers as JES is an application designed for students, but I think that three months later one can give a full working sample which can be used as reference for the others...</em></p>

<p>This should be close to what you attempted to do:</p>

<p><em>Note : your approach of a simple double loop over x and y was the right one.</em></p>

<pre><code>def crazyPic(pic, newRed, newGreen, newBlue):

    w = getWidth(pic)
    h = getHeight(pic)
    new_w = w * 2
    new_h = h * 2
    newPic = makeEmptyPicture(w * 2, h * 2)

    for x in range(new_w):
      for y in range(new_h):
          new_px = getPixel(newPic, x, y)

          # Top-left: B&amp;W
          if (x &lt; w) and (y &lt; h):
            px = getPixel(pic, x, y)
            nRed = getRed(px) * newRed #0.299
            nGreen = getGreen(px) * newGreen #0.587
            nBlue = getBlue(px) * newBlue #0.114
            luminance = nRed + nGreen + nBlue
            new_col = makeColor(luminance, luminance, luminance)

          # Top-right
          elif (y &lt; h):
            px = getPixel(pic, x - w, y)
            nRed = getRed(px) * newRed
            new_col = makeColor(nRed, getGreen(px), getBlue(px))

          # Bottom-left
          elif (x &lt; w):
            px = getPixel(pic, x, y - h)
            nGreen = getGreen(px) * newGreen
            new_col = makeColor(getGreen(px), nGreen, getBlue(px))

          # Bottom-right
          else:
            px = getPixel(pic, x - w, y - h)
            nBlue = getBlue(px) * newBlue
            new_col = makeColor(getGreen(px), getBlue(px), nBlue)

          setColor(new_px, new_col)

    return newPic

file = pickAFile()
picture = makePicture(file)
#picture = crazyPic(picture, 0.299, 0.587, 0.114)
# Here, with my favorite r, g, b weights
picture = crazyPic(picture, 0.21, 0.71, 0.07)

writePictureTo(picture, ""/home/quartered.jpg"")

show(picture)
</code></pre>

<p><br/>
Output (<em>Painting by <strong>Antoni Tapies</em></strong>):</p>

<hr>

<p><img src=""https://i.stack.imgur.com/gUVEc.jpg"" alt=""enter image description here"">......From......<img src=""https://i.stack.imgur.com/N3Bc3.jpg"" alt=""enter image description here""></p>

<hr>

<p>Here is a more <strong><a href=""https://stackoverflow.com/a/17309765/1715716"">detailed thread</a></strong> about <strong><em>greyscale</em></strong>.</p>

<hr>
","1715716","","-1","","2017-05-23 10:25:32","2013-06-29 08:29:48","","","","0","","",""
"15695918","2","","15695846","2013-03-29 01:20:55","","1","","<p>Your <code>add</code> function doesn't have anything that will increment <code>self.size</code>. So it's whatever you set it to in <code>__init__</code>, which is presumably <code>0</code>.</p>

<p>So, when the list actually is empty, <code>__len__</code> returns <code>0</code> because <code>self.head</code> is <code>None</code>.</p>

<p>And after you add an element, it <em>still</em> returns <code>0</code> because <code>self.size</code> is <code>0</code>.</p>

<hr>

<p>Also, your code has at least one other problem in it. Look at this:</p>

<pre><code>elif value &gt; self.tail.data:
    self.tail = newNode
    newNode.prev = self.tail
    newNode.next = None
    return newNode
</code></pre>

<p>Clearly, <code>newNode.prev</code> is going to end up pointing at itself, rather than the previous tail.</p>

<p>There are lots of things that can help judge the correctness of code‚Äîunit tests, code reviews by someone who didn't work on it, stepping through it with an interactive visualizer, formal proofs, etc.‚Äîbut the number of hours you worked on it is not one of those things.</p>
","908494","","748858","","2013-03-29 01:49:14","2013-03-29 01:49:14","","","","3","","",""
"15699578","2","","15699551","2013-03-29 08:06:03","","2","","<p>%d stands for ""decimal"". ! is there with the rest of the string. %d means that a decimal number will be outputted there. Synonim for %d is also %i. same goes for instance with %s and strings</p>
","1738484","","","","","2013-03-29 08:06:03","","","","0","","",""
"15699580","2","","15699551","2013-03-29 08:06:13","","1","","<p>It is used for <a href=""http://docs.python.org/2/library/stdtypes.html#string-formatting"" rel=""nofollow"">string formatting</a>. The random number will be converted to an integer (since <code>%d</code> is being used), then it will be converted to a string and inserted into the given string.</p>

<p>For example:</p>

<pre><code>&gt;&gt;&gt; print ""blah blah blah %d!"" % 4
blah blah blah 4!
</code></pre>

<p>There are several other letters that correspond to different types. They can be found <a href=""http://docs.python.org/2/library/stdtypes.html#string-formatting"" rel=""nofollow"">here</a> (in the second table of that section).</p>
","645956","","645956","","2013-03-29 08:13:03","2013-03-29 08:13:03","","","","0","","",""
"15699587","2","","15699551","2013-03-29 08:06:42","","1","","<p>These are <a href=""http://docs.python.org/2/library/string.html#format-specification-mini-language"" rel=""nofollow"">format specifiers</a>. The <code>%d</code> specifier refers specifically to a decimal (base 10) integer. The <code>%s</code> specifier refers to a Python string.</p>
","19410","","","","","2013-03-29 08:06:42","","","","0","","",""
"15774990","2","","15699566","2013-04-02 21:45:00","","5","","<p>The cleanest solution would be inotify in many ways - this is more or less exactly what it's intended for, after all. If the log file was changing extremely rapidly then you could potentially risk being woken up almost constantly, which wouldn't necessarily be particularly efficient - however, you could always mitigate this by adding a short delay of your own after the inotify filehandle returns an event. In practice I doubt this would be an issue on most systems, but I thought it worth mentioning in case your system is very tight on CPU resources.</p>

<p>I can't see how the <code>sleep()</code> approach would miss file updates except in cases where the file is truncated or rotated (i.e. renamed and another file of the same name created). These are tricky cases to handle however you do things, and you can use tricks like periodically re-opening the file by name to check for rotation. Read the <code>tail</code> man page because it handles many such cases, and they're going to be quite common for log files in particular (log rotation being widely considered to be good practice).</p>

<p>The downside of <code>sleep()</code> is of course that you'd end up batching up your reads with delays in between, and also that you have the overhead of constantly waking up and polling the file even when it's not changing. If you did this, say, once per second, however, the overhead probably isn't noticeable on most systems.</p>

<p>I'd say inotify is the best choice unless you want to remain compatible, in which case the simple fallback using <code>sleep()</code> is still quite reasonable.</p>

<p><strong>EDIT:</strong></p>

<p>I just realised I forgot to mention - an easy way to check for a file being renamed is to perform an <code>os.fstat(fd.fileno())</code> on your open filehandle and a <code>os.stat()</code> on the filename you opened and compare the results. If the <code>os.stat()</code> fails then the error will tell you if the file's been deleted, and if not then comparing the <code>st_ino</code> (the inode number) fields will tell you if the file's been deleted and then replaced with a new one of the same name.</p>

<p>Detecting truncation is harder - effectively your read pointer remains at the same offset in the file and reading will return nothing until the file content size gets back to where you were - then the file will read from that point as normal. If you call <code>os.stat()</code> frequently you could check for the file size going backwards - alternatively you could use <code>fd.tell()</code> to record your current position in the file and then perform an explicit seek to the end of the file and call <code>fd.tell()</code> again. If the value is lower, then the file's been truncated under you. This is a safe operation as long as you keep the original file position around because you can always seek back to it after the check.</p>

<p>Alternatively if you're using inotify anyway, you could just watch the parent directory for changes.</p>

<p>Note that files can be truncated to non-zero sizes, but I doubt that's likely to happen to a log file - the common cases will be being deleted and replaced, or truncated to zero. Also, I don't know how you'd detect the case that the file was truncated and then immediately filled back up to beyond your current position, except by remembering the most recent N characters and comparing them, but that's a pretty grotty thing to do. I think inotify will just tell you the file has been modified in that case.</p>
","1955509","","1955509","","2013-04-03 08:30:48","2013-04-03 08:30:48","","","","0","","",""
"19117266","2","","15699666","2013-10-01 13:18:51","","2","","<p>Have a look at <a href=""http://gehrcke.de/2013/01/highly-concurrent-connections-to-redis-with-gevent-and-redis-py/"" rel=""nofollow"">http://gehrcke.de/2013/01/highly-concurrent-connections-to-redis-with-gevent-and-redis-py/</a></p>

<p>I'm not 100% is your monkey-patching is doing the trick but I'd replace it with:</p>

<pre><code>import gevent
import redis.connection
redis.connection.socket = gevent.socket
</code></pre>

<p>You could also go and create your own pool with gevent supported connection to redis...</p>
","948369","","","","","2013-10-01 13:18:51","","","","0","","",""
"19120904","2","","15699666","2013-10-01 16:04:54","","1","","<p>What makes you think your only have one connection to redis? Actually my little test shows that your server is indeed opening lots of connections to redis.</p>

<p>To make the test more clear, I modified your print statement a bit:</p>

<pre><code>print '%s' % parameters['index'], 'in_use_conn:', len(p._in_use_connections), 'created_connections:', p._created_connections, 'available_conn:', len(p._available_connections)
</code></pre>

<p>Then run this script to make some requests:</p>

<pre><code>for i in {1..20}
do
    wget http://127.0.0.1:7332/top?index=$i &gt; /dev/null 2&gt;&amp;1 &amp;
done
</code></pre>

<p>And here's what I got:</p>

<pre><code>['1'] in_use_conn: 1 created_connections: 2 available_conn: 1
['2'] in_use_conn: 4 created_connections: 5 available_conn: 1
['3'] in_use_conn: 3 created_connections: 5 available_conn: 2
['4'] in_use_conn: 5 created_connections: 6 available_conn: 1
['6'] in_use_conn: 4 created_connections: 6 available_conn: 2
['5'] in_use_conn: 3 created_connections: 6 available_conn: 3
['7'] in_use_conn: 2 created_connections: 6 available_conn: 4
['10'] in_use_conn: 1 created_connections: 6 available_conn: 5
['8'] in_use_conn: 0 created_connections: 6 available_conn: 6
['14'] in_use_conn: 10 created_connections: 11 available_conn: 1
['11'] in_use_conn: 9 created_connections: 11 available_conn: 2
['12'] in_use_conn: 8 created_connections: 11 available_conn: 3
['16'] in_use_conn: 7 created_connections: 11 available_conn: 4
['15'] in_use_conn: 6 created_connections: 11 available_conn: 5
['13'] in_use_conn: 5 created_connections: 11 available_conn: 6
['20'] in_use_conn: 4 created_connections: 11 available_conn: 7
['19'] in_use_conn: 3 created_connections: 11 available_conn: 8
['9'] in_use_conn: 2 created_connections: 11 available_conn: 9
['17'] in_use_conn: 1 created_connections: 11 available_conn: 10
['18'] in_use_conn: 0 created_connections: 11 available_conn: 11
</code></pre>

<p>It can be seen that at peek time you have 10 greenlets running simultaneously, waiting for sockets. Your code looks perfectly fine to me. Why 'the performance is bad' is another story. It could be your sorted set of 'online' is tooo large. Or more likely you are using a blocking client to test the server, in which case you'll see only one connection to redis.</p>
","891296","","","","","2013-10-01 16:04:54","","","","0","","",""
"15704532","2","","15699814","2013-03-29 13:44:41","","2","","<p>For the template part everything looks absolutely ok and there should not be problem if what you do is what you showed.</p>

<p>Is Your list is dict() or actually list()? </p>

<p>Because your problem is here:</p>

<pre><code>{% for x in List %}
    {% set User = List[x] %}
</code></pre>

<p>This syntax will work only if List is dictionary.</p>

<p>In case of list you should write:</p>

<pre><code>{% for x in List %}
    {% set User = x %}
</code></pre>
","710150","","406659","","2013-07-29 17:29:56","2013-07-29 17:29:56","","","","0","","",""
"15699948","2","","15699836","2013-03-29 08:41:01","","2","","<p>Appengine does not support any write operations to the filesystem (amongst other restrictions).
The BlobStore does have a file like api, but you cannot rewrite/append to existing blob store entities.  The dev server also presents these restrictions to emulate production environment.</p>

<p>You should probably have a read of the some of the docs about appengine.
The overview doc <a href=""https://developers.google.com/appengine/docs/python/overview"" rel=""nofollow"">https://developers.google.com/appengine/docs/python/overview</a> explicitly states you can't write.  </p>
","1201324","","","","","2013-03-29 08:41:01","","","","4","","",""
"31651345","2","","15699836","2015-07-27 10:59:54","","0","","<p>AppEngine can now write to a local ""ephemeral"" disk storage when using Managed-VM which is not supported when using the sandbox method as specified on this documentation:</p>

<p><a href=""https://cloud.google.com/appengine/docs/managed-vms/tutorial/step3"" rel=""nofollow"">https://cloud.google.com/appengine/docs/managed-vms/tutorial/step3</a></p>
","755410","","","","","2015-07-27 10:59:54","","","","0","","",""
"15700053","2","","15699964","2013-03-29 08:49:35","","2","","<p>Python already has a built-in <code>logging</code> module, which is being located before yours (you're appending your folder to the end of the path).</p>

<p>Rename your <code>logging.py</code> file to something else.</p>
","464744","","","","","2013-03-29 08:49:35","","","","0","","",""
"15700565","2","","15700109","2013-03-29 09:26:54","","1","","<p>You're reading in 2048 byte at once, which put the reading cursor in the middle of a line. In the next read, the rest of that line is discard because it doesn't start with a tag.</p>

<p>Instead of rolling your own parser, consider using <a href=""http://effbot.org/zone/element-iterparse.htm#incremental-parsing"" rel=""nofollow""><code>iterparse</code></a>. An even faster version of <code>iterparse</code> is included with <a href=""http://lxml.de/parsing.html"" rel=""nofollow""><code>lxml</code></a>
Here's an example</p>

<pre><code>import cStringIO
from xml.etree.ElementTree import iterparse

fakefile = cStringIO.StringIO(""""""&lt;temp&gt;
  &lt;email id=""1"" Body=""abc""/&gt;
  &lt;email id=""2"" Body=""fre""/&gt;
  &lt;email id=""998349883487454359203"" Body=""hi""/&gt;
&lt;/temp&gt;
"""""")
for _, elem in iterparse(fakefile):
    if elem.tag == 'email':
        print elem.attrib['id'], elem.attrib['Body']
    elem.clear()
</code></pre>
","205528","","","","","2013-03-29 09:26:54","","","","4","","",""
"15883599","2","","15700109","2013-04-08 15:51:09","","1","","<p>Thanks for your support and i have finally written my code and its working great here it is   </p>

<pre><code>import lxml import etree    
for event, element in etree.iterparse(the_xml_file):
    if 'TV' in element.tag:
        print element.text
</code></pre>
","1732553","","","","","2013-04-08 15:51:09","","","","0","","",""
"15702317","2","","15700128","2013-03-29 11:29:25","","3","","<p>call groupby twice for ""k1"" and (""k1"", ""k2""), and then do <code>div</code>:</p>

<pre><code>import pandas as pd
k1 = [""a"", ""a"", ""a"", ""a"", ""b"", ""b"", ""b""]
k2 = [""x"", ""x"", ""y"", ""y"", ""x"", ""y"", ""y""]
df = pd.DataFrame({""k1"":k1, ""k2"":k2})

df.groupby([""k1"", ""k2""]).k2.count().div(
    df.groupby(""k1"").k1.count().astype(float), level=0)
</code></pre>

<p>output:</p>

<pre><code>k1  k2
a   x     0.500000
    y     0.500000
b   x     0.333333
    y     0.666667
</code></pre>
","772649","","","","","2013-03-29 11:29:25","","","","0","","",""
"15703898","2","","15700128","2013-03-29 13:08:37","","6","","<p>Here's an alternative method using one groupby statement.</p>

<p>Group by k1, select column k2 and apply a lambda function.  The lambda gets frequency counts for each level of k2 <em>within</em> k1 and then we divide by the count of k1:</p>

<pre><code>In [1]: df.groupby('k1')['k2'].apply(lambda x: pd.value_counts(x)/x.count().astype(float))

Out[1]:
k1
a   x    0.500000
    y    0.500000
b   y    0.666667
    x    0.333333
</code></pre>

<p>Performance:</p>

<p>HYRY's method:</p>

<pre><code>100 loops, best of 3: 3.07 ms per loop
</code></pre>

<p>My method:</p>

<pre><code>1000 loops, best of 3: 1.98 ms per loop
</code></pre>
","919872","","","","","2013-03-29 13:08:37","","","","2","","",""
"15701595","2","","15701312","2013-03-29 10:36:23","","1","","<p>try to import tasks first, I recommend you implement your work in a interactive python environment, like a python IDE, and then you do this:</p>

<ul>
<li>import tasks</li>
</ul>

<p>before you write <code>tasks.add</code></p>
","2172901","","5658350","","2016-12-22 10:59:28","2016-12-22 10:59:28","","","","3","","",""
"15702117","2","","15701356","2013-03-29 11:13:18","","0","","<p>Ok, i just had to inherit the <code>account_invoice</code> class and define a new <code>invoice_validate</code> method</p>

<p>@user1576199 is this what you meant ?</p>

<pre><code>from account import account_invoice

class account_invoice(osv.osv):
    _inherit=""account.invoice""
    def invoice_validate(self, cr, uid, ids, context=None):
        super(account_invoice,self).invoice_validate()
</code></pre>
","1342402","","1342402","","2013-04-22 12:37:51","2013-04-22 12:37:51","","","","1","","",""
"15708619","2","","15705434","2013-03-29 17:48:43","","1","","<p>fun little game, I removed the second dealer for simplicity, but it should be easy enough to add back in.  I changed input to raw_input so you could get a string out of it without entering quotes.  touched up the logic a bit here and there, redid formating and added comments.</p>

<pre><code>from random import choice as rc

def play_again():
    """"""This function returns True if the player wants to play again,
    otherwise it returns False.""""""
    return raw_input('Do you want to play again? (yes or no)').lower().startswith('y')

def total(hand):
    """"""totals the hand""""""
    #special ace dual value thing
    aces = hand.count(11)
    t = sum(hand)
    # you have gone over 21 but there is an ace
    while aces &gt; 0 and t &gt; 21:
        # this will switch the ace from 11 to 1
        t -= 10
        aces -= 1
    return t

cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11]
cwin = 0  # computer win
pwin = 0  # player win
while True:
    # Main Game Loop (multiple hands)
    pbust = False  # player busted
    cbust = False  # computer busted
    # player's hand
    player = []
    player.append(rc(cards))
    player.append(rc(cards))
    pbust = False  # player busted
    cbust = False  # computer busted
    while True:
        # Player Game Loop (per hand)
        tp = total(player)
        print (""The player has cards %s with a total value of %d"" % (player, tp))
        if tp &gt; 21:
            print (""--&gt; Player is busted!"")
            pbust = True
            break
        elif tp == 21:
            print (""\a BLACKJACK!!!"")
            break
        else:
            hs = raw_input(""Hit or Stand/Done (h or s): "").lower()
            if hs.startswith('h'):
                player.append(rc(cards))
            else:
                break
    #Dealers Hand
    comp = []
    comp.append(rc(cards))
    comp.append(rc(cards))
    tc = total(comp)
    while tc &lt; 18:
        # Dealer Hand Loop
        comp.append(rc(cards))
        tc = total(comp)
    print (""the computer has %s for a total of %d"" % (comp, tc))
    if tc &gt; 21:
        print (""--&gt; Computer is busted!"")
        cbust = True

    # Time to figure out who won
    if cbust or pbust:
        if cbust and pbust:
            print (""both busted, draw"")
        elif cbust:
            print (""Player wins!"")
            pwin += 1
        else:
            print (""Computer wins!"")
            cwin += 1
    elif tc &lt; tp:
        print (""Player wins!"")
        pwin += 1
    elif tc == tp:
        print (""It's a draw!"")
    else:
        print (""Computer wins!"")
        cwin += 1

    # Hand over, play again?
    print (""\nWins, player = %d  computer = %d"" % (pwin, cwin))
    exit = raw_input(""Press Enter (q to quit): "").lower()
    if 'q' in exit:
       break

print (""\n\nThanks for playing blackjack with the computer!"")
</code></pre>
","1913990","","","","","2013-03-29 17:48:43","","","","5","","",""
"15706858","2","","15705439","2013-03-29 16:04:00","","1","","<p><a href=""http://linux.die.net/man/8/sudo"" rel=""nofollow"">http://linux.die.net/man/8/sudo</a> quote: <br />
The real and effective uid and gid are set to match those of the target user </p>

<p>So, your only option of knowing which user to use is to read the target user from either a config file or a cmdline option, or someway of heuristical guessing.</p>

<p>A good idea is the so called rights shedding: Start with root privilegs, then do what you nedd them for. Then become a less privileged user. <br />
You would use the os module for that:
<a href=""http://docs.python.org/2/library/os.html#os.setuid"" rel=""nofollow"">http://docs.python.org/2/library/os.html#os.setuid</a></p>
","1433550","","","","","2013-03-29 16:04:00","","","","0","","",""
"15707075","2","","15705439","2013-03-29 16:16:06","","10","","<p>You can switch between uid's using <code>os.seteuid()</code>. This differs from <code>os.setuid()</code> in that you can go back to getting root privileges when you need them.</p>

<p>For example, run the following as root:</p>

<pre><code>import os

open('file1', 'wc')

# switch to userid 501
os.seteuid(501)
open('file2', 'wc')

# switch back to root
os.seteuid(0)
open('file3', 'wc')
</code></pre>

<p>This creates <code>file1</code> and <code>file3</code> as root, but <code>file2</code> as the user with uid 501.</p>

<p>If you want to determine which user is calling your script, <code>sudo</code> sets two environment variables:</p>

<pre><code>SUDO_USER
SUDO_UID
</code></pre>

<p>Respectively the username and the uid of the user who called <code>sudo</code>. So you could use <code>int(os.environ['SUDO_UID'])</code> to use with <code>os.seteuid()</code>.</p>
","893780","","893780","","2013-03-29 16:26:30","2013-03-29 16:26:30","","","","0","","",""
"41648497","2","","15705439","2017-01-14 09:28:36","","1","","<p>I found that using os.seteuid and os.setegid didn't actually drop the root privileges.  After calling them I was still able to do things that required root privileges.  The solution I found that worked was to use os.setresuid and os.setresgid instead:</p>

<pre><code>sudo_uid = int(os.getenv(""SUDO_UID""))
sudo_gid = int(os.getenv(""SUDO_GID""))

# drop root privileges
os.setresgid(sudo_gid, sudo_gid, -1)
os.setresuid(sudo_uid, sudo_uid, -1)

subprocess.call(""mkdir /foo1"", shell = True) # should fail

# regain root privileges
os.setresgid(0, 0, -1)
os.setresuid(0, 0, -1)

subprocess.call(""mkdir /foo2"", shell = True) # should succeed
</code></pre>
","1809879","","","","","2017-01-14 09:28:36","","","","0","","",""
"15718449","2","","15705491","2013-03-30 12:19:38","","0","","<p>You are attempting to use both <code>grid</code> and <code>pack</code> for the same containing widget. You cannot do that. You either need to use <code>grid</code> for the text and scrollbars or use <code>pack</code> for the buttons.</p>
","7432","","","","","2013-03-30 12:19:38","","","","0","","",""
"15707037","2","","15705511","2013-03-29 16:13:36","","1","","<p>you can modify query._whereclause directly, but I'd seek to find a way to not have this issue in the first place - whereever it is that the Query is generated should be factored out so that the non-whereclause version is made available.</p>
","34549","","","","","2013-03-29 16:13:36","","","","1","","",""
"15705622","2","","15705546","2013-03-29 14:47:49","","8","","<p>Use <a href=""http://docs.python.org/2/library/collections.html#collections.Counter"" rel=""nofollow noreferrer""><code>collections.Counter()</code></a> to convert <code>x</code> and <code>y</code> to multi-sets, then subtract to see if all of <code>y</code>'s letters can be found in <code>x</code>:</p>

<pre><code>from collections import Counter

def checkYinX(y, x):
    return not (Counter(y) - Counter(x))
</code></pre>

<p>Subtracting multi-sets <em>removes</em> characters when their count falls to 0. If this results in an empty multi-set, it becomes <code>False</code> in a boolean context, like all 'empty' python types. <code>not</code> turns that into <code>True</code> if that is the case.</p>

<p>Demo:</p>

<pre><code>&gt;&gt;&gt; x = ""dsjcosnag""
&gt;&gt;&gt; y = ""dog""
&gt;&gt;&gt; print(checkYinX(y,x))
True
&gt;&gt;&gt; print(checkYinX('cat',x))
False
</code></pre>
","100297","","100297","","2013-03-29 15:05:39","2013-03-29 15:05:39","","","","3","","",""
"15724609","2","","15705546","2013-03-30 23:22:55","","1","","<p>Here's a way of doing it without <code>collections.Counter</code>, as requested in chat:</p>

<pre><code>def countLetters(word):
    d = {}
    for l in word:
        d[l] = d.get(l,0) + 1
    return d

def checkSubset(answer,letters):
    a, l = countLetters(answer), countLetters(letters)
    return all(l.get(x,0) &gt;= a.get(x) for x in a.keys())

print(checkSubset('dog','odr'))
</code></pre>
","267781","","1592783","","2013-03-31 11:57:01","2013-03-31 11:57:01","","","","1","","",""
"15705717","2","","15705577","2013-03-29 14:54:10","","1","","<p>You want to use <a href=""http://docs.python.org/2/library/itertools.html#itertools.groupby"" rel=""nofollow""><code>itertools.groupby()</code></a> with a dash of <a href=""http://docs.python.org/2/library/itertools.html#itertools.islice"" rel=""nofollow""><code>itertools.islice()</code></a> and <a href=""http://docs.python.org/2/library/itertools.html#itertools.chain"" rel=""nofollow""><code>itertools.chain</code></a>:</p>

<pre><code>from itertools import islice, chain, groupby
from operator import itemgetter

list(chain.from_iterable(islice(group, 1, None)
                         for key, group in groupby(inputlist, key=itemgetter(0))))
</code></pre>

<ul>
<li>The <code>groupby()</code> call groups the input list into chunks where the first item is the same (<code>itemgetter(0)</code> is the grouping key). </li>
<li>The <code>islice(group, 1, None)</code> call turns the groups into iterables where the <em>first</em> element will be skipped.</li>
<li>The <code>chain.from_iterable()</code> call takes each <code>islice()</code> result and chains them together into a new iterable, which <code>list()</code> turns back into a list.</li>
</ul>

<p>Demo:</p>

<pre><code>&gt;&gt;&gt; list(chain.from_iterable(islice(group, 1, None) for key, group in groupby(inputlist, key=itemgetter(0))))
[[0, 2], [0, 3], [0, 4], [1, 6], [1, 7], [2, 9]]
</code></pre>
","100297","","100297","","2013-03-29 14:59:31","2013-03-29 14:59:31","","","","0","","",""
"15705725","2","","15705577","2013-03-29 14:54:32","","0","","<pre><code>a = [[0,1],
 [0,2],
 [0,3],
 [0,4],
 [1,5],
 [1,6],
 [1,7],
 [2,8],
 [2,9]]

a = [y for x in itertools.groupby(a, lambda x: x[0]) for y in list(x[1])[1:]]

print a
</code></pre>
","8747","","","","","2013-03-29 14:54:32","","","","0","","",""
"15705828","2","","15705577","2013-03-29 15:01:02","","0","","<p>My answer is :  </p>

<pre><code>from operator import itemgetter
sorted(l, key=itemgetter(1))  # fist sort by fist element of inner list 
nl = []
[[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9]]
j = 0;
for i in range(len(l)): 
    if(j == l[i][0]):
        j = j + 1   # skip element 
    else:
        nl.append(l[i])  # otherwise append  in new list
</code></pre>

<p>output is:</p>

<pre><code>&gt;&gt;&gt; nl
[[0, 2], [0, 3], [0, 4], [1, 6], [1, 7], [2, 9]]
</code></pre>
","1673391","","","","","2013-03-29 15:01:02","","","","0","","",""
"15705955","2","","15705577","2013-03-29 15:09:38","","2","","<p>Pass in your lists and the key that you want to check values on. </p>

<pre><code>def getsubset(set, index):
    hash = {}
    for list in set:
        if not list[index] in hash:
            set.remove(list)
            hash[list[index]]  = list

    return set
</code></pre>
","1946319","","","","","2013-03-29 15:09:38","","","","1","","",""
"15706171","2","","15705577","2013-03-29 15:22:17","","3","","<p>As requested, a <code>numpy</code> solution:</p>

<pre><code>import numpy as np
a = np.array([[0,1], [0,2], [0,3], [0,4], [1,5], [1,6], [1,7], [2,8], [2,9]])
_,i = np.unique(a[:,0], return_index=True)

b = np.delete(a, i, axis=0)
</code></pre>

<hr>

<p>(above is edited to incorporate @Jaime's solution, here is my original masking solution for posterity's sake)</p>

<pre><code>m = np.ones(len(a), dtype=bool)
m[i] = False
b = a[m]
</code></pre>

<hr>

<p>Interestingly, the mask seems to be faster:</p>



<pre><code>In [225]: def rem_del(a):
   .....:     _,i = np.unique(a[:,0], return_index=True)
   .....:     return np.delete(a, i, axis = 0)
   .....: 

In [226]: def rem_mask(a):
   .....:     _,i = np.unique(a[:,0], return_index=True)
   .....:     m = np.ones(len(a), dtype=bool)
   .....:     m[i] = False
   .....:     return a[m]
   .....: 

In [227]: timeit rem_del(a)
10000 loops, best of 3: 181 us per loop

In [228]: timeit rem_mask(a)
10000 loops, best of 3: 59 us per loop
</code></pre>
","1730674","","1730674","","2013-03-29 16:11:28","2013-03-29 16:11:28","","","","5","","",""
"15705958","2","","15705630","2013-03-29 15:09:40","","87","","<pre><code>In [1]: df
Out[1]:
    Sp  Mt Value  count
0  MM1  S1     a      3
1  MM1  S1     n      2
2  MM1  S3    cb      5
3  MM2  S3    mk      8
4  MM2  S4    bg     10
5  MM2  S4   dgd      1
6  MM4  S2    rd      2
7  MM4  S2    cb      2
8  MM4  S2   uyi      7

In [2]: df.groupby(['Mt'], sort=False)['count'].max()
Out[2]:
Mt
S1     3
S3     8
S4    10
S2     7
Name: count
</code></pre>

<p>To get the indices of the original DF you can do:</p>

<pre><code>In [3]: idx = df.groupby(['Mt'])['count'].transform(max) == df['count']

In [4]: df[idx]
Out[4]:
    Sp  Mt Value  count
0  MM1  S1     a      3
3  MM2  S3    mk      8
4  MM2  S4    bg     10
8  MM4  S2   uyi      7
</code></pre>

<p>Note that if you have multiple max values per group, all will be returned.</p>

<p><strong>Update</strong></p>

<p>On a hail mary chance that this is what the OP is requesting:</p>

<pre><code>In [5]: df['count_max'] = df.groupby(['Mt'])['count'].transform(max)

In [6]: df
Out[6]:
    Sp  Mt Value  count  count_max
0  MM1  S1     a      3          3
1  MM1  S1     n      2          3
2  MM1  S3    cb      5          8
3  MM2  S3    mk      8          8
4  MM2  S4    bg     10         10
5  MM2  S4   dgd      1         10
6  MM4  S2    rd      2          7
7  MM4  S2    cb      2          7
8  MM4  S2   uyi      7          7
</code></pre>
","919872","","919872","","2013-03-29 15:42:14","2013-03-29 15:42:14","","","","2","","",""
"21709413","2","","15705630","2014-02-11 17:54:50","","20","","<p>Having tried the solution suggested by Zelazny on a relatively large DataFrame (~400k rows) I found it to be very slow.  Here is an alternative that I found to run orders of magnitude faster on my data set.</p>

<pre><code>df = pd.DataFrame({
    'sp' : ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4', 'MM4'],
    'mt' : ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],
    'val' : ['a', 'n', 'cb', 'mk', 'bg', 'dgb', 'rd', 'cb', 'uyi'],
    'count' : [3,2,5,8,10,1,2,2,7]
    })

df_grouped = df.groupby(['sp', 'mt']).agg({'count':'max'})

df_grouped = df_grouped.reset_index()

df_grouped = df_grouped.rename(columns={'count':'count_max'})

df = pd.merge(df, df_grouped, how='left', on=['sp', 'mt'])

df = df[df['count'] == df['count_max']]
</code></pre>
","1889456","","1889456","","2014-02-11 18:06:24","2014-02-11 18:06:24","","","","5","","",""
"31185210","2","","15705630","2015-07-02 12:52:33","","5","","<p>For me, the easiest solution would be keep value when count is equal to the maximum. Therefore, the following one line command is enough : </p>

<pre><code>df[df['count'] == df.groupby(['Mt'])['count'].transform(max)]
</code></pre>
","1967500","","","","","2015-07-02 12:52:33","","","","0","","",""
"40629420","2","","15705630","2016-11-16 10:14:22","","20","","<p>You can sort the dataFrame by count and then remove duplicates. I think it's easier:</p>

<pre><code>df.sort_values('count', ascending=False).drop_duplicates(['Sp','Mt'])
</code></pre>
","5737533","","","","","2016-11-16 10:14:22","","","","3","","",""
"44960833","2","","15705630","2017-07-07 00:40:35","","2","","<p>Easy solution would be to apply : <strong>idxmax() function to get indices of rows with max values.</strong> 
This would filter out all the rows with max value in the group.</p>

<pre><code>In [365]: import pandas as pd

In [366]: df = pd.DataFrame({
'sp' : ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4','MM4'],
'mt' : ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],
'val' : ['a', 'n', 'cb', 'mk', 'bg', 'dgb', 'rd', 'cb', 'uyi'],
'count' : [3,2,5,8,10,1,2,2,7]
})

In [367]: df                                                                                                       
Out[367]: 
   count  mt   sp  val
0      3  S1  MM1    a
1      2  S1  MM1    n
2      5  S3  MM1   cb
3      8  S3  MM2   mk
4     10  S4  MM2   bg
5      1  S4  MM2  dgb
6      2  S2  MM4   rd
7      2  S2  MM4   cb
8      7  S2  MM4  uyi


### Apply idxmax() and use .loc() on dataframe to filter the rows with max values:
In [368]: df.loc[df.groupby([""sp"", ""mt""])[""count""].idxmax()]                                                       
Out[368]: 
   count  mt   sp  val
0      3  S1  MM1    a
2      5  S3  MM1   cb
3      8  S3  MM2   mk
4     10  S4  MM2   bg
8      7  S2  MM4  uyi

### Just to show what values are returned by .idxmax() above:
In [369]: df.groupby([""sp"", ""mt""])[""count""].idxmax().values                                                        
Out[369]: array([0, 2, 3, 4, 8])
</code></pre>
","5424918","","","","","2017-07-07 00:40:35","","","","0","","",""
"46108414","2","","15705719","2017-09-08 04:00:25","","0","","<p>In lxml's code, it dynamically load modules. That makes IDE fails to analyze reference as IDE just analyzes raw code.</p>
","5588279","","","","","2017-09-08 04:00:25","","","","0","","",""
"15712127","2","","15705745","2013-03-29 22:03:55","","2","","<p>tkListAutoWidth.py shows one way to do it:</p>

<p><a href=""http://svn.effbot.org/public/stuff/sandbox/tkinter/"" rel=""nofollow"">http://svn.effbot.org/public/stuff/sandbox/tkinter/</a></p>

<p>edit:</p>

<p>So you might have something along the lines of,</p>

<pre><code>import tkinter as tk
from tkinter import font


class NewListbox(tk.Listbox):

    def autowidth(self, maxwidth=100)
        autowidth(self, maxwidth)


def autowidth(list, maxwidth=100):
    f = font.Font(font=list.cget(""font""))
    pixels = 0
    for item in list.get(0, ""end""):
        pixels = max(pixels, f.measure(item))
    # bump listbox size until all entries fit
    pixels = pixels + 10
    width = int(list.cget(""width""))
    for w in range(0, maxwidth+1, 5):
        if list.winfo_reqwidth() &gt;= pixels:
            break
        list.config(width=width+w)


if __name__ == ""__main__"":

    master = tk.Tk()
    listbox = NewListbox(master, selectmode=tk.SINGLE)

    # ...
    # ...
    keys = serverDict.keys()
    for key in sorted(keys):
        listbox.insert(""end"", key)

    listbox.pack()

    button = tk.Button(master, text=""Execute"", command=execute)
    button.pack()

    listbox.autowidth()

    master.mainloop()
</code></pre>
","1635557","","1635557","","2013-04-01 21:09:19","2013-04-01 21:09:19","","","","3","","",""
"15787278","2","","15705745","2013-04-03 12:22:59","","3","","<p>This is based off of Oblivion's answer but I edited it so it worked for me.</p>

<p>I made a new listbox class that was based off of the original one but had a new function that I got from Oblivion's code. I then call that function and it makes the listbox an appropriate size.</p>

<pre><code>class Listbox(tk.Listbox):
    def autowidth(self,maxwidth):
        f = font.Font(font=self.cget(""font""))
        pixels = 0
        for item in self.get(0, ""end""):
            pixels = max(pixels, f.measure(item))
        # bump listbox size until all entries fit
        pixels = pixels + 10
        width = int(self.cget(""width""))
        for w in range(0, maxwidth+1, 5):
            if self.winfo_reqwidth() &gt;= pixels:
                break
            self.config(width=width+w)

master = tk.Tk()
listbox = Listbox(master, selectmode=tk.SINGLE)

keys = serverDict.keys()
for key in sorted(keys):
    listbox.insert(tk.END, key)

button = tk.Button(master, text=""Execute"", command=execute)
listbox.autowidth(250)
listbox.pack()
button.pack()
tk.mainloop()
</code></pre>
","2224712","","","","","2013-04-03 12:22:59","","","","0","","",""
"26504193","2","","15705745","2014-10-22 09:21:29","","4","","<p>Resetting the listbox width worked for me. I used the Oblivion's answer and noticed that only width is always zero.</p>

<pre><code>listbox = tk.Listbox(master, selectmode=tk.SINGLE)
listbox.config(width=0)
</code></pre>

<p>I also recommend to reset root window geometry after reloading content of the list. If user manually extends the window the window would stop accommodate size of its content.</p>

<pre><code>root.winfo_toplevel().wm_geometry("""")
</code></pre>
","1156616","","","","","2014-10-22 09:21:29","","","","2","","",""
"16131255","2","","16131208","2013-04-21 12:48:03","","3","","<p><code>np.argsort(A)</code> is sorting each row of <code>A</code> separately. For example,</p>

<pre><code>In [21]: np.argsort([[6,5,4],[3,2,1]])
Out[21]: 
array([[2, 1, 0],
       [2, 1, 0]])
</code></pre>

<p>Instead, you want to flatten your array into a 1-dimensional array of values, then argsort that. That can be done by setting the <code>axis</code> parameter to <code>None</code> (thanks to @Akavall for pointing this out):</p>

<pre><code>In [23]: np.argsort(A, axis=None)
Out[23]: array([3, 0, 1, 2])
</code></pre>

<p>Then use <a href=""http://docs.scipy.org/doc/numpy/reference/generated/numpy.unravel_index.html#numpy-unravel-index"" rel=""nofollow"">np.unravel_index</a> to recover the associated index in <code>A</code>.</p>

<hr>

<pre><code>In [14]: import numpy as np

In [15]: A = np.array([[7, 8], [9, 5]])   

In [4]: np.column_stack(np.unravel_index(np.argsort(A, axis=None)[::-1], A.shape))
Out[4]: 
array([[1, 0],
       [0, 1],
       [0, 0],
       [1, 1]])
</code></pre>

<p>Note, for NumPy version 1.5.1 or older, <code>np.unravel_index</code> raises a ValueError if passed an array-like object for its first argument. In that case, you could use a list comprehension:</p>

<pre><code>In [17]: [np.unravel_index(p, A.shape) for p in np.argsort(A, axis=None)[::-1]]
Out[17]: [(1, 0), (0, 1), (0, 0), (1, 1)]
</code></pre>
","190597","","190597","","2013-04-21 16:21:41","2013-04-21 16:21:41","","","","5","","",""
"16640744","2","","16301356","2013-05-19 23:54:59","","0","","<p>You're question is not clear (e.g. what do you mean by ""the normal GUI""), but it <em>sounds</em> like you installed Windows versions of Python and those extensions; those binaries won't work with the Cygwin version of Python.</p>
","580360","","","","","2013-05-19 23:54:59","","","","0","","",""
"23500083","2","","23500040","2014-05-06 16:27:46","","3","","<p>You could use the built-in <a href=""https://docs.python.org/2/library/functions.html#sum"" rel=""nofollow""><code>sum</code></a> function:</p>

<pre><code>sum(v for v in color_codes.itervalues() if v &gt; x)
</code></pre>

<p>The argument to <code>sum</code> is a <a href=""https://docs.python.org/2/reference/expressions.html#generator-expressions"" rel=""nofollow""><em>generator expression</em></a>, and the result is the sum of the values that are greater than <code>x</code>.</p>
","661519","","661519","","2014-05-06 16:37:25","2014-05-06 16:37:25","","","","4","","",""
"23501543","2","","23500173","2014-05-06 17:49:04","","1","","<p>The <a href=""http://en.cppreference.com/w/cpp/chrono/c/clock"" rel=""nofollow"">documentation</a> says:</p>

<p>""<em>Returns the approximate processor time used by the process since the beginning of an implementation-defined era related to the program's execution. To convert result value to seconds divide it by CLOCKS_PER_SEC.</em>""</p>

<p>That's pretty vague. <code>CLOCK_PER_SEC</code> is set to <code>10^6</code> and the approximate stands for poor resolution, not that the current clocks tick over 1000 faster and the results are rounded. That might be not a very technical term, but it is appropriate. The actual resolution everywhere I tested was about 100Hz = 0,01s. It's been like that for years. Note date here <a href=""http://www.guyrutenberg.com/2007/09/10/resolution-problems-in-clock/"" rel=""nofollow"">http://www.guyrutenberg.com/2007/09/10/resolution-problems-in-clock/</a>. </p>

<p>Then the doc follows with: ""<em>On POSIX-compatible systems, clock_gettime with clock id CLOCK_PROCESS_CPUTIME_ID offers better resolution.</em>""</p>

<p>So:</p>

<ol>
<li><p>It's CPU time only. But 2 threads = 2*CPU time. See the example on cppreference.</p></li>
<li><p>It is not suited for fine grain measurements at all, as explained above. You were on the verge of its accuracy.</p></li>
<li><p>IMO measuring wall-clock is the only sensible thing, but its a rather personal opinion. Especially with multithreaded applications and multiprocessing in general. Otherwise results of <code>system</code>+<code>user</code> should be similar anyways.</p></li>
</ol>

<p>EDIT: At 3. This of course holds for computational tasks. If your process uses <code>sleep</code> or give up execution back to system, it might be more feasible measuring CPU time. Also regarding the comment that <code>clock</code> resolution is erm... bad. It is, but to be fair one could argue you should not measure such short computations. IMO its too bad, but if you measure times over few seconds I guess its fine. I would personally use others available tools.</p>
","1133179","","19679","","2014-06-10 21:35:09","2014-06-10 21:35:09","","","","4","","",""
"23504062","2","","23500173","2014-05-06 20:11:58","","1","","<blockquote>
  <p>Setting the optimization flag certainly makes a big difference.</p>
</blockquote>

<p>C++ is a language that begs to be compiled optimized, particularly so if the code in question uses containers and iterators from the C++ standard library. A simple <code>++iterator</code> shrinks from a good-sized chain of function calls when compiled unoptimized to one or two assembly statement when optimization is enabled.</p>

<p>That said, I knew what the compiler would do to your test code. Any decent optimizing compiler will make that <code>for (int i=0; i&lt;N; i++) continue;</code> loop vanish. It's the <em>as-if</em> rule at work. That loop does nothing, so the compiler is free to treat it as if it wasn't even there.</p>

<p>When I look at the CPU behavior of a suspect CPU hog, I write a simple driver (in a separate file) that calls the suspect function a number of times, sometimes a very large number of times. I compile the functionality to be tested with optimization enabled, but I compile the driver with optimization disabled. I don't want a too-smart optimizing compiler to see that those 100,000 calls to <code>function_to_be_tested()</code> can be pulled out of the loop and then further optimize the loop away.</p>

<p>There are a number of solid reasons for calling the test function a number of times between the single call to start timer and stop timer. This is why python has the <code>timeit</code> module.</p>
","774499","","","","","2014-05-06 20:11:58","","","","1","","",""
"23501184","2","","23500202","2014-05-06 17:27:57","","0","","<p>you don't want the future flag if you're working from the deformable object:</p>

<pre><code>targetMesh = ""pSphere1""    
blendshapes = cmds.ls(*cmds.listHistory(targetMesh) or [], type= 'blendShape')
</code></pre>

<p>To get the actual shapes, you'd add</p>

<pre><code>source_shapes =  cmds.ls(*cmds.listHistory(*blendshapes) or [], type= 'mesh', ni=True)
</code></pre>
","1936075","","","","","2014-05-06 17:27:57","","","","1","","",""
"23502118","2","","23500202","2014-05-06 18:21:41","","0","","<p>So here's the solution I got working i believe:</p>

<pre><code>def getBlendShape(shape):
    '''
    @param Shape: Name of the shape node.
    Returns MFnBlendShapeDeformer node or None.
    '''
    # Create an MDagPath for our shape node:
    selList = OpenMaya.MSelectionList()
    selList.add(shape)
    mDagPath = OpenMaya.MDagPath()
    selList.getDagPath(0, mDagPath)

    #Create iterator.
    mItDependencyGraph = OpenMaya.MItDependencyGraph(
        mDagPath.node(),
        OpenMaya.MItDependencyGraph.kPlugLevel)

    # Start walking through our shape node's dependency graph.
    while not mItDependencyGraph.isDone():
        # Get an MObject for the current item in the graph.
        mObject = mItDependencyGraph.currentItem()
        # It has a BlendShape.
        if mObject.hasFn(OpenMaya.MFn.kBlendShape):
            # return the MFnSkinCluster object for our MObject:
            return OpenMayaAnim.MFnBlendShapeDeformer(mObject)
        mItDependencyGraph.next()

if __name__ == '__main__':
    #TargetMesh
    targetMesh = ""pSphereShape1""

    #Get Blendshape.
    blndShpNode = getBlendShape(targetMesh)

    if blndShpNode:
        #Get base objects.
        mObjArr = OpenMaya.MObjectArray()
        blndShpNode.getBaseObjects(mObjArr)
        mDagPath = OpenMaya.MDagPath()
        OpenMaya.MFnDagNode(mObjArr[0]).getPath(mDagPath)
        print(mDagPath.fullPathName())

    else:
        print(""No Blendshape found."")
</code></pre>

<p>The trick is that I needed to pass the shape node and to only use OpenMaya.MItDependencyGraph.kPlugLevel). In this example it finds the base object of the blendshape.</p>
","1736366","","","","","2014-05-06 18:21:41","","","","0","","",""
"23503414","2","","23503326","2014-05-06 19:33:29","","12","","<p>Seems you're using an incorrect import, try:</p>

<pre><code>from PIL import Image
</code></pre>

<p>instead.</p>
","681785","","","","","2014-05-06 19:33:29","","","","2","","",""
"23503575","2","","23503486","2014-05-06 19:43:43","","3","","<p>This should be a <a href=""https://docs.python.org/2/howto/unicode.html#the-unicode-type"" rel=""nofollow"">unicode string</a>:</p>

<pre><code>&gt;&gt;&gt; 'KR√∂ger'.title()
'Kr√∂Ger'
&gt;&gt;&gt; u'KR√∂Ger'.title()
u'Kr√∂ger'
</code></pre>

<p><strong>Edit:</strong> A simple python script as an example:</p>

<pre><code># -- coding: utf-8 --
print 'KR√∂ger'.title()  # 'Kr√∂Ger'
print u'KR√∂Ger'.title()  # 'Kr√∂ger'
print 'KR√∂ger'.decode('utf-8').title()  # 'Kr√∂ger'
</code></pre>
","262618","","262618","","2014-05-06 19:59:34","2014-05-06 19:59:34","","","","5","","",""
"23503597","2","","23503486","2014-05-06 19:45:17","","1","","<p>You could decode UTF 8 before the title:</p>

<pre><code>print s.decode('utf-8').title()
</code></pre>
","1183790","","","","","2014-05-06 19:45:17","","","","1","","",""
"23616980","2","","23503486","2014-05-12 19:10:09","","-2","","<p>I finally found a way to do what I want. God bless generators:</p>

<pre><code>name = 'KR√∂Ger'
name = ' '.join(name[0].upper() + name[1:].lower() for n in name.split())
print name
&gt;&gt;Kr√∂ger
</code></pre>
","3459479","","3459479","","2014-05-12 21:44:59","2014-05-12 21:44:59","","","","0","","",""
"23504241","2","","23503667","2014-05-06 20:35:47","","4","","<p><em>This answer basically summarizes the approaches mentioned in the question and the comments, and adds some comparison/insights about them</em></p>

<hr>

<p><strong>Approach #1 -- checking all row-pairs</strong></p>

<p>As you suggested, you can iterate over all row pairs, and compute the inner product. If <code>A.shape==(N,M)</code>, i.e. you have N rows of size M each, you end up with a O(M*N^2) complexity.</p>

<p><strong>Approach #2 -- matrix multiplication</strong></p>

<p>As suggested in the comments by @JoeKington, you can compute the multiplication <code>A.dot(A.T)</code>, and check all the non-diagonal elements. Depending on the algorithm used for matrix multiplication, this can be <a href=""https://en.wikipedia.org/wiki/Matrix_multiplication#Algorithms_for_efficient_matrix_multiplication"" rel=""nofollow"">faster</a> than the naive O(M*N^2) algorithm, but only asymptotically better. Unless your matrices are big, they would be slower.</p>

<hr>

<p>The advantages of approach #1:</p>

<ul>
<li>You can ""short circuit"" -- quit the check as soon as you find the first non-orthogonal pair</li>
<li>requires less memory. In #2, you create a temporary NxN matrix.</li>
</ul>

<p>The advantages of approach #2:</p>

<ul>
<li>The multiplication is fast, as it is implemented in the heavily-optimized linear-algebra library (BLAS of ATLAS). I believe those libraries choose the right algorithm to use according to input size (i.e. they won't use the fancy algorithms on small matrices, because they are slower for small matrices. There's a big constant hidden behind that O-notation).</li>
<li>less code to write</li>
</ul>

<p>My bet is that for small matrices, approach #2 would prove faster due to the fact the LA libraries are heavily optimized, and despite the fact they compute the entire multiplication, even after processing the first pair of non-orthogonal rows.</p>
","2096752","","2096752","","2014-05-06 20:41:06","2014-05-06 20:41:06","","","","3","","",""
"23512809","2","","23503667","2014-05-07 08:38:04","","2","","<p>It seems that this will do</p>

<pre><code>product = np.dot(A,A.T)
np.fill_diagonal(product,0)
if (product.any() == 0):
</code></pre>
","2179021","","","","","2014-05-07 08:38:04","","","","1","","",""
"23552362","2","","23503667","2014-05-08 20:55:40","","1","","<h1>Approach #3: Compute the QR decomposition of A<sup>T</sup></h1>

<p>In general, to find an orthogonal basis of the range space of some matrix X, one can compute the QR decomposition of this matrix (using Givens rotations or Householder reflectors). Q is an orthogonal matrix and R upper triangular. The columns of Q corresponding to non-zero diagonal entries of R form an orthonormal basis of the range space.</p>

<p>If the columns of X=A<sup>T</sup>, i.e., the rows of A, already are orthogonal, then the QR decomposition will necessarily have the R factor diagonal, where the diagonal entries are plus or minus the lengths of the columns of X resp. the rows of A.</p>

<p>Common folklore has it that this approach is numerically better behaved than the computation of the product A*A<sup>T</sup>=R<sup>T</sup>*R. This may only matter for larger matrices. The computation is not as straightforward as the matrix product, however, the amount of operations is of the same size.</p>
","3088138","","","","","2014-05-08 20:55:40","","","","0","","",""
"23503832","2","","23503725","2014-05-06 19:58:20","","1","","<p>See <a href=""https://docs.python.org/3/library/functions.html#sorted"" rel=""nofollow"">the documentation for <code>sorted</code></a>.</p>

<p>Ascending by key:</p>

<pre><code>for key, value in sorted(mydict.items()):
    pass
</code></pre>

<p>Descending by key:</p>

<pre><code>for key, value in sorted(mydict.items(), reverse=True):
    pass
</code></pre>

<p>Ascending by value:</p>

<pre><code>def get_value(item):
    return item[1]

for key, value in sorted(mydict.items(), key=get_value):
    pass
</code></pre>

<p>Descending by value:</p>

<pre><code>for key, value in sorted(mydict.items(), key=get_value, reverse=True):
    pass
</code></pre>

<p>You could also use <code>key=lambda x: x[1]</code> instead of defining a <code>get_key</code> function if you wanted.</p>
","212555","","","","","2014-05-06 19:58:20","","","","0","","",""
"23504182","2","","23503725","2014-05-06 20:25:54","","0","","<pre><code>d = {'carl':40,
      'alan':2,
      'bob':1,
      'danny':3}

ks = sorted(d.keys()) #  sort keys
for key in ks:# key ascending
print(key, d[key])


for key in ks[::-1]: #key descending
    print(key, d[key])


vs= sorted(d, key=d.get) # sort keys by values
for key in vs: # values ascending
    print(key, d[key])


for key in vs[::-1]: # values descending
    print(key, d[key])
</code></pre>
","2141635","","2141635","","2014-05-06 21:09:34","2014-05-06 21:09:34","","","","0","","",""
"23507328","2","","23507320","2014-05-07 01:45:57","","4","","<p>You can use <a href=""https://docs.python.org/2/library/functions.html#zip"" rel=""nofollow noreferrer""><code>zip</code></a> and <a href=""https://stackoverflow.com/q/509211/2555451"">Explain Python&#39;s slice notation</a>:</p>

<pre><code>&gt;&gt;&gt; path1 = [0, 3, 1]
&gt;&gt;&gt; splitsOfPath1 = zip(path1, path1[1::])
&gt;&gt;&gt; splitsOfPath1
[(0, 3), (3, 1)]
&gt;&gt;&gt;
&gt;&gt;&gt; path2 = [0, 3, 2, 1]
&gt;&gt;&gt; splitsOfPath2 = zip(path2, path2[1::])
&gt;&gt;&gt; splitsOfPath2
[(0, 3), (3, 2), (2, 1)]
&gt;&gt;&gt;
</code></pre>
","2555451","","-1","","2017-05-23 11:59:31","2014-05-07 01:45:57","","","","0","","",""
"23507444","2","","23507365","2014-05-07 01:59:02","","3","","<p>Move self.variable = 5 to before self.y = Y(self). When Y is initialized, variable has yet to be set in the parent. Since it is not a class attribute (it is defined only for the instance) it does not exist until then.</p>
","2457474","","","","","2014-05-07 01:59:02","","","","1","","",""
"23513195","2","","23507365","2014-05-07 08:55:37","","0","","<p>You're instantiating before adding/initializing the <code>variable</code> attribute. It will have no knowledge of the variable unless again instantiated or swapped as the other answer mentioned.</p>
","2956066","","","","","2014-05-07 08:55:37","","","","0","","",""
"26578198","2","","23507408","2014-10-26 21:31:37","","0","","<p>Google App Engine pipelines do not like <code>.gitignore</code> file. Try if it works without that file. It fixed the problem for me.</p>
","397646","","","","","2014-10-26 21:31:37","","","","0","","",""
"28179286","2","","23507408","2015-01-27 20:22:31","","0","","<p>It took me a long time to get this working for PHP, after a lot of communication with Google it was finally revealed to me that in your app.yaml file you need to have a line that reads:</p>

<pre><code>threadsafe: false
</code></pre>

<p>In order for the pipeline to successfully pick up and deploy your git push (I use sourcetree, but command line git has the same end result) that line must be present.  If it's omitted or set to true the pipeline won't be able to deploy it.</p>

<p>I wanted to throw this answer on here in case anyone stumbled on this thread looking for help.  One of my projects has ""randomly broken"" and after 3 months of successfully using my release pipeline for multiple commits per day it suddenly no longer deploys when I push.  Ultimately giving the extremely helpful error message of ""Unable to get deployment status"" - and now none of my changes can be applied to the live site.  Copying the entire source code, changing the app name, and pushing to a new GAE project with release pipeline works fine, but I need the original site to start working again.</p>
","3931108","","","","","2015-01-27 20:22:31","","","","0","","",""
"23513725","2","","23507481","2014-05-07 09:20:07","","0","","<p>You can try that same without the 'install', i have never used that install -command. Or one likely option is that you ez_setup.py broken or bad, i have been using this: <a href=""https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py"" rel=""nofollow"">https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py</a> </p>
","3589149","","","","","2014-05-07 09:20:07","","","","4","","",""
"23598378","2","","23507481","2014-05-11 21:55:31","","0","","<p>For anyone who happens upon this question: I used <a href=""http://continuum.io/downloads"" rel=""nofollow"">anaconda</a> installer, and now everything works perfectly. I would avoid the path I took and go directly to anaconda.</p>
","360826","","","","","2014-05-11 21:55:31","","","","0","","",""
"23507634","2","","23507492","2014-05-07 02:21:58","","0","","<p>You can get the value from html form to view use <code>request</code> arg,</p>

<pre><code>def my_view(request, ):
   search_term = request.GET.get(""q"", None) #--&gt; q means ""name"" of select box in html.
   # use search_term whatever you wants.
</code></pre>
","2401736","","","","","2014-05-07 02:21:58","","","","1","","",""
"23507786","2","","23507666","2014-05-07 02:39:28","","3","","<pre><code>L = [...]
while any(isinstance(i, list) for i in L):
   L = [j for i in L for j in (i if isinstance(i, list) else [i])]

result = sum(L)
</code></pre>

<p>Basically you iterate over the outer list and unpack the first level of any inner lists until there are no inner lists left</p>
","174728","","","","","2014-05-07 02:39:28","","","","0","","",""
"23507904","2","","23507666","2014-05-07 02:52:51","","0","","<p>Here is one solution:</p>

<pre><code>from copy import deepcopy

def recursive_sum(int_list):
    #int_list = deepcopy(int_list)    use this line if don't want to modify original list
    ret = 0
    while len(int_list) &gt; 0:
        elem = int_list.pop(0)
        if type(elem) == int:
            ret += elem
        elif type(elem) == list:
            int_list.extend(elem)
        else:
            raise ValueError
    return ret

testcase = [1,2,3,[4,5,[6,7,8,[9,10]]]]
print recursive_sum(testcase)    # print 55
</code></pre>

<p>Basically, it pops first element of input list. If it's Int, add into sum; if it's List, extend to the end of input list</p>
","1976791","","","","","2014-05-07 02:52:51","","","","0","","",""
"23508122","2","","23507666","2014-05-07 03:17:55","","1","","<p>One mostly-readable (and presumably performant, though I haven't tested it) way to iteratively flatten a list:</p>

<pre><code>from collections import deque

def iterative_flatten(li):
    nested = deque(li)
    res = []
    dq = deque()
    while nested or dq:
        x = dq.pop() if dq else nested.popleft()
        dq.extend(reversed(x)) if isinstance(x, list) else res.append(x)
    return res
</code></pre>

<p>Uses deques to avoid nasty O(n**2) behavior from <code>list.pop(0)</code>.  You can get equivalent results by making a reversed copy and popping from the end, but I find the code a little easier to follow if you just use deques and <code>popleft</code>.  On a similar note, it's a line or two less code if you want to mutate the list in-place but way slower (for the same reason; <code>pop</code>ping from the <em>head</em> of the list is O(n) since every element in the underlying array has to be shifted).</p>

<pre><code>nested = [1,[[2,3],[[4,5],[6]]],[[[[7]]]]]

iterative_flatten(nested)
Out[116]: [1, 2, 3, 4, 5, 6, 7]

sum(iterative_flatten(nested))
Out[117]: 28
</code></pre>

<p>After it's flat, summing is (hopefully) trivial :-)</p>
","2581969","","2581969","","2014-05-07 04:21:26","2014-05-07 04:21:26","","","","0","","",""
"23507848","2","","23507731","2014-05-07 02:46:38","","1","","<p>Create a simple algorithm that would generate those characters, by using the math patterns that would be necessary to create those characters. For that example, notice you can use a pattern for the digits you gave.</p>

<p>For example (say the user input is <code>i</code>):</p>

<p>The first line <code>XXXXXX</code> is six characters. The example with an input of <code>i=8</code> is eight characters. So why not output the the character <code>X</code> for <code>i</code> times?</p>

<p><code>print ""X""*i</code></p>

<p>That's your first line. Now continue with the rest of the lines.</p>

<p>The second line is <code>X    X</code>. There are four spaces for an input of <code>i=6</code>, six spaces for an input of <code>i=8</code>. So there's a pattern there, clearly. So why output an <code>X</code>, then <code>i-2</code> spaces, then another <code>X</code>?</p>

<p><code>print ""X"" + "" ""*(i-2) + ""X""</code></p>

<p>Complete the third line the same way:</p>

<p><code>print ""X""*(i-2)/2 + "" ""*(i/2-2) + ""X""*(i/2)/2</code></p>

<p>You should be able to complete the rest from here, to reverse the character and try out various inputs. Think about what happens for other integer values that aren't <code>i=6</code>, <code>8</code>, <code>10</code>, <code>12</code>, etc. You can use <code>round</code>, <code>floor</code>, or a variation on these patterns in order to handle inputs such as <code>i=7</code> and <code>9</code>.</p>
","3190758","","","","","2014-05-07 02:46:38","","","","0","","",""
"23511975","2","","23507779","2014-05-07 07:54:59","","0","","<p>I assume your purpose is to create a program that starts two threads, one (client thread) receives keyboard input and sends to the other (server thread), the server thread prints out everything it received.</p>

<p>Based on my assumption, you first need to start a ServerThread listen to a port (it's not like what your 'ClientThread' did). Here's an example:</p>

<pre><code>import socket
import threading

def main():
    host = 'localhost'
    port = 5000
    size = 1024

    thread1 = ServerThread(host, port, size) 
    thread1.start() 

    #open a socket for client
    try:
        clientSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        clientSock.connect((host,port))
    except socket.error, (value,message):
        if clientSock:
            clientSock.close()
            print ""Could not connect to server: "" + message
        sys.exit(1) 

    while True:
        #wait for keyboard input
        line = raw_input()
        #send the input to the server unless its only a newline
        if line != ""\n"":
            clientSock.send(line)
            # Is server supposed to send back any response?
            #data = clientSock.recv(size)
            #print data
        if line == ""Quit"":
            clientSock.close()
            break

class ServerThread(threading.Thread): 
    def __init__(self, host, port, size): 
        super(ServerThread, self).__init__() 
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind((host, port))
        self.sock.listen(1)
        self.data_size = size
        self.stopped = False 

    def run(self): 
        conn, addr = self.sock.accept()
        print 'Connected by', addr
        while not self.stopped: 
            data = conn.recv(self.data_size)
            if data == 'Quit':
                print 'Client close the connection'
                self.stopped = True
            else:
                print 'Server received data:', data
                # Is server supposed to send back any response?
                #conn.sendall('Server received data: ' + data)
        conn.close()

if __name__ == '__main__':
    main()
</code></pre>

<p>And these are the output:</p>

<pre><code>Connected by ('127.0.0.1', 41153)
abc
Server received data: abc
def
Server received data: def
Quit
Client close the connection
</code></pre>

<p>You may check here for more details about Python socket: <a href=""https://docs.python.org/2/library/socket.html?#example"" rel=""nofollow"">https://docs.python.org/2/library/socket.html?#example</a></p>
","1976791","","","","","2014-05-07 07:54:59","","","","0","","",""
"23507935","2","","23507883","2014-05-07 02:55:33","","2","","<p>The most straightforward approach would be to get the first item from <a href=""http://www.voidspace.org.uk/python/mock/mock.html#mock.Mock.call_args_list"" rel=""nofollow""><code>mock.call_args_list</code></a> and check if it is called with <code>1</code>:</p>

<blockquote>
  <p>call_args_list</p>
  
  <p>This is a list of all the calls made to the mock object in sequence
  (so the length of the list is the number of times it has been called).</p>
</blockquote>

<pre><code>assert m.call_args_list[0] == call(1)
</code></pre>

<p>where <code>call</code> is imported from <code>mock</code>: <code>from mock import call</code>.</p>

<p>Also, <a href=""http://www.voidspace.org.uk/python/mock/mock.html#mock.Mock.mock_calls"" rel=""nofollow""><code>mock_calls</code></a> would work in place of <code>call_args_list</code> too.</p>

<p>Another option would be to use <a href=""http://www.voidspace.org.uk/python/mock/mock.html#mock.Mock.assert_any_call"" rel=""nofollow""><code>assert_any_call()</code></a>:</p>

<pre><code>m.assert_any_call(1)
</code></pre>
","771848","","","","","2014-05-07 02:55:33","","","","0","","",""
"23509541","2","","23508577","2014-05-07 05:37:01","","3","","<p>xlabel and ylabel are on my plot when I run your example, just a bit outside the display depending on how it is sized.</p>

<p>Try adding the line:</p>

<pre><code>plt.subplots_adjust(bottom=.25, left=.25)
</code></pre>

<p>or simply stretching the display window.</p>
","31676","","","","","2014-05-07 05:37:01","","","","0","","",""
"23509288","2","","23508582","2014-05-07 05:18:16","","1","","<p>Unfortunately there's no (Qt-native) way to label a <code>QListView</code> (on which <code>QListWidget</code> is based). If your really don't want additional widgets, I would instead use a single-column <code>QTableWidget</code>, and put the list title in the column header. <code>QTableWidget</code> and <code>QListWidget</code> work pretty similarly, so this probably won't break too much of your existing code.</p>

<p>An example based on yours:</p>

<pre><code>class MyApp(object):
    def __init__(self):

        # snipped

        self.listA = self.prepareTableWidget('List A')
        self.listB = self.prepareTableWidget('List B')

        # snipped

    def prepareTableWidget(self, name):
        table = QtGui.QTableWidget()
        table.setColumnCount(1)
        table.setHorizontalHeaderLabels([name])
        table.horizontalHeader().setResizeMode(QtGui.QHeaderView.Stretch)
        return table

    # snipped
</code></pre>

<p><img src=""https://i.stack.imgur.com/yYw3D.png"" alt=""QTableWidget example""></p>
","1376863","","1376863","","2014-05-07 05:26:25","2014-05-07 05:26:25","","","","1","","",""
"23509644","2","","23508582","2014-05-07 05:44:40","","0","","<p>Here is my attempt to achieve it without abandoning QListWidget()... utilizing layout's .insertLayout() method to attach QLabel without losing GUI space usually taken by QGroupBox()...</p>

<p><img src=""https://i.stack.imgur.com/dZPic.png"" alt=""enter image description here""></p>

<hr>

<pre><code>from PyQt4 import QtGui, QtCore

class MyApp(object):
    def __init__(self):
        super(MyApp, self).__init__()
        app = QtGui.QApplication(sys.argv)
        self.mainWidget = QtGui.QWidget()
        self.mainLayout = QtGui.QVBoxLayout()
        self.mainWidget.setLayout(self.mainLayout)

        self.groupbox = QtGui.QGroupBox()
        self.groupbox.setTitle('My Groupbox')
        self.layout = QtGui.QVBoxLayout()
        self.groupbox.setLayout(self.layout)

        self.listGroupbox = QtGui.QGroupBox()
        self.listLayout = QtGui.QHBoxLayout()
        self.listGroupbox.setLayout(self.listLayout)
        self.listA=QtGui.QListWidget()
        self.listB=QtGui.QListWidget()

        self.subLayoutA=QtGui.QVBoxLayout()        
        self.listLayout.insertLayout(0,self.subLayoutA)
        self.subLayoutA.addWidget(QtGui.QLabel('Label A') )
        self.subLayoutA.addWidget(self.listA)

        self.subLayoutB=QtGui.QVBoxLayout()
        self.listLayout.insertLayout(1,self.subLayoutB)
        self.subLayoutB.addWidget(QtGui.QLabel('Label B') )
        self.subLayoutB.addWidget(self.listB)


        self.layout.addWidget(self.listGroupbox) 

        self.okButton = QtGui.QPushButton('OK')
        self.okButton.clicked.connect(self.OK) 
        self.layout.addWidget(self.okButton)                      
        self.mainLayout.addWidget(self.groupbox)
        self.mainWidget.show()
        sys.exit(app.exec_())

    def OK(self):
        print 'Ok'    
if __name__ == '__main__':
    MyApp()
</code></pre>
","1107049","","","","","2014-05-07 05:44:40","","","","0","","",""
"23508834","2","","23508596","2014-05-07 04:37:18","","1","","<p>interesting! Let's take a look.</p>

<p>The design is pretty simple. Read the file into a dictionary and perform manipulation on the dict, then write out the files.</p>

<pre><code>with open('file1.txt') as in_:
    mapping = {}
    for line in in_:
        key,value = line.strip().split(',')
        mapping[key] = int(value)
</code></pre>

<p><code>mapping</code> is now <code>{""a"":1, ""b"":3, ""c"":5, ""d"":-4}</code> Let's read in our files.</p>

<pre><code>values = {}
with open('file2.txt') as in_:
    for _ in range(3):
        # This is ugly, but it's a quick hack. I'd improve it later.
        cur_dict = next(in_).strip()
        values[cur_dict] = {}
        for __ in range(4):
            key, value = next(in_).strip().split(',')
            values[cur_dict][key] = int(value)
</code></pre>

<p>Sheesh that's probably the ugliest code I've ever written, but <code>values</code> is now <code>{""sample1"": {""a"":12, ""b"":10, ""c"":4, ""d"":6}, ""sample2"": ...}</code></p>

<p>Now for the manipulation. This is actually easy. Let's tack file write onto it, since this step is rather elementary</p>

<pre><code>for dataset in values:
    for key, value in mapping.items():
        values[dataset][key] += value
    with open(dataset + "".txt"") as out:
        out.write(dataset)
        for key,value in values[dataset]:
            out.write(""{},{}\n"".format(key,value))
</code></pre>
","3058609","","3058609","","2014-05-07 04:51:06","2014-05-07 04:51:06","","","","9","","",""
"23509208","2","","23508732","2014-05-07 05:12:27","","1","","<p>Actually i used both beautiful soup and element tree(for xml parsing)
fetch all elements in <code>&lt;span&gt;</code> </p>

<pre><code># -*- coding: UTF-8 -*-

from bs4 import *
import xml.etree.ElementTree as ET

html='''&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;table class=""dayinner""&gt;
        &lt;tr class=""lun""&gt;
            &lt;td class=""mealname"" colspan=""3""&gt;LUNCH&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr class=""lun""&gt;
            &lt;td class=""station""&gt;&amp;nbsp;Deli&lt;/td&gt;

            &lt;td class=""menuitem""&gt;
                &lt;div class=""menuitem""&gt;
                    &lt;input class=""chk"" id=""S1L0000010000047598_35356"" onclick=
                    ""rptlist(this);"" onmouseout=""wschk(0);"" onmouseover=
                    ""wschk(1);"" type=""checkbox""&gt; &lt;span class=""ul"" onclick=
                    ""nf('0000047598_35356');"" onmouseout=""pcls(this);""
                    onmouseover=""ws(this);""&gt;Made to Order Deli Core&lt;/span&gt;
                &lt;/div&gt;
            &lt;/td&gt;

            &lt;td class=""price""&gt;&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr class=""lun""&gt;
            &lt;td class=""station""&gt;&amp;nbsp;&lt;/td&gt;

            &lt;td class=""menuitem""&gt;
                &lt;div class=""menuitem""&gt;
                    &lt;input class=""chk"" id=""S1L0000020000047933_06835"" onclick=
                    ""rptlist(this);"" onmouseout=""wschk(0);"" onmouseover=
                    ""wschk(1);"" type=""checkbox""&gt; &lt;span class=""ul"" onclick=
                    ""nf('0000047933_06835');"" onmouseout=""pcls(this);""
                    onmouseover=""ws(this);""&gt;Turkey Chipotle Petite Wrap&lt;/span&gt;
                &lt;/div&gt;
            &lt;/td&gt;

            &lt;td class=""price""&gt;&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr class=""lun""&gt;
            &lt;td colspan=""3"" style=""height:3px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr class=""lun""&gt;
            &lt;td colspan=""3"" style=""background-color:#c0c0c0; height:1px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr class=""lun""&gt;
            &lt;td class=""station""&gt;&amp;nbsp;Entr√©e&lt;/td&gt;

            &lt;td class=""menuitem""&gt;
                &lt;div class=""menuitem""&gt;&lt;input class=""chk"" id=
                ""S1L0000030000044794_08943"" onclick=""rptlist(this);""
                onmouseout=""wschk(0);"" onmouseover=""wschk(1);"" type=""checkbox""&gt;
                &lt;span class=""ul"" onclick=""nf('0000044794_08943');"" onmouseout=
                ""pcls(this);"" onmouseover=""ws(this);""&gt;Steamed
                Corn&lt;/span&gt;&lt;img alt=""Vegan"" class=""icon"" src=
                ""images/g_062.gif""&gt;&lt;img alt=""Mindful Item"" class=""icon"" src=
                ""images/m_051.gif""&gt;&lt;/div&gt;
            &lt;/td&gt;

            &lt;td class=""price""&gt;&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr class=""lun""&gt;
            &lt;td class=""station""&gt;&amp;nbsp;&lt;/td&gt;

            &lt;td class=""menuitem""&gt;
                &lt;div class=""menuitem""&gt;
                    &lt;input class=""chk"" id=""S1L0000040000033087_22244"" onclick=
                    ""rptlist(this);"" onmouseout=""wschk(0);"" onmouseover=
                    ""wschk(1);"" type=""checkbox""&gt; &lt;span class=""ul"" onclick=
                    ""nf('0000033087_22244');"" onmouseout=""pcls(this);""
                    onmouseover=""ws(this);""&gt;Cuban Mojo Roasted Pork Loin&lt;/span&gt;
                &lt;/div&gt;
            &lt;/td&gt;

            &lt;td class=""price""&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt; '''

soup = BeautifulSoup(html)

counter = ET.Element('counter')
counter.set(""name"", ""#Deli"")





for i in soup.findAll('span'):
    dish = ET.SubElement(counter, 'dish')
    name = ET.SubElement(dish, 'name')
    name.text= i.text.replace('\n',' ')

print ET.dump(counter)
</code></pre>
","1545322","","","","","2014-05-07 05:12:27","","","","0","","",""
"23521792","2","","23508732","2014-05-07 15:18:08","","1","","<p>You could this something like this :</p>

<pre><code># -*- coding: utf-8 -*-

soup = BeautifulSoup(html)
title = soup.find('td', class_='station').text.strip()

spans = soup.find_all('span', class_='ul')

# create the root of the XML file
root = ET.Element(""counter"")
root.set(""name"", title)

for item in spans:
    # retrieve the text inside the &lt;td class=""station""&gt;
    text = list(list(item.parents)[2].previous_siblings)[1].text.strip()
    if text == u'Entr√©e':
        break

    dish = ET.SubElement(root, 'dish')
    name = ET.SubElement(dish, 'name')
    name.text = item.text.rstrip()

tree = ET.ElementTree(root)
tree.write(""filename.xml"")
</code></pre>

<p>And this is the content of desired xml file :</p>

<pre><code>&lt;counter name=""Deli""&gt;
    &lt;dish&gt;
        &lt;name&gt;Made to Order Deli Core&lt;/name&gt;
    &lt;/dish&gt; 
    &lt;dish&gt;
        &lt;name&gt;Turkey Chipotle Petite Wrap&lt;/name&gt;
    &lt;/dish&gt;
&lt;/counter&gt;
</code></pre>

<p>Is very important include the following line <code># -*- coding: utf-8 -*-</code> line above in the beginning of your file to avoid problems  with the accent , see <a href=""https://stackoverflow.com/questions/10589620/syntaxerror-non-ascii-character-xa3-in-file-when-function-returns"">SyntaxError: Non-ASCII character &#39;\xa3&#39; in file when function returns &#39;&#163;&#39;</a> for more details.</p>
","2695387","","-1","","2017-05-23 12:05:10","2014-05-14 19:38:26","","","","8","","",""
"23522076","2","","23512010","2014-05-07 15:30:24","","0","","<p>I use pyinstaller to create stand alone exe for windows.  <a href=""http://www.pyinstaller.org/"" rel=""nofollow"">http://www.pyinstaller.org/</a>.</p>
","259538","","","","","2014-05-07 15:30:24","","","","2","","",""
"23520198","2","","23512030","2014-05-07 14:11:47","","0","","<p>Have you considered just creating the certificate for the IP address? That wouldn't be much more fragile (probably less fragile, actually) than having to manually add the domain name to hosts files. See <a href=""https://stackoverflow.com/a/11710762/138772"">https://stackoverflow.com/a/11710762/138772</a> and <a href=""https://stackoverflow.com/a/8444863/372643"">https://stackoverflow.com/a/8444863/372643</a> for more info on that.</p>

<p>An alternative, but one probably requiring more work, would be to include a local DNS server in your app that redirects the domain name to your IP address. I can't really say what the best one to use for that would be, though.</p>
","138772","","-1","","2017-05-23 11:57:29","2014-05-07 14:11:47","","","","0","","",""
"23513568","2","","23512095","2014-05-07 09:13:13","","0","","<p>Add <code>import sys</code> to your <strong>main.py</strong> and add these lines.</p>

<pre><code># inject './lib' dir in the path so that we can simply do ""import ndb"" or whatever there's in the app lib dir.
if 'lib' not in sys.path:
    sys.path[0:0] = ['lib']
</code></pre>

<p>Create the <strong>lib</strong> folder in the root of your project and copy the unirest folder in lib folder.</p>

<p>You can now import <strong>unirest</strong> and use your library.</p>

<p>But, why not use the standard method and library provide by Google App Engine ?</p>
","2417946","","","","","2014-05-07 09:13:13","","","","2","","",""
"23512230","2","","23512160","2014-05-07 08:09:19","","3","","<p><code>givenName</code> seems to be a list. You can append another list like this:     </p>

<pre><code>new_contact.insert_given_name(contact.givenName + [extra_text])
</code></pre>
","746961","","","","","2014-05-07 08:09:19","","","","0","","",""
"23512250","2","","23512160","2014-05-07 08:10:14","","-1","","<p>contact.givenName is a list, and extra_text is a string. in python you can add string to string, or list to list. you can't add string to list.</p>

<p>if you'd like to add string to a list, use list.append method.</p>

<pre><code>mylist.append(mystr)
</code></pre>
","3559845","","","","","2014-05-07 08:10:14","","","","4","","",""
"23512299","2","","23512276","2014-05-07 08:12:40","","4","","<p>You can do that using <code>enumerate</code>:</p>

<pre><code>with open(filename1) as file1, open(filename2) as file2:
    for i, (line1, line2) in enumerate(zip(file1, file2)):
</code></pre>

<p>Here <code>i</code> will be the number of iterations that you have run. More correctly, <code>i</code> will be the index of <code>line1</code> and <code>line2</code> in the zipped list which for your purpose is essentially the same. Note however that on the first iteration, <code>i</code> will be <code>0</code> not <code>1</code>. More generally, on the <code>nth</code> iteration, the value of <code>i</code> will be <code>n-1</code></p>
","3337070","","","","","2014-05-07 08:12:40","","","","2","","",""
"23512486","2","","23512339","2014-05-07 08:22:37","","1","","<p>Well, one workaround that is not really beautiful is to first save the <code>NaN</code> and put them back in:</p>

<pre><code>temp = df.iloc[pd.isnull(df).any(1).nonzero()[0]]
asd = df.drop_duplicates('col')
pd.merge(temp, asd, how='outer')
Out[81]: 
   col
0  one
1  two
2  NaN
3  NaN
4  NaN
</code></pre>
","1082349","","","","","2014-05-07 08:22:37","","","","1","","",""
"35860429","2","","23512339","2016-03-08 06:22:41","","4","","<p>Try</p>

<pre><code>df[(~df.duplicated()) | (df['col'].isnull())]
</code></pre>

<p>The result is :</p>

<pre><code>col
0   one
1   two
2   NaN
3   NaN     
4   NaN
</code></pre>
","3915498","","","","","2016-03-08 06:22:41","","","","0","","",""
"23512759","2","","23512452","2014-05-07 08:35:08","","1","","<p>You're over-thinking this and confusing yourself. This appears to be a representation of a directed graph: it looks like <code>edges</code> is a list of Edges, and each Edge has a <code>headNodeId</code> and a <code>tailNodeId</code>. Each of those IDs refers to a Node in the <code>nodes</code> list.</p>

<p>So all that's happening when you say <code>nodes[ edges[-1].headNodeId ]</code> is ""give me the item from 'nodes' whose index is the head node ID of the last item in 'edges'"". Then, the code is simply calling <code>addInEdge</code> on that Node.</p>

<p>A much more verbose version of this would be:</p>

<pre><code>last_edge = edges[-1]
head_node_id = last_edge.headNodeId
head_node = nodes[head_node_id]
last_edge.addInEdge(head_node)
tail_node_id = last_edge.tailNodeId
tail_node = nodes[tail_node_id]
last_edge.addOutEdge(tail_node)
</code></pre>
","104349","","","","","2014-05-07 08:35:08","","","","4","","",""
"23512836","2","","23512469","2014-05-07 08:39:34","","4","","<p><a href=""http://www.w3.org/TR/SVG11/text.html#Introduction"" rel=""nofollow"">Section 10.1 of the SVG spec</a> gives three options:</p>

<blockquote>
  <p>Each ‚Äòtext‚Äô element causes a single string of text to be rendered. SVG
  performs no automatic line breaking or word wrapping. To achieve the
  effect of multiple lines of text, use one of the following methods:</p>
  
  <ul>
  <li>The author or authoring package needs to pre-compute the line breaks and use multiple ‚Äòtext‚Äô elements (one for each line of text).</li>
  <li>The author or authoring package needs to pre-compute the line breaks and use a single ‚Äòtext‚Äô element with one or more ‚Äòtspan‚Äô child
  elements with appropriate values for attributes ‚Äòx‚Äô, ‚Äòy‚Äô, ‚Äòdx‚Äô and
  ‚Äòdy‚Äô to set new start positions for those characters which start new
  lines. (This approach allows user text selection across multiple lines
  of text -- see Text selection and clipboard operations.)</li>
  <li>Express the text to be rendered in another XML namespace such as XHTML embedded inline within a ‚ÄòforeignObject‚Äô element. (Note:
  the exact semantics of this approach are not completely defined at
  this time.)</li>
  </ul>
</blockquote>
","222914","","","","","2014-05-07 08:39:34","","","","0","","",""
"24624328","2","","23512479","2014-07-08 05:31:32","","6","","<p>The issue is that the default is set to the <em>result</em> of <code>now()</code>, not the <em>execution</em> of it, so the default will be the exact time it was set, rather than the current time at insert.  Use <code>sa.func.current_timestamp()</code> to set it to that function, rather than the result of that function.</p>

<pre><code>def upgrade():
    op.add_column('my_table', sa.Column('my_column', sa.DateTime,
            server_default=sa.func.current_timestamp()))
</code></pre>
","400617","","400617","","2014-07-08 13:09:08","2014-07-08 13:09:08","","","","0","","",""
"23533589","2","","23512509","2014-05-08 05:42:03","","1","","<p>that would work:</p>

<pre><code>from ABC import ABC
class MMMM(QDialog, Ui_MMMM):

  def __init__(self, iface):
    ...

  def graph(self):
    c = ABC()
    x, y = c.defineABC()
</code></pre>

<p>otherwise, you can set x and y in ABC (by doing <code>self.x = ...</code>) and then access them by <code>c.x</code></p>
","1548052","","","","","2014-05-08 05:42:03","","","","4","","",""
"23512551","2","","23512525","2014-05-07 08:25:57","","2","","<p>You have a list of one dictionary <code>[{}]</code> instead of <code>{}</code>. The following will work:</p>

<pre><code>contact = MineContact()
extra_text = ""-%d"" % (self.iteration)
new_contact.insert_phone(contact.tel[0]['value'])
</code></pre>

<p>Alternatively, you could change your <code>self['tel']</code> to a dictionary instead of a list of a dictionary. Here is what it would look like:</p>

<pre><code>self['tel'] = {'type': ['Mobile'], 'value': '555%s' % curr_time[8:]}
</code></pre>

<p>Then, your original <code>new_contact.insert_phone(contact.tel['value'])</code> would work</p>
","3337070","","","","","2014-05-07 08:25:57","","","","0","","",""
"23513720","2","","23513305","2014-05-07 09:19:52","","0","","<p>If you want to use Django's ORM without using the full Django suite, then you need to configure it before you run.</p>

<p>You can create a django settings file and point the <code>DJANGO_SETTINGS_MODULE</code> environment variable to it, or you can call <code>settings.configure</code>.</p>

<p>The <a href=""https://docs.djangoproject.com/en/dev/topics/settings/#using-settings-without-setting-django-settings-module"" rel=""nofollow"">documentation explains this here</a>. It's pretty straightforward:</p>

<pre><code>from django.conf import settings

settings.configure(DEBUG=True, ONE_SETTING=1, ANOTHER_SETTING=2, SOME_SETTING=3)
</code></pre>

<p>Note that if you're only interested in default settings, you probably don't actually need to pass any settings in there.</p>
","873145","","","","","2014-05-07 09:19:52","","","","0","","",""
"23516788","2","","23516515","2014-05-07 11:39:33","","0","","<p>A common pattern with these kind of restarts is to assume that the player wants to play the first time and then ask if he/she wants to continue before ending.</p>

<pre><code>play = 'y'
while play == 'y'

    Do your game logic here

    play = input('Would you like to play in-between [y|n]? ')
</code></pre>

<p>Hopefully that should show you how to get back on track.</p>

<p>Edit: sorry I saw now that this functionality was already in place. The issue you are having is that you get stuck in loops when you look at what value guess is, instead of looping you should use a if statement when checking what the guess is.</p>
","317273","","","","","2014-05-07 11:39:33","","","","2","","",""
"23516633","2","","23516520","2014-05-07 11:32:05","","1","","<p>You need to find all <code>script</code> tags that apply; you only looked for the first. Use <code>soup.find_all()</code>:</p>

<pre><code>for script in soup.find_all('script', src=False):
    script.decompose()
</code></pre>

<p>This finds all <code>&lt;script&gt;</code> tags that do <em>not</em> have a <code>src</code> attribute.</p>
","100297","","","","","2014-05-07 11:32:05","","","","2","","",""
"23544567","2","","23516520","2014-05-08 14:22:21","","0","","<pre><code>for element in soup.findAll('script'):
            element.extract()
</code></pre>

<p>another alternative, you can replace <code>'script'</code> with <code>['script', 'style']</code> to get rid of styles as well.</p>
","1685963","","","","","2014-05-08 14:22:21","","","","0","","",""
"23516595","2","","23516527","2014-05-07 11:30:12","","0","","<p>__EVENTVALIDATION is probably not static, you need to load the login page in python, get the __EVENTVALIDATION field and then do the login.</p>

<p>Something like this should work:</p>

<pre><code>import requests
from bs4 import BeautifulSoup

s = requests.session()

def get_eventvalidation():
    r = s.get(""http://url.to.login.page"")
    bs = BeautifulSoup(r.text)

    return bs.find(""input"", {""name"":""__EVENTVALIDATION""}).attrs['value']

authentication_url = '&lt;URL I am trying to log into&gt;'

payload = {
  '__EVENTVALIDATION': get_eventvalidation(),
  'txtUsername': '&lt;USERNAME&gt;',
  'txtPassword': '&lt;PASSWORD&gt;',
  }

login = s.post(authentication_url, data=payload)

print login.text
</code></pre>

<p>You need the requests module and beautifulsoup4. Or you can just rewrite it to not use libraries.</p>

<p>Edit:
You probably need __VIEWSTATE as a POST value.</p>
","984705","","984705","","2014-05-08 12:19:44","2014-05-08 12:19:44","","","","6","","",""
"23559559","2","","23516574","2014-05-09 08:05:24","","1","","<p><strong>Note</strong>: I'm making assumptions here since I'm unfamiliar with .H5 files and the Python code the accesses them.</p>

<p>I think that what is happening is that when you ""load"" the array, you're not actually loading an array. Instead, I think that an object is constructed on top of the file. It probably reads in dimensions and information related to how the file is organized, but it doesn't read the whole file.</p>

<p>That object mimicks an array so good that when you later on perform the slice operation, the normal Python slice operation can be executed, but at this point the actual data is being read. That's why the slice takes so long time compared to ""loading"" all the data.</p>

<p>I arrive at this conclusion because of the following.</p>

<p>If you're reading 75 frames of 3584x3584 pixels, I'm assuming they're uncompressed (H5 seems to be just raw dumps of data), and in that case, 75 * 3.584 * 3.584 = 963.379.200, this is around 918MB of data. Couple that with you ""reading"" this in 180ms, we get this calculation:</p>

<pre><code>918MB / 180ms = 5.1GB/second reading speed
</code></pre>

<p>Note, this number is for 1-byte pixels, which is also unlikely.</p>

<p>This speed thus seems highly unlikely, as even the best SSDs today reach way below 1GB/sec.</p>

<p>It seems much more plausible that an object is just constructed on top of the file and the slice operation incurs the cost of reading at least 1 frame worth of data.</p>

<p>If we divide the speed by 75 to get per-frame speed, we get 68MB/sec speed for 1-byte pixels, and with 24 or 32-bit pixels we get up to 270MB/sec reading speeds. Much more plausible.</p>
","267","","","","","2014-05-09 08:05:24","","","","0","","",""
"23516666","2","","23516649","2014-05-07 11:33:33","","1","","<p>You should do it as:</p>

<pre><code>def printv(*prargs):
    if vflag:
        print ' '.join(prargs)

&gt;&gt;&gt; printv(""hello"", ""there"", ""world"")
hello there world
</code></pre>

<p>The <code>string.join(iterable)</code> returns a string of all the elements in the list separated by the specified string, in this case <code>' '</code> (a whitespace).</p>
","3337070","","","","","2014-05-07 11:33:33","","","","1","","",""
"23516748","2","","23516664","2014-05-07 11:37:30","","2","","<pre><code>import xml.etree.ElementTree as ET
e = ET.parse('test.txt')
root = e.getroot()
print(ET.tostring(root.find('test')))
</code></pre>

<p>yields</p>

<pre><code>&lt;test&gt;The tag &amp;lt;StackOverflow&amp;gt; is good to bring up at parties.&lt;/test&gt;
</code></pre>

<p>Alternatively, you could escape the text with <a href=""https://docs.python.org/2/library/xml.sax.utils.html#xml.sax.saxutils.escape"" rel=""nofollow"">saxutils.escape</a>:</p>

<pre><code>import xml.sax.saxutils as saxutils
print(saxutils.escape(root.find('test').text))
</code></pre>

<p>yields</p>

<pre><code>The tag &amp;lt;StackOverflow&amp;gt; is good to bring up at parties.
</code></pre>
","190597","","","","","2014-05-07 11:37:30","","","","1","","",""
"23517153","2","","23516680","2014-05-07 11:56:06","","0","","<p>You can use <a href=""https://docs.python.org/3.4/library/itertools.html#itertools.product"" rel=""nofollow""><code>itertools.product()</code></a> to generate the truth table and then depending on the logical operation, determine the probability. I don't know which logical operation you would like to use so let's just create a dictionary each row:</p>

<pre><code>&gt;&gt;&gt; l = ['B', 'C']
&gt;&gt;&gt; truth_table = [dict(zip(l, x)) for x in product((0, 1), repeat=2)]
&gt;&gt;&gt; print(truth_table)
[{'B': 0, 'C': 0}, {'B': 0, 'C': 1}, {'B': 1, 'C': 0}, {'B': 1, 'C': 1}]
</code></pre>

<p>For calculating the probability, you'll probably need a separate function to do that. For example a logical disjunction for two keys with 0 and 1 being the values is basically equivalent to <code>max()</code>.</p>

<pre><code>&gt;&gt;&gt; l.append('Prob')
&gt;&gt;&gt; truth_table = [dict(zip(l, x + (max(x), )) for x in product((0, 1), repeat=2)]
&gt;&gt;&gt; print(truth_table)
[{'B': 0, 'C': 0, 'Prob': 0},
 {'B': 0, 'C': 1, 'Prob': 1},
 {'B': 1, 'C': 0, 'Prob': 1},
 {'B': 1, 'C': 1, 'Prob': 1}]
</code></pre>
","300791","","300791","","2014-05-07 12:33:43","2014-05-07 12:33:43","","","","0","","",""
"23517776","2","","23516680","2014-05-07 12:25:36","","1","","<p>You can generate the truth table using a <a href=""http://en.wikipedia.org/wiki/Power_set"" rel=""nofollow"">powerset</a>,</p>

<pre><code>def power_set(items):
    n = len(items)
    for i in xrange(2**n):
        combo = []
        for j in xrange(n):
            if (i &gt;&gt; j) % 2 == 1:
                combo.append(1)
            else:
                combo.append(0)
        yield combo    # if you want tuples, change to yield tuple(combo)


In [13]: list(power_set(l))
Out[13]: [[0, 0], [1, 0], [0, 1], [1, 1]]

In [14]: l=['B','C','E']

In [15]: list(power_set(l))
Out[15]: 
[[0, 0, 0],
[1, 0, 0],
 [0, 1, 0],
 [1, 1, 0],
 [0, 0, 1],
 [1, 0, 1],
 [0, 1, 1],
 [1, 1, 1]]
</code></pre>

<p>If you want to  make a dict of the data, change <code>yield combo</code> to <code>yield tuple(combo)</code></p>

<p>Then you can store key value pairings  like:</p>

<pre><code>d={}
for data in power_set(l):
    d[data]=""your_calc_prob""
print d
{(0, 1): 'your_calc_prob', (1, 0): 'your_calc_prob', (0, 0): 'your_calc_prob', (1, 1): 'your_calc_prob'}
</code></pre>

<p>If you want the output sorted you can use sorted() which makes a copy of the list and returns a list:</p>

<pre><code> sorted(list(power_set(l)))
 Out[21]: 
 [[0, 0, 0],
 [0, 0, 1],
 [0, 1, 0],
 [0, 1, 1],
 [1, 0, 0],
 [1, 0, 1],
 [1, 1, 0],
 [1, 1, 1]]
</code></pre>

<p>Or you can use the list method sort() which sorts the list  in place:</p>

<pre><code>In [22]: data = list(power_set(l))  
In [23]: data.sort()
In [24]: data
Out[24]: 
[[0, 0, 0],
[0, 0, 1],
[0, 1, 0],
[0, 1, 1],
[1, 0, 0],
[1, 0, 1],
[1, 1, 0],
[1, 1, 1]]
</code></pre>
","2141635","","2141635","","2014-05-07 16:14:39","2014-05-07 16:14:39","","","","7","","",""
"23517360","2","","23516703","2014-05-07 12:07:28","","1","","<p>The <code>while</code> loop is creating a conflict with Tkinter's <code>mainloop</code>. Threading or multiprocessing are solutions, but I'd recommend looking into Tkinter's <a href=""http://effbot.org/tkinterbook/widget.htm#Tkinter.Widget.after-method"" rel=""nofollow""><code>after()</code></a> method. Here's a simplified example of how to handle a timer using after:</p>

<pre><code>from Tkinter import *

class App(Frame):
    def __init__(self, parent):
        Frame.__init__(self, parent)

        self.mins = 0
        self.secs = 0

        # make a stringvar instance to hold the time
        self.timer = StringVar()
        self.timer.set('%d:%d' % (self.mins, self.secs))

        Label(self, textvariable=self.timer).pack()
        Button(self, text='Start', command=self._start_timer).pack()
        Button(self, text='Stop', command=self._stop_timer).pack()

    def _start_timer(self):
        self.secs += 1      # increment seconds
        if self.secs == 60: # at every minute,
            self.secs = 0   # reset seconds
            self.mins += 1  # and increment minutes

        self.timer.set('%d:%d' % (self.mins, self.secs))

        # set up the after method to repeat this method
        # every 1000 ms (1 second)
        self.repeater = self.after(1000, self._start_timer)

    def _stop_timer(self):
        self.after_cancel(self.repeater)

root = Tk()
App(root).pack()
mainloop()
</code></pre>
","3275008","","","","","2014-05-07 12:07:28","","","","0","","",""
"23516876","2","","23516828","2014-05-07 11:43:19","","1","","<p><code>col</code> is a list itself, so you'd <em>extend</em> <code>angles</code>:</p>

<pre><code>angles.extend(col)
angles.append(angle)
</code></pre>

<p>where <code>list.extend()</code> copies over the elements into the <code>angles</code> list, rather than add a single reference to the <code>col</code> list object.</p>

<p>If all you do is produce a new row with one value added, just re-use <code>col</code> and append to it directly:</p>

<pre><code>col.append(angle)
</code></pre>

<p>and write that to your output CSV file.</p>

<p><code>col</code> is misnamed, really, I'd call it <code>row</code> instead.</p>
","100297","","100297","","2014-05-07 11:50:09","2014-05-07 11:50:09","","","","0","","",""
"23516935","2","","23516828","2014-05-07 11:45:50","","0","","<p>since <code>col</code> is <em>list</em> . u can just copy list items to angles and append it</p>

<pre><code>angles=col[:]
angles.append(angle)
</code></pre>
","1545322","","","","","2014-05-07 11:45:50","","","","0","","",""
"23519668","2","","23516828","2014-05-07 13:48:38","","1","","<p>This answer is too late as a solution has already been accepted, but the simplest way to solve the  problem is to write the newly-constructed row directly to the output csv file without creating an intermediate list.</p>

<p>You could write something like:</p>

<pre><code>import csv, math

with open(""mydata.csv"", ""rb"") as f,\
     open(""newdata.csv"", ""wb"") as g:
        vectors = csv.reader(f, delimiter="";"")
        writer = csv.writer(g, delimiter="";"")
        for row in vectors:
            # use destructuring
            x, y, dX, dY, magnitude = map(float, row)

            if dX &gt; 0 and dY &gt; 0:
            #&lt;snip&gt;

            # at this stage you can write directly to the output
            # file.
            writer.writerow([x, y, dX, dY, magnitude, angle])
</code></pre>
","1669684","","","","","2014-05-07 13:48:38","","","","3","","",""
"23518410","2","","23516914","2014-05-07 12:53:48","","0","","<p>Why not use try-catch block? Something like</p>

<p><code>try:
    some_var = A/D
except ZeroDivisionError:
    some_var = 0</code></p>
","1395875","","","","","2014-05-07 12:53:48","","","","0","","",""
"23519204","2","","23516914","2014-05-07 13:27:45","","1","","<p>You could use a masked array for <code>D</code>, like:</p>

<pre><code>D = np.ma.array(D, mask=(D==0))
</code></pre>

<p>and when you perform the calculations with the masked array only the non-masked values will be considered.</p>
","832621","","832621","","2014-08-10 12:20:29","2014-08-10 12:20:29","","","","3","","",""
"23518157","2","","23518088","2014-05-07 12:41:51","","12","","<p><a href=""https://docs.python.org/2/library/stdtypes.html#str.strip""><code>str.strip</code></a> does what you want:</p>

<pre><code>&gt;&gt;&gt; 'potato'.strip('o')
'potat'
</code></pre>

<p>There are also <code>str.lstrip</code> and <code>str.rstrip</code> if you only want to take off the left or right, respectively.  </p>
","674039","","","","","2014-05-07 12:41:51","","","","3","","",""
"23608516","2","","23521273","2014-05-12 12:03:49","","1","","<p>everything was ok just needed to add a 'public' to the beginning of class A:</p>

<pre><code>    public class A
    {       
        public A()       
        {
            super();
        }
        public String sayHi()

        {
            return(""Hello"");
        }
</code></pre>
","3612673","","","","","2014-05-12 12:03:49","","","","0","","",""
"23521467","2","","23521345","2014-05-07 15:04:05","","12","","<p>Specify the <strong>branch</strong>, <strong>commit hash</strong>, or <strong>tag name</strong> after an <code>@</code> at the end of the url:</p>

<pre><code>pip install git+https://github.com/django/django.git@1.7b3
</code></pre>

<p>This will install the <a href=""https://github.com/django/django/releases/tag/1.7b3"" rel=""noreferrer"">version tagged with <code>1.7b3</code></a>.</p>

<p>Reference: <a href=""https://pip.pypa.io/en/latest/reference/pip_install.html#git"" rel=""noreferrer"">https://pip.pypa.io/en/latest/reference/pip_install.html#git</a></p>
","576932","","576932","","2014-05-07 18:38:20","2014-05-07 18:38:20","","","","1","","",""
"23521424","2","","23521361","2014-05-07 15:02:12","","4","","<p>It's not really a bytes representation, it's still unicode codepoints. They are the wrong codepoints, because it was decoded from bytes as if it was encoded to Latin-1.</p>

<p>Encode to Latin 1 (whose codepoints map one-on-one to bytes), then decode as GBK:</p>

<pre><code>a.encode('latin1').decode('gbk')
</code></pre>

<p>Demo:</p>

<pre><code>&gt;&gt;&gt; a = u'\xcb\xea'
&gt;&gt;&gt; a.encode('latin1').decode('gbk')
u'\u5c81'
&gt;&gt;&gt; print a.encode('latin1').decode('gbk')
Â≤Å
</code></pre>
","100297","","","","","2014-05-07 15:02:12","","","","1","","",""
"35158283","2","","23521361","2016-02-02 16:08:28","","0","","<p>The simpliest way for python2 is to use the <code>repr()</code>:</p>

<pre><code>&gt;&gt;&gt; key_unicode = u'uuuu\xf6\x9f_\xa1\x05\xeb9\xd4\xa3\xd1'
&gt;&gt;&gt; key_ascii = 'uuuu\xf6\x9f_\xa1\x05\xeb9\xd4\xa3\xd1'
&gt;&gt;&gt; print(key_ascii)
uuuuÔøΩÔøΩ_ÔøΩÔøΩ9‘£ÔøΩ
&gt;&gt;&gt; print(key_unicode)
uuuu√∂_¬°√´9√î¬£√ë
&gt;&gt;&gt;
&gt;&gt;&gt; # here is the save method for both string types:
&gt;&gt;&gt; print(repr(key_ascii).lstrip('u')[1:-1])
uuuu\xf6\x9f_\xa1\x05\xeb9\xd4\xa3\xd1
&gt;&gt;&gt; print(repr(key_unicode).lstrip('u')[1:-1])
uuuu\xf6\x9f_\xa1\x05\xeb9\xd4\xa3\xd1
&gt;&gt;&gt; # ____________WARNING!______________
&gt;&gt;&gt; # if you will use jsut `str.strip('u\'\""')`, you will lose
&gt;&gt;&gt; # the ""uuuu"" (and quotes, if such are present) on sides of the string:
&gt;&gt;&gt; print(repr(key_unicode).strip('u\'\""'))
\xf6\x9f_\xa1\x05\xeb9\xd4\xa3\xd1
</code></pre>

<p>For python3 use <code>str.encode()</code> to get the bytes type.</p>

<pre><code>&gt;&gt;&gt; key = 'l\xf6\x9f_\xa1\x05\xeb9\xd4\xa3\xd1q\xf5L\xa9\xdd0\x90\x8b\xf5ht\x86za\x0e\x1b\xed\xb6(\xaa+'
&gt;&gt;&gt; key
'l√∂\x9f_¬°\x05√´9√î¬£√ëq√µL¬©√ù0\x90\x8b√µht\x86za\x0e\x1b√≠¬∂(¬™+'
&gt;&gt;&gt; print(key)
l√∂_¬°√´9√î¬£√ëq√µL¬©√ù0√µhtza√≠¬∂(¬™+
&gt;&gt;&gt; print(repr(key.encode()).lstrip('b')[1:-1])
l\xc3\xb6\xc2\x9f_\xc2\xa1\x05\xc3\xab9\xc3\x94\xc2\xa3\xc3\x91
</code></pre>
","4750720","","4750720","","2016-02-02 16:23:37","2016-02-02 16:23:37","","","","0","","",""
"23737310","2","","23521463","2014-05-19 12:05:36","","8","","<p>It looks like you are using PyMC2, and as far as I know, you must use some Python approach to parallel computation, like <a href=""http://ipython.org/ipython-doc/dev/parallel/"">IPython.parallel</a>.  There are many ways to do this, but all the ones I know are a little bit complicated.  Here is <a href=""http://continuum.io/blog/bayesian-estimation-hoops"">an example of one, which uses PyMC2, IPCluster, and Wakari</a>.</p>

<p>In PyMC3, parallel sampling is implemented in the <code>psample</code> method, but your reference code will need to be updated to the PyMC3 format:</p>

<pre><code>with pm.Model() as model:
    beta1 = pm.Laplace('beta1', mu=0, b=b)
    beta2 = pm.Laplace('beta2', mu=0, b=b)
    beta3 = pm.Laplace('beta3', mu=0, b=b)

    y_hat = beta1 * x1 + beta2 * x2 + beta3 * x3
    y_obs = pm.Normal('y_obs', mu=y_hat, tau=1.0, observed=y)

    trace = pm.psample(draws=20000, step=pm.Slice(), threads=3)
</code></pre>
","1935494","","","","","2014-05-19 12:05:36","","","","0","","",""
"26410417","2","","23521463","2014-10-16 17:28:19","","7","","<p>PYMC3 has merged the <strong>psample</strong> into <strong>sample</strong>.</p>

<p>To run in parallel set the parameter <code>njobs &gt; 1</code>.</p>

<p>The usage for the pymc.sample function is:</p>

<p><code>sample(draws, step, start=None, trace=None, chain=0, njobs=1, tune=None,
           progressbar=True, model=None, random_seed=None)
</code>
Note if you set <code>njobs=None</code>, it will default to Number of CPUs - 2.</p>

<p>I hope this helps.</p>
","2988073","","","","","2014-10-16 17:28:19","","","","0","","",""
"23522030","2","","23521511","2014-05-07 15:28:42","","8","","<p>No need to initialize an empty DataFrame (you weren't even doing that, you'd need <code>pd.DataFrame()</code> with the parens). Instead make a list of Series and concat those together with <code>df = pd.concat(series, axis=1)</code></p>

<p>Something like:</p>

<pre><code>series = [pd.Series(mat[name][:, 1]) for name in Variables]
df = pd.concat(series, axis=1)
</code></pre>
","1889400","","","","","2014-05-07 15:28:42","","","","2","","",""
"23531250","2","","23521511","2014-05-08 01:34:12","","2","","<p>I guess anther way, possibly faster, to achieve this is 
1) Use dict comprehension to get desired dict (i.e., taking 2nd col of each array)
2) Then use <code>pd.DataFrame</code> to create an instance directly from the dict without loop over each col and concat.</p>

<p>Assuming your <code>mat</code> looks like this (you can ignore this since your <code>mat</code> is loaded from file):</p>

<pre><code>In [135]: mat = {'a': np.random.randint(5, size=(4,2)),
   .....: 'b': np.random.randint(5, size=(4,2))}

In [136]: mat
Out[136]: 
{'a': array([[2, 0],
        [3, 4],
        [0, 1],
        [4, 2]]), 'b': array([[1, 0],
        [1, 1],
        [1, 0],
        [2, 1]])}
</code></pre>

<p>Then you can do:</p>

<pre><code>In [137]: df = pd.DataFrame ({name:mat[name][:,1] for name in mat})

In [138]: df
Out[138]: 
   a  b
0  0  0
1  4  1
2  1  0
3  2  1

[4 rows x 2 columns]
</code></pre>
","3599890","","","","","2014-05-08 01:34:12","","","","3","","",""
"31097813","2","","23521511","2015-06-28 08:57:34","","11","","<p>Here is how to create a DataFrame where <strong>each series is a row</strong>.</p>

<p>For a single Series (resulting in a single-row DataFrame):</p>

<pre><code>series = pd.Series([1,2], index=['a','b'])
df = pd.DataFrame([series])
</code></pre>

<p>For multiple series with identical indices:</p>

<pre><code>cols = ['a','b']
list_of_series = [pd.Series([1,2],index=cols), pd.Series([3,4],index=cols)]
df = pd.DataFrame(list_of_series, columns=cols)
</code></pre>

<p>For multiple series with possibly different indices:</p>

<pre><code>list_of_series = [pd.Series([1,2],index=['a','b']), pd.Series([3,4],index=['a','c'])]
df = pd.concat(list_of_series, axis=1).transpose()
</code></pre>

<p>To create a DataFrame where <strong>each series is a column</strong>, see the answers by others. Alternatively, one can create a  DataFrame where each series is a row, as above, and then use <code>df.transpose()</code>. However, the latter approach is inefficient if the columns have different data types.</p>
","188986","","188986","","2015-06-28 09:38:02","2015-06-28 09:38:02","","","","0","","",""
"23521763","2","","23521600","2014-05-07 15:17:17","","4","","<p>Simple. <code>__foo</code> contains 2 underscores in the beginning, so it's assumed to be class-private method and it's transformed into <code>_Classname__method</code>. </p>

<p>When you request access to the attribute named as such on <code>Bar</code> object it asks <code>Bar</code> class if it has this method (not <code>Foo</code> class), so <code>self.__foo</code> is always the same as <code>self._Bar__foo</code>.</p>

<p>From the <a href=""https://docs.python.org/3.3/reference/expressions.html#atom-identifiers"" rel=""nofollow"">documentation</a>:</p>

<blockquote>
  <p>When an identifier that textually occurs in a class definition begins
  with two or more underscore characters and does not end in two or more
  underscores, it is considered a private name of that class. Private
  names are transformed to a longer form before code is generated for
  them. The transformation inserts the class name, with leading
  underscores removed and a single underscore inserted, in front of the
  name. For example, the identifier __spam occurring in a class named
  Ham will be transformed to _Ham__spam.</p>
</blockquote>

<p>If you modify your code slightly</p>

<pre><code>class Foo:
    def __init__(self, foo):
        self.__foo = foo
        assert hasattr(self, '_Foo__foo'), 'Attribute has been just created'


class Bar(Foo):
    def bar(self):
        assert hasattr(self, '_Foo__foo'), 'No errors, thanks to inheritance'
</code></pre>

<p><code>assert</code> statements will not cause any <code>AssertionError</code>s.</p>

<p>Add <code>__getattribute__</code> method to <code>Bar</code> class to capture all requests to <code>Bar</code> objects:</p>

<pre><code>class Bar(Foo):

    def bar(self):
        print('Accessing __foo from bar')
        print(self.__foo)

    def __getattribute__(self, name):
        print('Requested', name)
        return super().__getattribute__(name)

b = Bar('foobar')
b.bar()
</code></pre>

<p>There will be 3 lines (apart from <code>AttributeError</code>) in the output:</p>

<pre><code>Requested bar
Accessing __foo from bar
Requested _Bar__foo # AttributeError follows
</code></pre>

<p>As you can see, if attribute you are requesting has 2 leading underscores, Python is renaming it on the fly.</p>
","2301450","","2301450","","2014-05-07 15:52:55","2014-05-07 15:52:55","","","","1","","",""
"23522628","2","","23521652","2014-05-07 15:55:20","","6","","<h1>Make sure, action point to proper url</h1>

<p>I think you render the form with wrong <code>action</code> for submitting the form.</p>

<p>Your version is using <code>action=""""</code> and I guess, it shall be <code>action=""/search""</code></p>

<p>So your template shall be changed like:</p>

<pre><code>{% extends ""hello.html"" %}
{% block content %}
&lt;div class=""search""&gt;
&lt;form action=""/search"" method=post&gt;
    &lt;input type=text name=search value=""{{ request.form.search}}""&gt;&lt;/br&gt;
    &lt;div class=""actions""&gt;&lt;input type=submit value=""Search""&gt;&lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;
{% for message in get_flashed_messages() %}
&lt;div class=flash&gt;
    {{ message }}
&lt;/div&gt;
{% endfor %}
{% endblock %}
</code></pre>

<h1>Do not redirect out of your result</h1>

<p>Your existing code is processing POST, but within first loop it ends up returning with <code>redirect</code></p>

<pre><code>@app.route('/search', methods=['GET', 'POST'])
def search():
    if request.method == ""POST"":
        db = MySQLdb.connect(user=""root"", passwd="""", db=""cs324"", host=""127.0.0.1"")
        c=db.cursor()
        c.executemany('''select * from student where name = %s''', request.form['search'])
        for r in c.fetchall():
            print r[0],r[1],r[2]
            return redirect(url_for('search')) # &lt;- Here you jump away from whatever result you create
    return render_template('search.html')
</code></pre>

<h1>Do render your template for final report</h1>

<p>Your code does not show in POST branch any attempt to render what you have found in the database.</p>

<p>Instead of <code>print r[0], r[1]...</code> you shall call <code>render_template()</code></p>

<p>Something like this</p>

<pre><code>@app.route('/search', methods=['GET', 'POST'])
def search():
    if request.method == ""POST"":
        db = MySQLdb.connect(user=""root"", passwd="""", db=""cs324"", host=""127.0.0.1"")
        c=db.cursor()
        c.executemany('''select * from student where name = %s''', request.form['search'])
        return render_template(""results.html"", records=c.fetchall())
    return render_template('search.html')
</code></pre>
","346478","","346478","","2014-05-07 17:24:14","2014-05-07 17:24:14","","","","5","","",""
"23521890","2","","23521847","2014-05-07 15:22:28","","2","","<p>The error message in the question does not come from the subprocess. It was generated before the subprocess execution. You cannot capture that error using <code>stderr</code> option.</p>

<p>Make sure there's <code>ding</code> program in the path.</p>
","2225682","","","","","2014-05-07 15:22:28","","","","0","","",""
"23522754","2","","23522570","2014-05-07 16:01:40","","0","","<pre><code>    #initGUIStuff
    ....
    self.resize_btn.Bind(wx.EVT_BUTTON,self.OnResize)

 def OnResize(self,evt):
    resize(self.resize_txt.GetValue(),self.file_input.GetPath(),self.outfile_input.GetPath())
</code></pre>

<p>maybe? </p>

<p>not sure what you are asking to be honest ...</p>
","541038","","","","","2014-05-07 16:01:40","","","","0","","",""
"23523042","2","","23522570","2014-05-07 16:15:24","","0","","<p>To answer this specific question:</p>

<blockquote>
  <p>How do I take object-based inputs and turn them into passable
  variables?</p>
</blockquote>

<p>You access the controls and call the appropriate methods:</p>

<pre><code>self.resize_txt.GetValue()
self.file_input.GetPath()
self.outfile_input.GetPath()
</code></pre>

<p>To pass them to your resize, function, just pass those values to your resize_file function.</p>

<pre><code>resize_file(self.file_input.GetPath(),
            self.outfile_input.GetPath())
</code></pre>

<p>You're asking too many questions here TBH.  You should start with one, and create others as you progress.</p>

<p>What the heck, I have time to kill before lunch!  I'll give you a few pointers.</p>

<p>Let's look at this function:</p>

<pre><code>def resize_file(filename, filename2 = None)
</code></pre>

<p>Looking at this function, I really have no idea what the inputs are to the function.  It says filename and an optional filename2.  Which of these is being resized?  How do I know what each parameter does?  You did not document this function, which made me dig off into your code to try to determine what it does.</p>

<p>So, I dug off into your code...  And it appears that this particular function resizes and possibly appends pdfs.  Notice how in your code, you execute the same code twice?</p>

<pre><code>fIn1 = file(os.path.join(inputDir,filename), 'rb')

inp1 = PdfFileReader(fIn1)
p1 = inp1.getPage(0)
p1.scale(.5,.5)
output.addPage(p1)

if filename2 is not None:
    fIn2 = file(os.path.join(inputDir,filename2), 'rb')
    inp2 = PdfFileReader(fIn2)
    p2 = inp2.getPage(0)
    p2.scale(.50,.50)
    output.addPage(p2)
</code></pre>

<p>Don't do this.  Use the <a href=""http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"" rel=""nofollow"">DRY</a> principle.  You should have a loop, as the algorithm is basically the same.  (Can't illustrate the loop atm, running out of time before lunch, maybe when I get back :P)</p>

<p>You could even get fancy and have your function take an indefinite amount of PDF files.  Check this snippet out:</p>

<pre><code>def resize_file(*args):
    output = PdfFileWriter()

    for filename in args:
        fIn1 = file(os.path.join(inputDir, filename), 'rb')
        inp1 = PdfFileReader(fIn1)
        p1 = inp1.getPage(0)
        p1.scale(.5,.5)
        output.addPage(p1)

    outputStream = file(os.path.join(validateDir,str(fileout) + '.pdf'),""wb"")
    output.write(outputStream)
    outputStream.close()
</code></pre>

<p>Ok, I lied, I tried to squeeze this in before lunch.  The code above may not work out of the box, but it should point you in the general direction.  You should add error catching to check for when no arguments are passed (among other things).</p>

<p>Hope it helps!</p>
","731624","","731624","","2014-05-07 16:31:39","2014-05-07 16:31:39","","","","0","","",""
"23522800","2","","23522728","2014-05-07 16:03:58","","1","","<p>you have a file named <code>turtle.py</code> in the same folder ... you should not name files the same as libraries ... you are importing from your local turtle.py file</p>

<p>rename <code>turtle.py</code> (in this same folder) to <code>myturtle.py</code> and it should be fine</p>
","541038","","","","","2014-05-07 16:03:58","","","","2","","",""
"23523021","2","","23522781","2014-05-07 16:14:52","","0","","<p>Here is a hint.</p>

<p>Given a list of lists:</p>

<pre><code>&gt;&gt;&gt; LoL=[[1,2,3],[4,5,6],[7,8,9]]
</code></pre>

<p>You can get the sum of the individual sub lists with a list comprehension:</p>

<pre><code>&gt;&gt;&gt; [sum(li) for li in LoL]
[6, 15, 24]
</code></pre>

<p>You can then get the minimum with <code>min</code>:</p>

<pre><code>&gt;&gt;&gt; min(sum(li) for li in LoL)
6
</code></pre>

<p>You can get the index of the list this way:</p>

<pre><code>&gt;&gt;&gt; min([(i,sum(li)) for i, li in enumerate(LoL)], key=lambda t: t[1])
(0, 6)
</code></pre>

<p>That is 90% of what you need to solve your issue.</p>
","298607","","","","","2014-05-07 16:14:52","","","","1","","",""
"23523061","2","","23522781","2014-05-07 16:16:23","","1","","<pre><code>from itertools import permutations

data = [
    [98, 96, 93, 88, 86],
    [76, 75, 70, 68, 64],
    [64, 64, 66, 60, 59],
    [56, 55, 62, 58, 57],
    [50, 56, 53, 48, 49]
]

def item_sum(cols):
    return sum(row[col] for row,col in zip(data,cols))

best_cols = min(permutations(range(5)), key=item_sum)
total = item_sum(best_cols)
</code></pre>

<p>which gives</p>

<pre><code>best_cols  =&gt;  (4, 3, 2, 1, 0)  =&gt;  [86, 68, 66, 55, 50]
total =&gt; 321
</code></pre>
","33258","","","","","2014-05-07 16:16:23","","","","1","","",""
"23526340","2","","23526204","2014-05-07 19:14:09","","0","","<pre><code>SELECT * FROM attachments WHERE post_id in (SELECT id FROM posts WHERE topic_id = ?);
</code></pre>

<p>Something like this?</p>

<p>Edit:
Not what the poster wanted after all. I don't think it is possible to do what you want with your table structure, without using more than one query.</p>
","984705","","984705","","2014-05-07 19:24:17","2014-05-07 19:24:17","","","","6","","",""
"23526331","2","","23526265","2014-05-07 19:13:26","","2","","<p>Another easy job for ndarrays:</p>

<pre><code>&gt;&gt;&gt; from numpy import array
&gt;&gt;&gt; list1, list2 = [[1,2],[3,4]], [[5,6],[7,8]]
&gt;&gt;&gt; (array(list1) + array(list2)).tolist()
[[6, 8], [10, 12]]
</code></pre>
","674039","","","","","2014-05-07 19:13:26","","","","0","","",""
"23526489","2","","23526265","2014-05-07 19:21:18","","0","","<p>onliner trivial recursive lambda:</p>

<pre><code>sum_mtx = lambda (x, y): x+y if not isinstance(x, list) else map(sum_mtx, zip(x,y))
sum_mtx(([[1, 2], [3, 4]] ,[[5, 6], [7, 8]]))
# [[6, 8], [10, 12]]
</code></pre>
","671543","","","","","2014-05-07 19:21:18","","","","0","","",""
"23889696","2","","23526280","2014-05-27 12:40:14","","1","","<p>If you have installed pylint into your virtualenv, editing the project-file like this should fix it</p>

<pre><code>""settings"":
    {
        ""pylinter"":
        {
             ""python_bin"": ""path/to/your/virtualenv""
        }
    }
</code></pre>

<p>See: <a href=""https://github.com/biermeester/Pylinter#project-settings"" rel=""nofollow"">https://github.com/biermeester/Pylinter#project-settings</a> and 
<a href=""https://github.com/biermeester/Pylinter/issues/4"" rel=""nofollow"">https://github.com/biermeester/Pylinter/issues/4</a></p>
","2926113","","","","","2014-05-27 12:40:14","","","","0","","",""
"23526483","2","","23526308","2014-05-07 19:21:07","","4","","<p>When you do</p>

<pre><code>@helloWorld
def hello():
    return 2
</code></pre>

<p>Python does</p>

<pre><code>def hello():
    return 2
hello = helloWorld(hello)
</code></pre>

<p>So hello will contain whatever helloWorld returns, in your first case you didn't return anything (which is the same as returning <code>None</code>). That's why calling <code>hello()</code> would give the error 'NoneType' object is not callable.</p>
","3557327","","","","","2014-05-07 19:21:07","","","","1","","",""
"23543166","2","","23526309","2014-05-08 13:28:23","","0","","<p>Shutil.copy/unicode wasn't the problem here; tyring to copy a non-existent file was.</p>
","3613556","","","","","2014-05-08 13:28:23","","","","0","","",""
"24347824","2","","23526309","2014-06-22 03:14:40","","0","","<p>As a form of file management validation, you should always check to see whether or not the directory exists.  You can do this using the os.path.exists(path) method. If your path exists, you should have no problem. If not, then create it before copying your files over.</p>

<p>See example code below:</p>

<pre><code>if not os.path.exists(dst):
    os.mkdir(dst)

shutil.copy(src, dst)
</code></pre>
","3692799","","","","","2014-06-22 03:14:40","","","","0","","",""
"23526434","2","","23526384","2014-05-07 19:19:12","","2","","<p>Python bytecode is portable across platforms, but not really across Python versions.</p>

<p>Python 2.7 introduced new syntax, for example, resulting in different, new bytecode instructions that Python 2.6 doesn't support. Also see the warning at the top of the <a href=""https://docs.python.org/2/library/dis.html"" rel=""nofollow""><code>dis</code> module documentation</a>:</p>

<blockquote>
  <p><strong>CPython implementation detail</strong>: Bytecode is an implementation detail of the CPython interpreter! No guarantees are made that bytecode will not be added, removed, or changed between versions of Python. Use of this module should not be considered to work across Python VMs or Python releases.</p>
</blockquote>

<p>You can move <code>.pyc</code> bytecode cache files across platforms, regardless of word-size and OS.</p>
","100297","","100297","","2014-05-07 19:29:35","2014-05-07 19:29:35","","","","0","","",""
"23526513","2","","23526390","2014-05-07 19:22:40","","2","","<p>Checkout <a href=""http://supervisord.org/"" rel=""nofollow"">supervisord</a>.  I use it regularly to launch, monitor all types of things.</p>

<p>Here is how I set it up to launch a wsgi app on my server:</p>

<pre><code>[program:quizzes]
directory = /var/www/quizzes.seasources.net
command = /home/jaime/code/virtualenv/quizzes/bin/uwsgi uwsgi.ini
process_name = quizzes
autostart = true
startsecs = 5
user = www-data
redirect_stderr = true
stdout_logfile = /var/www/quizzes.seasources.net/logs/supervisor-console.log
environment = PYTHON_EGG_CACHE=/tmp/python-eggs
</code></pre>

<p>The configuration file format is easy to understand and it even logs stdout/stderr to a file.  Above it's /var/www/quizzes.seasources.net/logs/supervisor-console.log  You can read more about configuration <a href=""http://supervisord.org/configuration.html"" rel=""nofollow"">here</a>.</p>
","731624","","731624","","2014-05-07 20:18:47","2014-05-07 20:18:47","","","","2","","",""
"23526564","2","","23526390","2014-05-07 19:25:05","","2","","<p>You could use a supervisor. A well known one that's written in Python would be <a href=""http://supervisord.org/"" rel=""nofollow"">supervisord</a>, a more recent one also in Python would be <a href=""https://circus.readthedocs.org/"" rel=""nofollow"">Circus</a>, and then there are Monit or daemontools and probably many more.</p>
","487598","","","","","2014-05-07 19:25:05","","","","0","","",""
"23526956","2","","23526390","2014-05-07 19:45:46","","0","","<p>If you are looking for something more simple, you can use the subprocess module (python default) to start and check your processes...
A basic version would look like this:</p>

<pre><code># run.py

import subprocess, time

# add your listener processor call here
_PROCESS_ARGS = ['python','/path/to/listener.py']
_PROCESS_TOTAL = 10

process_list = []

# start the processes...
for i in range(_PROCESS_TOTAL):     
    process_list.append(subprocess.Popen(_PROCESS_ARGS))

while True:     
    for i in range(_PROCESS_TOTAL):         
        p = process_list[i]         
            if p.poll() != None: # check if process is running                      
                process_list[i] = subprocess.Popen(_PROCESS_ARGS) # if not, replace with new one
    time.sleep(1) # check only every second...
</code></pre>
","940947","","","","","2014-05-07 19:45:46","","","","0","","",""
"23527361","2","","23526410","2014-05-07 20:06:25","","2","","<p>I don't have any python interpreter here, but it should be something similar to this:</p>

<pre><code>import re


def url_match(tweet):
    match = re.match(r'RT\s@....+', tweet)
    if match:
        return ""RT""
    else:
        match = re.match(r'@....+', tweet)
        if match:
           return ""mention""
        else
           return ""tweet""
</code></pre>

<p><strong>Note:</strong> this will work for this classification, but if <strong>you want to retrieve usernames</strong> i.e. @USERNAME you will have to tweak this a little more.</p>
","2188186","","","","","2014-05-07 20:06:25","","","","1","","",""
"23526548","2","","23526486","2014-05-07 19:24:21","","1","","<pre><code>&gt;&gt;&gt; ""abcd%W""%(123)
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
ValueError: unsupported format character 'W' (0x57) at index 5
</code></pre>

<p>Could something like this work for you instead? </p>

<pre><code>&gt;&gt;&gt; ""abcd%W"".replace('%W', str(123))
'abcd123'
</code></pre>
","674039","","","","","2014-05-07 19:24:21","","","","0","","",""
"23790729","2","","23527435","2014-05-21 18:07:55","","1","","<p>As <code>@Mikko Ohtamaa</code> mentioned, the issue where was that the project root directory contained an <code>__init__.py</code></p>
","1025963","","","","","2014-05-21 18:07:55","","","","0","","",""
"23527794","2","","23527600","2014-05-07 20:31:05","","2","","<p>Your first for-loop:</p>

<pre><code>for i in range(len(pattern1)):
    df.loc[df.IDnumber.str.contains(pattern1[i]) &amp; (df.TAG == ''),'TAG'] = group[1]
</code></pre>

<p>can be replaced with</p>

<pre><code>empty = (df.TAG == '')
mask = df.IDnumber.str.contains('|'.join(pattern1)) &amp; empty
df.loc[mask, 'TAG'] = group[1]
</code></pre>

<p>This might be faster, since the entire loop is being replaced with one regex pattern. A similar refactoring can be done for your second and last <code>for-loops</code>.</p>

<p>But your third and fourth <code>for-loops</code> perplex me: <code>for i in range(len(pattern2-2)):</code>. Python names can not contain hyphens. So what does <code>pattern2-2</code> mean? If <code>pattern2-2</code> is just another array of strings (albeit with an invalid variable name!?) then your third and fourth loops can be handled the same as shown above.</p>

<hr>

<p>If all the patterns are simply arrays of strings, then you could refactor all the for-loops with something like</p>

<pre><code>import itertools as IT
patterns = [pattern1, pattern2, pattern3, pattern4, pattern5]
empty = (df.TAG == '')
for pattern, grp in IT.izip(patterns, group):
    mask = df.IDnumber.str.contains('|'.join(pattern)) &amp; empty
    df.loc[mask, 'TAG'] = grp
</code></pre>

<p>Note that whenever you have numbered variable names, such as <code>pattern1</code>, <code>pattern2</code>, etc. it is usually a sign that theses variables should be replaced by a single variable which is a list or tuple, such as <code>patterns</code> above. Then instead of referencing <code>pattern1</code>, you'd simply use <code>patterns[0]</code>.</p>
","190597","","190597","","2014-05-07 20:46:07","2014-05-07 20:46:07","","","","3","","",""
"23529277","2","","23527680","2014-05-07 22:01:28","","2","","<p>You might want to use <a href=""http://pyserial.sourceforge.net/"" rel=""nofollow"">pyserial</a>, which  uses the kernel interfaces (I don't know what PyBBIO does). It provides automatic input buffering - so you don't need an extra process. If you do want to have more processes use <a href=""https://docs.python.org/2/library/multiprocessing.html"" rel=""nofollow"">multiprocessing</a>. A simpler alternative is <a href=""https://docs.python.org/2/library/threading.html"" rel=""nofollow"">threading</a>, which saves you the communication part. For multiprocessing with network support use <a href=""http://ipython.org/ipython-doc/stable/parallel/index.html"" rel=""nofollow"">Ipython's cluster</a></p>
","1879010","","","","","2014-05-07 22:01:28","","","","1","","",""
"23528726","2","","23527738","2014-05-07 21:24:40","","1","","<p>An option is <code>np.einsum</code></p>

<pre><code>import numpy as np
output = np.einsum(""ijk, ij -&gt; ik"", A, B)
</code></pre>

<p>This results in a (L, N) sized array containing matrix products of all the <code>A[i].T.dot(B[i])</code></p>
","3489247","","","","","2014-05-07 21:24:40","","","","3","","",""
"23531862","2","","23531496","2014-05-08 02:43:25","","0","","<p>It depends on how big your file is, but it isn't too big something like this would probably work, using a dictionary to split the data into their respective runs:</p>

<pre><code>data = {}
with open(""Subject25.txt"", 'r') as input:
    for aline in input:
        values = aline.split()
        if values[3] not in data.keys():
            data[values[3]] = aline + ""\n""
        else:
            data[values[3]] += aline + ""\n""
for key, values in data.iteritems():
    with open('%s.txt'%key, 'w') as output:
        output.write(values)
</code></pre>

<p>Your code is failing because it doesn't do anything to verify that the line belongs in the file. It should work if you add something like </p>

<pre><code>if values[3] == value_for_file:
    output.write('{:10}{:10}\n'.format(values[3]))
</code></pre>

<p>The disadvantage of doing that is that you are reading the input file 40x times.</p>
","1858097","","1858097","","2014-05-08 02:50:33","2014-05-08 02:50:33","","","","1","","",""
"23545561","2","","23531496","2014-05-08 15:03:48","","0","","<p>Hi All,
                 With help from a friend I figured out why I was striking out with my earlier bit of code. As @wils484 pointed out, a conditional would have solved the problem (and I tried it even before posting on here, but in vain) but the key to getting it to work was realising that values[1] came out a string and needed to be converted to an integer before it could be used to loop through;
so the bit of code that helped solve the problem is:</p>

<pre><code>    if int(values[1]) == i:
       output.write(values[3]+ "" "")
</code></pre>

<p>So that resolved my issue and the code spewed separate files with the pertinent data.</p>
","3591148","","","","","2014-05-08 15:03:48","","","","0","","",""
"23557258","2","","23531555","2014-05-09 05:32:58","","0","","<p>Reads like a bug, please consider reporting it at emacs-orgmode@gnu.org</p>

<p>As a workaround try setting the virtualenv at the Python-side, i.e. give <code>PYTHONPATH</code> as argument.</p>

<p>Alternatively, mark the source-block as region and execute it the common way, surpassing org</p>
","1546473","","1546473","","2014-05-09 10:30:47","2014-05-09 10:30:47","","","","0","","",""
"23532032","2","","23531807","2014-05-08 03:05:58","","1","","<p>When you run</p>

<pre><code>    result = result.replace('Y', 'FX-Y')
    result = result.replace('X', 'X+YF')
</code></pre>

<p>the second line replaces the <code>X</code>s introduced by the first line. (Also, you're using the wrong replacement rules, but you seem to have noticed that already.)</p>

<p>You need to carry out these replacements in such a way that they don't interact with each other, probably by doing them in a combined step. One way to do this would be to use the more advanced substitution capabilities of the <code>re</code> module. Another would be to write your own replacement routine. You could also use a character other than <code>X</code> in the first replacement, so the second replacement doesn't pick it up, then replace that character with <code>X</code> in a third pass.</p>
","2357112","","2357112","","2014-05-08 04:17:28","2014-05-08 04:17:28","","","","0","","",""
"23531842","2","","23531812","2014-05-08 02:41:10","","3","","<p><code>f.read()</code> is a giant string containing all the file's contents. It is not some sort of structured data format; in particular, <code>for row in l</code> iterates over raw characters rather than rows of useful data.</p>

<p>If you want something more useful, the <code>csv</code> module might help, or perhaps something like <code>numpy.loadtxt</code>, depending on the format the file actually contains.</p>
","2357112","","","","","2014-05-08 02:41:10","","","","5","","",""
"23554166","2","","23531825","2014-05-08 23:15:39","","2","","<p>I ended up restructuring my project so that the docs directory is at the same level as my project directory that contains all the files. This works when I use <code>sys.path.insert(0, os.path.abspath(""../""))</code>, and it's probably a bit nicer to look at.</p>

<pre><code>project
    | docs/
    | project/
        | project files, etc.
    | tests/
</code></pre>
","2658917","","","","","2014-05-08 23:15:39","","","","1","","",""
"32396276","2","","23531825","2015-09-04 10:50:59","","0","","<p>Iam a bit late for the party here is my solution:</p>

<p>You have to go 2 directorys up:</p>

<pre><code>sys.path.insert(0, os.path.abspath('../..'))
</code></pre>
","3863636","","","","","2015-09-04 10:50:59","","","","0","","",""
"32658000","2","","23531825","2015-09-18 17:41:21","","0","","<p>It won't work on python3.x afaik.</p>

<p>Sphinx is not very <code>python3</code> compatible, running <code>__import__(module_name)</code> <strong>AND</strong> <code>importlib.import_module(module_name)</code> both work in my interpreter, but not in sphinx.</p>

<p>I tried checking out the master branch of sphinx, changed my interpreter to python3.4 and got errors on modules that were removed in the 3.x series. You can see my issue report here:</p>

<p><a href=""https://github.com/sphinx-doc/sphinx/issues/2046"" rel=""nofollow"">https://github.com/sphinx-doc/sphinx/issues/2046</a></p>
","1703772","","","","","2015-09-18 17:41:21","","","","1","","",""
"24005429","2","","23993681","2014-06-03 00:36:24","","0","","<p>The logging in your case was triggered by str(e).
Issue was fixed in <a href=""https://code.google.com/p/appengine-gcs-client/source/detail?r=172"" rel=""nofollow"">https://code.google.com/p/appengine-gcs-client/source/detail?r=172</a></p>
","3277582","","","","","2014-06-03 00:36:24","","","","2","","",""
"25048696","2","","24982969","2014-07-30 23:36:21","","0","","<p>You can either use PyUSB (python-usb package in Ubuntu and Debian), or walk through /sys/bus/usb/devices yourself, all the info is there in plain text.</p>
","1162952","","","","","2014-07-30 23:36:21","","","","1","","",""
"24983057","2","","24982993","2014-07-27 16:36:06","","1","","<p>One thing you could try is to try to get the next line, and catch the exception if it arises, because AFAIK python iterators don't have inbuilt hasNext method.</p>
","3551365","","","","","2014-07-27 16:36:06","","","","0","","",""
"24983104","2","","24982993","2014-07-27 16:41:43","","3","","<pre><code>secondLastLine = None
lastLine = None
with open(""myfile.txt"") as infile:
    secondLastLine, lastLine = infile.readline(), infile.readline()
    for line in infile:
        # do stuff
        secondLastLine = lastLine
        lastLine = line

# do stuff with secondLastLine
</code></pre>
","198633","","","","","2014-07-27 16:41:43","","","","1","","",""
"24983191","2","","24982993","2014-07-27 16:49:40","","2","","<p>You could use the <a href=""https://docs.python.org/2/library/itertools.html#recipes"" rel=""nofollow"">itertools pairwise recipe</a>;</p>

<pre><code>with open('myfile.txt') as infile:
    a,b = itertools.tee(infile)
    next(b, None)
    pairs = zip(a,b)
    lastPair = None
    for lastPair in pairs:
        pass
secondLastLine = lastPair[0]
# do stuff with secondLastLine
</code></pre>
","198633","","","","","2014-07-27 16:49:40","","","","0","","",""
"24983342","2","","24982993","2014-07-27 17:04:02","","4","","<p>Check if line <code>is</code> the last line:</p>

<pre><code>with open(""in.txt"") as f:
    lines = f.readlines()
    last = lines[-1]
    for line in lines:
        if line is last:
            print id(line),id(last)
            # do work on lst line
        else:
            # work on other lines
</code></pre>

<p>If you want the second last line use <code>last = lines[-2]</code></p>

<p>Or simply:</p>

<pre><code>with open(""in.txt"") as f:
    lines = f.readlines()
    last = lines[-1]
    for line in lines[:-1]:
        # work on all but last line
    # work on last
</code></pre>
","2141635","","2141635","","2014-07-27 18:42:27","2014-07-27 18:42:27","","","","3","","",""
"28203006","2","","24982993","2015-01-28 21:45:44","","4","","<pre><code>import os
path = 'myfile.txt'
size = os.path.getsize(path)
with open(path) as f:
    for line in f:
        size -= len(line)
        if not size:
            print('this is the last line')
            print(line)
</code></pre>
","778533","","778533","","2015-01-28 22:34:08","2015-01-28 22:34:08","","","","0","","",""
"31364280","2","","31239302","2015-07-12 04:09:21","","1","","<p>I had the same problem and tracked it down to a combination of <code>CONN_MAX_AGE</code> and <code>CELERYD_MAX_TASKS_PER_CHILD</code>. At that point it became obvious that it must be something to do with Celery not closing connections properly when a worker is replaced and from that I found this bug report: <a href=""https://github.com/celery/celery/issues/2453"" rel=""nofollow"">https://github.com/celery/celery/issues/2453</a></p>

<p>Upgrading to Celery 3.1.18 seems to have solved the issue for me.</p>
","176323","","","","","2015-07-12 04:09:21","","","","2","","",""
"31240807","2","","31239322","2015-07-06 08:16:11","","0","","<p>What you're looking for is spelled: <code>if isinstance(handler, StreamHandler):</code> - but I'd really like to know <strong>why</strong> you want to do such a thing instead of using the sensible solution (ie not configuring a StreamHandler for your logger at all...). </p>
","41316","","","","","2015-07-06 08:16:11","","","","4","","",""
"31239445","2","","31239329","2015-07-06 06:56:15","","0","","<p>What about something like,</p>

<pre><code>import csv

with open(""file.csv"", 'rb') as f:
    sl = []
    csvread = csv.reader(f, delimiter=' ')
    for line in csvread:
        sl.append(line.replace(""C:/Abc/Def/Test/temp\.\test\GLNext\"", """"))
</code></pre>

<p>To write the list <code>sl</code> out to <code>filenew</code> use,</p>

<pre><code>with open('filenew.csv', 'wb') as f:
    csvwrite = csv.writer(f, delimiter=' ')
    for line in sl:
        csvwrite.writerow(line)
</code></pre>
","4680533","","4680533","","2015-07-06 07:14:34","2015-07-06 07:14:34","","","","2","","",""
"31239470","2","","31239329","2015-07-06 06:57:45","","0","","<pre><code>^\S+/
</code></pre>

<p>You can simply use this regex over each line and replace by <code>empty string</code>.See demo.</p>

<p><a href=""https://regex101.com/r/cK4iV0/17"" rel=""nofollow"">https://regex101.com/r/cK4iV0/17</a></p>

<pre><code>import re
p = re.compile(ur'^\S+/', re.MULTILINE)
test_str = u""C:/Abc/Def/Test/temp/test/GLNext/FILE0.frag                   0   0   0\nC:/Abc/Def/Test/temp/test/GLNext/FILE0.vert                   0   0   0\nC:/Abc/Def/Test/temp/test/GLNext/FILE0.link-link-0.frag       16  24  3\nC:/Abc/Def/Test/temp/test/GLNext/FILE0.link-link-0.vert       87  116 69\nC:/Abc/Def/Test/temp/test/GLNext/FILE0.link-link-0.vert.bin   75  95  61\nC:/Abc/Def/Test/temp/test/GLNext/FILE0.link-link-0            0   0\nC:/Abc/Def/Test/temp/test/GLNext/FILE0.link-link-6            0   0   0 ""
subst = u"" ""

result = re.sub(p, subst, test_str)
</code></pre>
","3679490","","","","","2015-07-06 06:57:45","","","","0","","",""
"31239586","2","","31239329","2015-07-06 07:05:20","","0","","<p>You can automatically detect the common prefix without the need to hardcode it. You don't really need <code>regex</code> for this. <code>os.path.commonprefix</code> can be used 
instead:</p>

<pre><code>import csv
import os

with open('data.csv', 'rb') as csvfile:
    reader = csv.reader(csvfile)
    paths = [] #stores all paths
    rows = [] #stores all lines
    for row in reader:
        paths.append(row[0].split(""/"")) #split path by ""/""
        rows.append(row)

    commonprefix = os.path.commonprefix(paths) #finds prefix common to all paths

    for row in rows:
        row[0] = row[0].replace('/'.join(commonprefix)+'/', """") #remove prefix
</code></pre>

<p><code>rows</code> now has a list of lists which you can write to a file</p>

<pre><code>with open('data2.csv', 'wb') as csvfile:
    writer = csv.writer(csvfile)
    for row in rows:
        writer.writerow(row)
</code></pre>
","2582456","","2582456","","2015-07-06 07:21:45","2015-07-06 07:21:45","","","","0","","",""
"31239929","2","","31239329","2015-07-06 07:23:52","","0","","<p>The following Python script will read your file in (assuming it looks like your example) and will create a version removing the common folders:</p>

<pre><code>import os.path, csv

finput = open(""d:\\input.csv"",""r"")
csv_input = csv.reader(finput, delimiter="" "", skipinitialspace=True)
csv_output = csv.writer(open(""d:\\output.csv"", ""wb""), delimiter="" "")

# Create a set of unique folder names

set_folders = set()

for input_row in csv_input:
    set_folders.add(os.path.split(input_row[0])[0])

# Determine the common prefix

base_folder = os.path.split(os.path.commonprefix(set_folders))[0]
nprefix = len(base_folder) + 1

# Go back to the start of the input CSV 

finput.seek(0)

for input_row in csv_input:
    csv_output.writerow([input_row[0][nprefix:]] + input_row[1:])
</code></pre>

<p>Using the following as input:</p>

<pre><code>C:/Abc/Def/Test/temp/test/GLNext/FILE0.frag                   0   0   0
C:/Abc/Def/Test/temp/test/GLNext/FILE0.vert                   0   0   0
C:/Abc/Def/Test/temp/test/GLNext/FILE0.link-link-0.frag       16  24  3
C:/Abc/Def/Test/temp/test/GLNext2/FILE0.link-link-0.vert       87  116 69
C:/Abc/Def/Test/temp/test/GLNext5/FILE0.link-link-0.vert.bin   75  95  61
C:/Abc/Def/Test/temp/test/GLNext7/FILE0.link-link-0            0   0
C:/Abc/Def/Test/temp/test/GLNext/FILE0.link-link-6            0   0   0
</code></pre>

<p>The output is as follows:</p>

<pre><code>GLNext/FILE0.frag 0 0 0
GLNext/FILE0.vert 0 0 0
GLNext/FILE0.link-link-0.frag 16 24 3
GLNext2/FILE0.link-link-0.vert 87 116 69
GLNext5/FILE0.link-link-0.vert.bin 75 95 61
GLNext7/FILE0.link-link-0 0 0
GLNext/FILE0.link-link-6 0 0 0
</code></pre>

<p>With one space between each column, although this could easily be changed.</p>
","4985733","","4985733","","2015-07-06 07:41:28","2015-07-06 07:41:28","","","","0","","",""
"31283857","2","","31239329","2015-07-08 05:02:16","","0","","<p>So i tried something like this</p>

<pre><code>for dirName, subdirList, fileList in os.walk(Directory):
    for fname in fileList:
        if fname.endswith('.csv'):
            for line in fileinput.input(os.path.join(dirName, fname), inplace = 1):
                location = line.find(r'GLNext')
                if location &gt; 0:
                    location += len('GLNext')
                    print line.replace(line[:location], ""."")
                else:
                    print line
</code></pre>
","4790800","","","","","2015-07-08 05:02:16","","","","0","","",""
"31284985","2","","31239329","2015-07-08 06:24:45","","0","","<p>You can use the <code>pandas</code> library for this. Doing so, you can leverage <code>pandas</code>' amazing handling of big CSV files (even in the hundreds of MB).</p>

<p><strong>Code:</strong></p>

<pre><code>import pandas as pd

csv_file = 'test_csv.csv'
df = pd.read_csv(csv_file, header=None)
print df
print ""-------------------------------------------""

path = ""C:/Abc/bcd/Def/Test/temp/test/GLNext/""
df[0] = df[0].replace({path:""""}, regex=True)

print df
# df.to_csv(""truncated.csv"") # Export to new file.
</code></pre>

<p><strong>Result:</strong></p>

<pre><code>                                                   0   1    2   3
0    C:/Abc/bcd/Def/Test/temp/test/GLNext/FILE0.frag   0    0   0
1    C:/Abc/bcd/Def/Test/temp/test/GLNext/FILE0.vert   0    0   0
2  C:/Abc/bcd/Def/Test/temp/test/GLNext/FILE0.lin...  16   24   3
3  C:/Abc/bcd/Def/Test/temp/test/GLNext/FILE0.lin...  87  116  69
4  C:/Abc/bcd/Def/Test/temp/test/GLNext/FILE0.lin...  75   95  61
5  C:/Abc/bcd/Def/Test/temp/test/GLNext/FILE0.lin...   0    0 NaN
6  C:/Abc/bcd/Def/Test/temp/test/GLNext/FILE0.lin...   0    0   0
-------------------------------------------
                            0   1    2   3
0                  FILE0.frag   0    0   0
1                  FILE0.vert   0    0   0
2      FILE0.link-link-0.frag  16   24   3
3      FILE0.link-link-0.vert  87  116  69
4  FILE0.link-link-0.vert.bin  75   95  61
5           FILE0.link-link-0   0    0 NaN
6           FILE0.link-link-6   0    0   0
</code></pre>
","2548721","","","","","2015-07-08 06:24:45","","","","0","","",""
"31240010","2","","31239904","2015-07-06 07:28:39","","7","","<p>For <code>bash</code>, This was already answered at <a href=""https://stackoverflow.com/questions/5015316/run-all-python-files-in-a-directory"">Run all Python files in a directory</a></p>

<p>You can run:</p>

<pre><code>for f in *.py; do python ""$f""; done
</code></pre>

<p>If you're on <code>Powershell</code>, You can use:</p>

<pre><code>Get-Childitem -Path c:\path\to\scripts -Filter *.py | % {python $_.FullName}
</code></pre>

<p><code>EDIT</code>: Like Duncan said, This is a shorter solution on <code>Powershell</code>:</p>

<pre><code>ls C:\path\to\scripts\*.py | %{ python $_.Fullname}
</code></pre>
","2582456","","-1","","2017-05-23 10:26:46","2015-07-06 08:00:58","","","","3","","",""
"31240193","2","","31239904","2015-07-06 07:39:21","","1","","<p>Try this:</p>

<pre><code>import os
path = 'path\\to\\your\\directory\\'
files = os.listdir (path)
for i in files:
    if i.endswith('.py'):
        os.system(""python ""+path+i)
</code></pre>
","4549554","","","","","2015-07-06 07:39:21","","","","1","","",""
"31241387","2","","31239904","2015-07-06 08:47:20","","0","","<p>In Powershell you can use:</p>

<pre><code>Get-Childitem -Path c:\to\folder\ -Filter *.py | % {&amp; $_.FullName}
</code></pre>
","2072345","","","","","2015-07-06 08:47:20","","","","0","","",""
"31240028","2","","31239911","2015-07-06 07:29:32","","5","","<p>You are using <em>implicit relative</em> imports (the Python 2 model); you need to use absolute references or explicit relative imports:</p>

<pre><code>from .app1.app1 import mod as app1
</code></pre>

<p>where the leading <code>.</code> signals that the rest is relative to the current package, or</p>

<pre><code>from app.app1.app1 import mod as app1
</code></pre>

<p>See <a href=""https://www.python.org/dev/peps/pep-0328/"" rel=""noreferrer"">PEP 328 - <em>Imports: Multi-Line and Absolute/Relative</em></a>.</p>

<p>You probably will have other issues however. Porting is not that trivial, read up on the issues in the <a href=""http://python3porting.com/"" rel=""noreferrer"">Porting to Python 3 book</a>. This issue is  <a href=""http://python3porting.com/problems.html"" rel=""noreferrer"">a common migration problem</a>.</p>
","100297","","","","","2015-07-06 07:29:32","","","","1","","",""
"31243111","2","","31242920","2015-07-06 10:10:37","","3","","<p>Use <code>re.sub</code></p>

<pre><code>&gt;&gt;&gt; a = ""\""java jobs in delhi\"" delhi""
&gt;&gt;&gt; re.sub(r'\bdelhi\b(?=(?:""[^""]*""|[^""])*$)', r'', a)
'""java jobs in delhi"" '
&gt;&gt;&gt; re.sub(r'\bdelhi\b(?=(?:""[^""]*""|[^""])*$)', r'', a).strip()
'""java jobs in delhi""'
</code></pre>

<p><strong>OR</strong></p>

<pre><code>&gt;&gt;&gt; re.sub(r'(""[^""]*"")|delhi', lambda m: m.group(1) if m.group(1) else """", a)
'""java jobs in delhi"" '
&gt;&gt;&gt; re.sub(r'(""[^""]*"")|delhi', lambda m: m.group(1) if m.group(1) else """", a).strip()
'""java jobs in delhi""'
</code></pre>
","3297613","","","","","2015-07-06 10:10:37","","","","1","","",""
"31243216","2","","31242920","2015-07-06 10:15:19","","0","","<p>As a general way you can use <code>re.split</code> and a list comprehension :</p>

<pre><code>&gt;&gt;&gt; a = ""\""java jobs in delhi\"" delhi \""another text\"" and this""
&gt;&gt;&gt; sp=re.split(r'(\""[^""]*?\"")',a)
&gt;&gt;&gt; ''.join([i.replace('dehli','') if '""' in i else i for i in sp])
'""java jobs in delhi"" delhi ""another text"" and this'
</code></pre>

<p>The <code>re.split()</code> function split your text based on sub-strings that has been surrounded with <code>""</code> :</p>

<pre><code>['', '""java jobs in delhi""', ' delhi ', '""another text""', ' and this']
</code></pre>

<p>Then you can replace the <code>dehli</code> words which doesn't surrounded with 2 double quote!  </p>
","2867928","","","","","2015-07-06 10:15:19","","","","0","","",""
"31244618","2","","31242920","2015-07-06 11:24:40","","0","","<p>Here is another alternative. This is a generic solution to remove any unquoted text:</p>

<pre><code>def only_quoted_text(text):
    output = []
    in_quotes=False

    for letter in a:
        if letter == '""':
            in_quotes = not in_quotes
            output.append(letter)
        elif in_quotes:
            output.append(letter)

    return """".join(output)  


a = ""list of \""java jobs in delhi\"" delhi and \"" python jobs in mumbai \"" mumbai""

print only_quoted_text(a)
</code></pre>

<p>The output would be:</p>

<pre><code>""java jobs in delhi"""" python jobs in mumbai ""
</code></pre>

<p>It also displays text if the final quote is missing.</p>
","4985733","","","","","2015-07-06 11:24:40","","","","0","","",""
"31244679","2","","31243002","2015-07-06 11:27:41","","1","","<p>I would suggest you try to transform your cartesian coordinates into polar coordinates, that should allow you to use the standard <code>scipy.interpolation</code> without issues as you won't have the ambiguity of the x->y mapping anymore.</p>
","639054","","","","","2015-07-06 11:27:41","","","","2","","",""
"31335255","2","","31243002","2015-07-10 07:47:44","","2","","<p>This is called parametric interpolation. </p>

<p><a href=""http://docs.scipy.org/doc/scipy-dev/reference/generated/scipy.interpolate.splprep.html"" rel=""nofollow"">scipy.interpolate.splprep</a> provides spline approximations for such curves. This assumes you know the <em>order</em> in which the points are on the curve.</p>

<p>If you don't know which point comes after which on the curve, the problem becomes more difficult. I think in this case, the problem is called manifold learning, and some of the <a href=""http://scikit-learn.org/stable/modules/manifold.html"" rel=""nofollow"">algorithms in scikit-learn</a> may be helpful in that.</p>
","108184","","","","","2015-07-10 07:47:44","","","","0","","",""
"31243288","2","","31243014","2015-07-06 10:18:21","","1","","<p>You can use a python dictionary for this purpose
For example</p>

<pre><code>import numpy as np
dic={}
dic['1']=np.zeros(3)
dic['2']=np.ones(5)
print dic['1']
print dic['2']
</code></pre>

<p>now dic['1'] and dic['2'] are you arrays</p>
","3510686","","","","","2015-07-06 10:18:21","","","","2","","",""
"31247817","2","","31243014","2015-07-06 13:58:37","","0","","<p>I see @user3510686 has already answered it. Posing what I tried.</p>

<pre><code>a={}
for i in range(10):
    a[i]=np.random.rand(10)
</code></pre>
","580736","","","","","2015-07-06 13:58:37","","","","0","","",""
"31243189","2","","31243044","2015-07-06 10:14:13","","2","","<p>You are not setting the property. You are manipulating a mutable object.</p>

<p>The assignment is not on the property itself, but on a <em>subscription</em>, the <code>[..]</code> part addresses a dictionary key. You could assign the property to a new name and still manipulate that dictionary:</p>

<pre><code>parrot = Parrot()
parrot_voltage = parrot.voltage
parrot_voltage[0] = 100
</code></pre>

<p>but you cannot set the property to a new dictionary or a different type of object altogether. This applies to all mutable objects used in a property; lists, sets, instances, etc.</p>
","100297","","100297","","2015-07-06 10:19:26","2015-07-06 10:19:26","","","","0","","",""
"31245636","2","","31243052","2015-07-06 12:17:58","","1","","<p>Yes, it's possible to do it with recursion. You can make combine_n return a list of tuples with all the combinations beginning at index cur_index, and starting with a partial combination of cur_combo, which you build up as you recurse:</p>

<pre><code>def combine_n(elements, r, cur_index=0, cur_combo=()):
    r-=1
    temp_list = []
    for elem_index in range(cur_index, len(elements)-r):
        i = elements[elem_index]
        if r &gt; 0:
            temp_list = temp_list + combine_n(elements, r, elem_index+1, cur_combo+(i,))
        else:
            temp_list.append(cur_combo+(i,))
    return temp_list

elements = list(range(1,6))
print = combine_n(elements, 3)
</code></pre>

<p>output:</p>

<pre><code>[(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]
</code></pre>

<p>The for loop only goes up to len(elements)-r, because if you go further than that then there aren't enough remaining elements to fill the remaining places in the tuple. The tuples only get added to the list with append at the last level of recursion, then they get passed back up the call stack by returning the temp_lists and concatenating at each level back to the top.</p>
","696391","","","","","2015-07-06 12:17:58","","","","1","","",""
"31450804","2","","31243172","2015-07-16 09:47:29","","0","","<p>The solution to my problem is: </p>

<pre><code>MaxPlus.Core.EvalMAXScript(WM3_MC_BuildFromNode(for mod in $node.modifiers where isKindOf mod Morpher collect mod)[1] 3 $target)
</code></pre>

<p>This solution is found by Swordslayer on the autodesk forum for 3ds Max</p>
","5072880","","","","","2015-07-16 09:47:29","","","","0","","",""
"36060258","2","","31243290","2016-03-17 12:14:08","","0","","<p>Your option number 2 uses a different data set (<code>xytest</code>) than your version number (1), which uses <code>xtest</code>. Furthermore, your crossvalidation should include the training, not only the prediction.</p>

<p>Apart from that they should be the same, while I advice you to use pipelines.</p>
","1431255","","","","","2016-03-17 12:14:08","","","","0","","",""
"31243643","2","","31243352","2015-07-06 10:35:29","","3","","<p>This could be done in 2 steps, generate a new column that creates the expanded str values, then <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby"" rel=""nofollow""><code>groupby</code></a> on 'A' and <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.apply.html#pandas.core.groupby.GroupBy.apply"" rel=""nofollow""><code>apply</code></a> <code>list</code> to this new column:</p>

<pre><code>In [62]:
df['expand'] = df.apply(lambda x: ','.join([x['B']] * x['quantity']), axis=1)
df.groupby('A')['expand'].apply(list)

Out[62]:
A
1    [foo, baz,baz, bar,bar, faz]
2                  [foo,foo, bar]
3                   [foo,foo,foo]
Name: expand, dtype: object
</code></pre>

<p><strong>EDIT</strong></p>

<p>OK after taking <em>inspiration</em> from @Jianxun Li's answer:</p>

<pre><code>In [130]:
df.groupby('A').apply(lambda x: np.repeat(x['B'].values, x['quantity']).tolist())

Out[130]:
A
1    [foo, baz, baz, bar, bar, faz]
2                   [foo, foo, bar]
3                   [foo, foo, foo]
dtype: object
</code></pre>

<p>Also this works:</p>

<pre><code>In [131]:
df.groupby('A').apply(lambda x: list(np.repeat(x['B'].values, x['quantity'])))

Out[131]:
A
1    [foo, baz, baz, bar, bar, faz]
2                   [foo, foo, bar]
3                   [foo, foo, foo]
dtype: object
</code></pre>
","704848","","704848","","2015-07-06 11:15:40","2015-07-06 11:15:40","","","","7","","",""
"31244334","2","","31243352","2015-07-06 11:10:00","","2","","<p>Another way to do it. First reshape the <code>df</code> using <code>pivot_table</code> and then <code>apply</code> <code>np.repeat().tolist()</code>.</p>

<pre><code>import pandas as pd
import numpy as np

df

Out[52]: 
   A    B  quantity
0  1  foo         1
1  1  baz         2
2  1  bar         2
3  1  faz         1
4  2  foo         2
5  2  bar         1
6  3  foo         3

df.pivot('A','B','quantity').fillna(0).apply(lambda row: np.repeat(row.index.values, row.values.astype(int)).tolist(), axis=1)

Out[53]: 
A
1    [bar, bar, baz, baz, faz, foo]
2                   [bar, foo, foo]
3                   [foo, foo, foo]
dtype: object
</code></pre>
","5014134","","5014134","","2015-07-06 11:15:06","2015-07-06 11:15:06","","","","2","","",""
"31243553","2","","31243355","2015-07-06 10:30:36","","0","","<p>From the <a href=""http://docs.scipy.org/doc/numpy/user/basics.byteswapping.html"" rel=""nofollow"">numpy docs</a></p>

<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; big_end_arr = np.ndarray(shape=(2,),dtype='&gt;i2', buffer=big_end_str)
&gt;&gt;&gt; big_end_arr[0]
1
&gt;&gt;&gt; big_end_arr[1]
770
</code></pre>

<blockquote>
  <p>Note the array dtype above of >i2. The > means ‚Äòbig-endian‚Äô (&lt; is little-endian) and i2 means ‚Äòsigned 2-byte integer‚Äô. For example, if our data represented a single unsigned 4-byte little-endian integer, the dtype string would be &lt; u4 .</p>
</blockquote>

<p>The  type specifiers  are listed in the <a href=""http://docs.scipy.org/doc/numpy/user/basics.rec.html#defining-structured-arrays"" rel=""nofollow"">structured array</a> docs.</p>
","2141635","","","","","2015-07-06 10:30:36","","","","10","","",""
"31247746","2","","31243376","2015-07-06 13:55:10","","2","","<p>I should have warned you more thouroghly: wxPython Phoenix is the future of wxPython (because, in contrast to classic it supports Python 3, too). That said, this does not mean everything is nice and shiny. My personal advice is to keep on going with classic (or in other words: what works now in classic, will most probably also work in Phoenix). In Phoenix, you will stumble into bugs like this more often.</p>

<p>Luckily, in this special case, there has already been something else done:</p>

<p><code>&lt;wx.TextCtrl&gt;.AutoComplete(‚Ä¶)</code> does accept a list of strings. This already works in 2.9.0/classic. See <a href=""http://wxpython.org/Phoenix/docs/html/TextEntry.html#TextEntry.AutoComplete"" rel=""nofollow"">documentation for <code>wx.TextEntry</code>/AutoComplete</a>.</p>
","2683116","","","","","2015-07-06 13:55:10","","","","2","","",""
"36051405","2","","31243376","2016-03-17 03:56:46","","0","","<p>You need to pass an instance of MyTextCompleter, not the class itself, to wx.TextCtrl.AutoComplete().  Change this:</p>

<pre><code>        basicText.AutoComplete(MyTextCompleter)
</code></pre>

<p>to</p>

<pre><code>        basicText.AutoComplete(MyTextCompleter())
</code></pre>
","2149949","","","","","2016-03-17 03:56:46","","","","0","","",""
"31243684","2","","31243388","2015-07-06 10:37:36","","1","","<p>You still need to check that the action is a POST, and that the forms are valid, and you must redirect after a successful submission.</p>

<pre><code>def create(request):
    voteTypeForm = VoteTypeForm(request.POST or None)
    voteForm = VoteForm(request.POST or None)
    if request.method == 'POST':
        # check validity separately to avoid short-cutting
        vote_type_valid = voteTypeForm.is_valid()
        vote_form_valid = voteForm.is_valid()
        if vote_type_valid and vote_form_valid:
            instance = voteTypeForm.save(commit=False)
            instance.pub_date = timezone.now()
            instance.save()
            instance2 = voteForm.save(commit=False)
            instance2.save()
            return redirect('&lt;view-you-redirect-to-on-success'&gt;
    context = RequestContext(request,{
            'voteTypeForm': voteTypeForm,
            'voteForm': voteForm,
    })
    return render(request, 'Vote/create.html', context)
</code></pre>
","104349","","","","","2015-07-06 10:37:36","","","","8","","",""
"31243722","2","","31243388","2015-07-06 10:39:29","","-1","","<p>The easiest way to do it is by making ajax request when you push the submit button.
Considering you have a form 'voteForm', try loading this form using django's inbuilt template as: <br><br>{{voteForm.as_p}}<br><br></p>

<p>This will create your form for, which you have already done.<br>
Now when you press submit button, make an ajax request with your form data in it.<br><br>
The ajax request will take your data to the form and reverts back with a response which you can use to further do the processing.
A quick example for ajax request would be:</p>

<pre><code>    function youfunctionname()
        $.ajax({
                   type: ""POST"",
                   url: url,
                   data: $(""#yourformname"").serialize(), // serializes the form's elements.
                   success: function(data)
                   {
                       alert(data);
                   }
                 });
  }
</code></pre>
","2542138","","2542138","","2015-07-06 11:15:02","2015-07-06 11:15:02","","","","3","","",""
"31243859","2","","31243476","2015-07-06 10:45:49","","2","","<p>Though you could do this, it's generally recommended that you open files using <code>with</code> as that is designed to handle errors by closing the file no matter what happens. You can still pass it to your Labyrinth's <code>init</code> just by passing a reference.</p>

<pre><code>with open(file) as f:
    labyrinth = Labyrinth(f)
</code></pre>

<p>Then if any error occurs, the file is still safely closed, and you've also passed your open file to the Labyrinth object anyway.</p>
","4374739","","","","","2015-07-06 10:45:49","","","","3","","",""
"31244797","2","","31243476","2015-07-06 11:33:28","","1","","<p>You are at the design phase. 
So, you have to weigh the chances of losing your data due to some error or crash against the importance of your data and the cost of ""protecting"" it.</p>

<p>Using <code>with</code> protects you from some errors. If you consider that python itself may crash (e.g.), then you still have some risk. Saving after each step is evidently safer. How useful it is depends on the volume of saved data (and there are techniques for reducing this as well), the impact of each save on performance, and the chances of such crashes.</p>

<p>Without any further info, and simply guessing, my answer to your specific question:</p>

<blockquote>
  <p>... is it ok to open the file in the <code>init</code> function of <code>Labyrinth</code> and
  close it at the end of the game...? Or is it better to open and close
  the file every time?</p>
</blockquote>

<p>is that <em>I would save after each step</em>.</p>
","2707864","","","","","2015-07-06 11:33:28","","","","2","","",""
"31244391","2","","31244238","2015-07-06 11:13:36","","0","","<p>If you want ""<em>to get the details</em>"" for <em>output</em>, you can try <a href=""https://docs.python.org/3/library/pprint.html"" rel=""nofollow noreferrer"">Python's Data pretty printer</a>:</p>

<blockquote>
  <p>The <code>pprint</code> module provides a capability to ‚Äúpretty-print‚Äù arbitrary
  Python data structures...</p>
</blockquote>

<p>Its output is very much configurable, and you can go down the structure to an arbitrary depth, with <code>depth=...</code>.</p>

<p>If you want ""<em>to get the details</em>"" for <em>using it elsewhere</em>, 
I would suggest a few things:</p>

<ol>
<li>Try not indexing with <code>[0]</code>, you may be losing information stored somewhere else in <code>Attributes</code>.</li>
<li>Check available methods with <a href=""https://stackoverflow.com/questions/1911281/how-do-i-get-list-of-methods-in-a-python-class"">How do I get list of methods in a Python class?</a>, or <a href=""https://stackoverflow.com/questions/34439/finding-what-methods-an-object-has"">Finding what methods an object has</a>.</li>
<li>Check type with <a href=""https://stackoverflow.com/questions/152580/whats-the-canonical-way-to-check-for-type-in-python"">What&#39;s the canonical way to check for type in python?</a>.</li>
</ol>

<p>With the information obtained on <code>Attributes</code> you should be able to extract any info stored in it.</p>
","2707864","","-1","","2017-05-23 10:30:10","2015-07-10 19:59:22","","","","2","","",""
"31244440","2","","31244268","2015-07-06 11:16:28","","3","","<p>Have you profiled your code and have an idea where the hotspot is? If it is not computing, it's probably just the disk IO. I doubt you get a performance boost by tricks on the IO logic. In the end it's the sequential disk access that might be the limit. If you do have a RAID system it might makes sense to have multiple threads reading from the disk, but you could do that with python standard threads. Try to ramp up from 1 to a few and measure along the way to find the sweet spot.</p>

<p>The reason why you saw an improvement with gevent downloading images in parallel is that the network IO throughput can be improved a lot with multiple connections. A single network connection can hardly saturate the network bandwidth when the remote server is not directly attached to your network device. Whereas a single disk IO operation can easily saturate the disk throughput.</p>
","639054","","639054","","2015-07-06 12:54:23","2015-07-06 12:54:23","","","","0","","",""
"31247604","2","","31247430","2015-07-06 13:50:06","","2","","<p>How is could be done in Python. You did not give any code, so I give the basics only, no code as well:</p>

<ul>
<li>put the root folder in a list</li>
<li>pop one item off the list

<ul>
<li>list the item</li>
<li>append the directories in this listing to the list</li>
<li>delete the files in the listing.</li>
</ul></li>
<li>repeat the second step incl. substeps until the list is empty</li>
</ul>

<p>Helpful: <a href=""https://docs.python.org/2/library/ftplib.html"" rel=""nofollow"">https://docs.python.org/2/library/ftplib.html</a></p>
","3929826","","","","","2015-07-06 13:50:06","","","","0","","",""
"31247533","2","","31247458","2015-07-06 13:46:54","","2","","<p>You have a syntax error in your template:</p>

<pre><code>{% for product in products %)
</code></pre>

<p>should be:</p>

<pre><code>{% for product in products %}
</code></pre>
","940098","","","","","2015-07-06 13:46:54","","","","0","","",""
"31247535","2","","31247458","2015-07-06 13:46:56","","3","","<p>You have a typo:</p>

<p><code>{% for product in products %)</code></p>

<p>and it should be</p>

<p><code>{% for product in products %}</code></p>

<p>see difference in bracket <code>}</code> not <code>)</code></p>
","3249012","","","","","2015-07-06 13:46:56","","","","1","","",""
"31247751","2","","31247460","2015-07-06 13:55:23","","4","","<p>If this is for your own benefit, rather than something you need to show to others, you can use IPython notebooks and the <code>%matplotlib nbagg</code> backend, at least for Seaborn, e.g.:</p>

<pre><code>%matplotlib nbagg
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 50, 100)
y = x**(0.5)

plt.plot(x, y)
</code></pre>

<p>If you don't already have IPython etc. set up, you can quickly test this out by creating a new notebook at <a href=""https://try.jupyter.org/"" rel=""nofollow"">try.jupyter.org</a>, pasting the code into a cell, and hitting <code>Shift + Enter</code> to run. Since this is running on a free VM it will be slow, running the notebook locally will mean panning/zooming is much smoother.</p>
","1222578","","","","","2015-07-06 13:55:23","","","","0","","",""
"31253739","2","","31247460","2015-07-06 19:10:06","","-1","","<p>I found that using Seaborn with mpld3 worked best for me, thanks.</p>
","5004586","","","","","2015-07-06 19:10:06","","","","0","","",""
"31247842","2","","31247510","2015-07-06 13:59:46","","1","","<p>User site-package refers to packages installed in ~/.local/lib[64]/python-VERSION/site-packages/</p>

<p>These packages are available as any other installed packages, but only to this specific user. It overrides system packages too.</p>
","1988874","","","","","2015-07-06 13:59:46","","","","0","","",""
"31247744","2","","31247578","2015-07-06 13:54:56","","2","","<p>Try using pipelines in python-social-auth.
<br><br>
Create a custom pipeline by creating pipeline.py file and add your functions here.<br>
A simple example of functions can be found <a href=""http://www.masnun.com/2014/01/03/python-social-auth-custom-pipeline.html"" rel=""nofollow"">here</a></p>
","2542138","","","","","2015-07-06 13:54:56","","","","3","","",""
"31247797","2","","31247587","2015-07-06 13:57:59","","0","","<p>How about this. </p>

<pre><code>from rae import Drae

drae = Drae()

if text.startswith('/'):
  if text.startswith('/define'):
    try:
      [command, data] = text.split(' ',1)
    except:
      send('Write: /define &lt;word&gt;')
    meanings = drae.search(data) 
    reply(str(meanings)) 
    setEnabled(chat_id, True)
</code></pre>
","3227836","","3227836","","2015-07-06 14:09:34","2015-07-06 14:09:34","","","","0","","",""
"31248670","2","","31247647","2015-07-06 14:36:51","","0","","<p>You need to store each <code>imshow</code> AxesImage in a list and inside update, loop over all of them and update each based on the slider,</p>

<pre><code>import os
from matplotlib import pyplot as plt
from matplotlib.widgets import Slider
import numpy as np

import glob
import h5py
#Define the xy size of the mapped array
xsize=3
ysize=3

lengthh5=9
readlist=[]
for i in range (0,lengthh5):
    npraw=np.random.rand(200,50,50)
    readlist.append (npraw)

fig=plt.figure()
ls = []
for k in range (0,lengthh5):
    ax=fig.add_subplot(xsize,ysize,k)        
    frame = 10
    l = ax.imshow(readlist[k][frame,:,:]) 
    ls.append(l)
    plt.axis('off')

sframe = Slider(fig.add_subplot(50,1,50), 'Frame', 
                0, len(readlist[0])-1, valinit=0)

def update(val):
    frame = np.around(sframe.val)
    for k, l in enumerate(ls):
        l.set_data(readlist[k][frame,:,:])

sframe.on_changed(update)
plt.show()
</code></pre>
","4680533","","4680533","","2017-06-30 08:49:30","2017-06-30 08:49:30","","","","7","","",""
"31250371","2","","31247678","2015-07-06 15:57:11","","0","","<p>I cannot speak to the time efficiency of this method, but it might just get what you want done. The basic idea is to create a list to contain the lines of each text file, and then output the list to your new csv file. You save a 'delimiter' variable and then change it by checking each line as you go through the text files.</p>

<p>For example:
I created two text files on my Desktop. They read as follows:</p>

<p>delimiter_test_1.txt</p>

<blockquote>
  <p>test=delimiter=here </p>
  
  <p>does-it-work</p>
  
  <p>I'm:Not:Sure</p>
</blockquote>

<p>delimiter_test_2.txt</p>

<blockquote>
  <p>This:File:Uses:Colons</p>
  
  <p>Pretty:Much:The:Whole:Time</p>
  
  <p>does-it-work</p>
  
  <p>If-Written-Correctly-yes</p>
</blockquote>

<p>I then ran this script on them:</p>

<pre><code>import csv
import glob
import os

directory = raw_input(""INPUT Folder for Log Dump Files:"")
output = raw_input(""OUTPUT Folder for .csv files:"")

txt_files = os.path.join(directory, '*.txt')

delimiter = ':'
for txt_file in glob.glob(txt_files):
    SavingList = []

    with open(txt_file, 'r') as text:
            for line in text:
                if line == 'test=delimiter=here\n':
                    delimiter = '='
                elif line == 'does-it-work\n':
                    delimiter = '-'
                elif line == ""I'm:Not:Sure"":
                    delimiter = ':'

                SavingList.append(line.split(delimiter))

    with open('%s.csv' %os.path.join(output, txt_file.split('.')[0]), 'wb') as output_file:
            writer = csv.writer(output_file)
            for m in xrange(len(SavingList)):
                writer.writerow(SavingList[m])
</code></pre>

<p>And got two csv files with the text split based on the desired delimiter. Depending on how many different lines you have for changing the delimiter you could set up a dictionary of said lines. Then your check becomes:</p>

<pre><code>if line in my_dictionary.keys():
    delimiter = my_dictionary[line]
</code></pre>

<p>for example.</p>
","4147462","","","","","2015-07-06 15:57:11","","","","2","","",""
"31247824","2","","31247763","2015-07-06 13:59:04","","4","","<p>You can <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html#pandas.DataFrame.apply"" rel=""nofollow""><code>apply</code></a> <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.round.html#pandas.Series.round"" rel=""nofollow""><code>round</code></a>:</p>

<pre><code>In [142]:
df[['Y','X']].apply(pd.Series.round)

Out[142]:
    Y  X
0  36 -3
1  36 -3
2  35 -3
3  35 -4
4  36 -4
5  36 -3
6  36 -3
</code></pre>

<p>If you want to apply to a specific number of places:</p>

<pre><code>In [143]:
df[['Y','X']].apply(lambda x: pd.Series.round(x, 3))

Out[143]:
        Y      X
0  35.973 -2.735
1  35.592 -2.904
2  35.330 -3.391
3  35.393 -3.929
4  35.579 -3.943
5  35.520 -3.409
6  35.759 -3.079
</code></pre>

<p><strong>EDIT</strong>
You assign the above to the columns you want to modify like the following:</p>

<pre><code>In [144]:
df[['Y','X']] = df[['Y','X']].apply(lambda x: pd.Series.round(x, 3))
df

Out[144]:
        Y      X  id WP_NER
0  35.973 -2.735   1  WP_01
1  35.592 -2.904   2  WP_02
2  35.330 -3.391   3  WP_03
3  35.393 -3.929   4  WP_04
4  35.579 -3.943   5  WP_05
5  35.520 -3.409   6  WP_06
6  35.759 -3.079   7  WP_07
</code></pre>
","704848","","704848","","2015-07-06 14:07:28","2015-07-06 14:07:28","","","","2","","",""
"35159905","2","","31247768","2016-02-02 17:24:34","","1","","<p>You need to be able to output a numpy array or sparse matrix to convert to a Qobj. I could not find anything in the picos docs that discusses this option. </p>
","2121913","","","","","2016-02-02 17:24:34","","","","0","","",""
"38187541","2","","31247768","2016-07-04 14:54:25","","0","","<p>I am seeing this post very late, but maybe I can help... I am not sure what the function Qobj() is doing, can you please tell me more about it.</p>

<p>Otherwise, there is now a new partial_transpose() function in PICOS (version released today), which hopefully does what you need.</p>

<p>Best,
Guillaume.</p>
","4903011","","","","","2016-07-04 14:54:25","","","","0","","",""
"31247911","2","","31247820","2015-07-06 14:02:09","","2","","<p>Pass the <code>Event</code> object to the thread target function so that they are shared between main thread and the <code>pool</code> thread:</p>

<pre><code>def poll_files(....., trigger):
    ....
    trigger.set()

# main thread
trigger = threading.Event()
poll = threading.Thread(target=poll_files, args=myargs + (trigger,))
...
trigger.wait()
</code></pre>
","2225682","","","","","2015-07-06 14:02:09","","","","0","","",""
"32295818","2","","31247829","2015-08-30 10:59:47","","0","","<p>Finally i solved this problem, there was a broken link to one of references in windows service. This is the right config for py2exe which solved my problem:</p>

<pre><code>opts = {'py2exe': {
'dll_excludes': ['libzmq.pyd', 'OLEAUT32.dll', 'USER32.dll', 'SHELL32.dll', 'ole32.dll',
                 'MSVCP90.dll', 'ADVAPI32.dll', 'NETAPI32.dll', 'WS2_32.dll', 'GDI32.dll',
                 'VERSION.dll', 'KERNEL32.dll', 'WINSPOOL.DRV', 'mfc90.dll', 'ntdll.dll'],
'includes': ['UserList', 'UserString', 'commands', 'zmq.backend.cython'],
'dist_dir': ""dist""
}}

setup(service=[service], options=opts, zipfile=None,data_files=[(os.path.join(os.getcwd(), 'dist'), (zmq.libzmq.__file__,))])
</code></pre>
","5069269","","5069269","","2016-03-19 12:24:53","2016-03-19 12:24:53","","","","0","","",""
"38726274","2","","31247829","2016-08-02 16:49:11","","1","","<p>To use my win32serviceutil.ServiceFramework class in an exe pyInstaller produced, I needed to add a few .pyd files to the directory containing the exe e.g. win32service.pyd and win32event.pyd.  Assuming you've used the standard install paths for your libraries, these files are found here:</p>

<blockquote>
  <p>C:\Python27\Lib\site-packages\win32</p>
</blockquote>
","3220983","","3220983","","2016-08-02 19:00:27","2016-08-02 19:00:27","","","","0","","",""
"31248021","2","","31247878","2015-07-06 14:07:37","","1","","<p>You can get the names from elements with <code>market_listing_item_name</code> class name located in <code>div</code> elements having <code>market_listing_row</code> class:</p>

<pre><code>from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from selenium import webdriver

url = ""http://steamcommunity.com/market/search?appid=440""
driver = webdriver.Chrome()
driver.get(url)

# wait for results
WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ""div.market_listing_row"")))

results = [item.text for item in driver.find_elements_by_css_selector(""div.market_listing_row .market_listing_item_name"")]

driver.quit()

# dump results to a file
with open(""output.dat"", ""wb"") as f:
    for item in results:
        f.write(item + ""\n"")
</code></pre>

<p>Here is the contents of the <code>output.dat</code> file after running the script:</p>

<pre><code>Mann Co. Supply Crate Key
The Powerhouse Weapons Case
The Concealed Killer Weapons Case
Earbuds
Bill's Hat
Gun Mettle Campaign Pass
Tour of Duty Ticket
Genuine AWPer Hand
Specialized Killstreak Kit
Gun Mettle Key
</code></pre>
","771848","","","","","2015-07-06 14:07:37","","","","6","","",""
"34895786","2","","31248615","2016-01-20 09:12:10","","0","","<p>As pointed out by 0MQ founder <a href=""https://stackoverflow.com/users/751210/pieter-hintjens"">Pieter Hintjens</a> in <a href=""https://stackoverflow.com/questions/12504559/zeromq-push-pull-pattern-usefullness?rq=1"">this answer</a>, the PUSH-PULL mechanism is not a load balancer, but rather a simple round robin distributor. That's a typo in the docs <a href=""http://zguide.zeromq.org/page:all#Divide-and-Conquer"" rel=""nofollow noreferrer"">that is still there</a>.</p>

<p>That said, for the load balancing pattern you need to add a <strong>broker</strong> in the middle of your architecture. As pointed out by <a href=""https://stackoverflow.com/users/545332/jason"">Jason</a> in the comments, this is well explained in <a href=""http://zguide.zeromq.org/page:all#A-Load-Balancing-Message-Broker"" rel=""nofollow noreferrer"">the official guide</a>. There are also examples in Python.</p>

<p><a href=""https://i.stack.imgur.com/CVFTy.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CVFTy.png"" alt=""enter image description here""></a></p>

<p>The main idea is to have the workers sending a small ""READY"" message to the broker whenever they are free to receive more jobs. The broker in turns, keep ""pointers"" to free workers in a queue. When he receives a new job request from a client he also propagates the request to the first free worker in the queue, which gets popped out from the queue. As you can see in the picture above, the broker exploits ROUTER sockets in order to avoid a blocking behavior and to get proper load balancing. A small additional detail is that the broker does not poll the clients if there are not free workers in the queue.</p>

<p>This is the simplest way I am aware of for implementing a load balancing pattern with ZeroMQ. It is not exactly like ""polling"" for new jobs in the queue, but I think this is what you need. Also please beware that this is <strong>really</strong> the simplest way, that is, it is not reliable at all and it does not scale well as is. If you also need reliability, I suggest you to thoroughly read <a href=""http://zguide.zeromq.org/page:all#Chapter-Reliable-Request-Reply-Patterns"" rel=""nofollow noreferrer"">Chapter 4 of the official guide</a>.</p>

<p>As a side note, maybe you should seriously consider Celery for this task. I am really in love with ZeroMQ, however this is exactly the kind of thing that Celery is very good at, and in my opinion it is not so difficult to learn, as <a href=""https://news.ycombinator.com/item?id=7909201"" rel=""nofollow noreferrer"">someone may think</a>.</p>
","4804658","","","","","2016-01-20 09:12:10","","","","2","","",""
"31252161","2","","31251807","2015-07-06 17:35:35","","2","","<p>Looks like you have a header of 24 binary bytes before your utf16-encoded string starts. So you can read the file as binary and decode afterwards:</p>

<pre><code>with open(filename, ""rb"") as data:
    header = data.read(24)
    text = data.read().decode('utf-16-le')
</code></pre>

<p>But probably there are other binary parts. Without knowing the exact file format, there cannot be given more help.</p>
","3555845","","","","","2015-07-06 17:35:35","","","","2","","",""
"31251843","2","","31251808","2015-07-06 17:17:39","","1","","<p>py.test -> session scoped fixtures and their finalization should help you</p>

<p>You can use conftest.py to code your fixture.</p>
","390785","","","","","2015-07-06 17:17:39","","","","0","","",""
"31251929","2","","31251871","2015-07-06 17:22:34","","0","","<p>You can use a nested list comprehension: <code>[[f for s in sequences for f in sorted(s)] for sequences in lines]</code></p>
","3047642","","","","","2015-07-06 17:22:34","","","","2","","",""
"31252232","2","","31251871","2015-07-06 17:39:08","","1","","<p>One-liner using <code>re.sub</code> function.</p>

<pre><code>&gt;&gt;&gt; s = """"""{12,} {13,} {10,}
{16,} {17, 15,} {22,}
{27,} {28,24,29,} {28,} {28,}""""""
&gt;&gt;&gt; print(re.sub(r'(?&lt;=\d) +(?=\d)', ', ', re.sub(r'\{[^}]*\}', lambda m: ', '.join(sorted(re.findall(r'\d+', m.group(0)), key=lambda x: int(x))), s)))
12, 13, 10
16, 15, 17, 22
27, 24, 28, 29, 28, 28
</code></pre>
","3297613","","","","","2015-07-06 17:39:08","","","","0","","",""
"31251948","2","","31251876","2015-07-06 17:23:36","","2","","<p><code>f</code> becomes <code>index</code>.  This:</p>

<pre><code>@login_required
def index():
    return render_template('index.html',
                            title='test home title')
</code></pre>

<p>Is the same as this:</p>

<pre><code>def index():
    return render_template('index.html',
                            title='test home title')
index = login_required(index)
</code></pre>

<p>That is, the decorator is called with the decorated function as its argument.</p>
","1427416","","","","","2015-07-06 17:23:36","","","","0","","",""
"31252593","2","","31251881","2015-07-06 18:00:25","","1","","<p>First, When properly indented, an if - elif block is perfectly ok. So you could just use</p>

<pre><code>if whatevervar.get() == 1:
    dosomethingfancy()
elif whatevervar.get() == 2:
    dosomethingcool()
#and so on
</code></pre>

<p>In other languages there is something like a switch - case block: <a href=""https://en.m.wikipedia.org/wiki/Switch_case"" rel=""nofollow"">wikipedia</a> There is no such construct in Python, but there is a neat little trick that helps especially when dealing with bigger code blocks:</p>

<pre><code>Options = {
         1: dosomething,
         2: dosomethingelse
}

#execution
Options[myvar.get()]()
</code></pre>

<p>Basically, a dictionary is defined, that maps its key values to functions. Mind the parentheses: You don't want to call the function, when the dictionary is defined.</p>
","4209617","","","","","2015-07-06 18:00:25","","","","1","","",""
"31252902","2","","31251915","2015-07-06 18:18:32","","0","","<p>HTTP communication also known as RESTful communication is the universal language of the web and is ideal because it can work between operating systems and back end frameworks such as Django and iOS etc.. etc..</p>

<p>You will have quite a bit of research you need to do.  Django is written in Python, so assuming you know some Python, Django should not be too difficult to pickup, but you should definitely start with it's poll app tutorial.  </p>

<p>Django-Rest-Framework is probably the best tool to build a restful web API for your Django project.  Your iOS app will make http calls (GET, POST, PUT) etc... to your Django API.  There is really no better documentation than Django-Rest-Framework's website to learn how to use it.  </p>

<p>Ultimately there is no book that will tell you step by step how to do this.  You have to learn several different areas and put the pieces together.  </p>
","836277","","","","","2015-07-06 18:18:32","","","","1","","",""
"31251934","2","","31251933","2015-07-06 16:47:39","","0","","<p>You should be getting an IndexError on that line when you run it without the third argument. If you're not getting an IndexError, something else is wrong and you should fix it. If you are, all is well - and you simply need to check for the length of <code>sys.argv</code>, taking into account in your code what should happen when that value is 3 or 4:</p>

<pre><code>if len(sys.argv) == 3:
  # Stuff without sys.argv[3]
if len(sys.argv) == 4:
  # Stuff with sys.argv[3]
</code></pre>
","616507","John","","","","2015-07-06 16:47:39","","","","4","","",""
"31251935","2","","31251933","2015-07-06 16:51:46","","1","","<p>You can check the length of <code>sys.argv</code>, but why bother? Use try/catch:</p>

<pre><code>try: flag = sys.argv[1]
except: flag = False
</code></pre>

<p>That way variable <code>flag</code> always has a value, and you can write code the knows that it always has a value. The code has fewer lines than a if/else testing. It's a win all around.</p>
","208139","Bruce Ediger","","","","2015-07-06 16:51:46","","","","3","","",""
"31252036","2","","31251933","2015-07-06 17:28:19","","1","","<p>On a side note, it might be good to checkout <a href=""https://docs.python.org/3/library/argparse.html"" rel=""nofollow""><code>argparse</code></a> module in python, from the documentation -</p>

<blockquote>
  <p>The argparse module makes it easy to write user-friendly command-line interfaces. The program defines what arguments it requires, and argparse will figure out how to parse those out of sys.argv. The argparse module also automatically generates help and usage messages and issues errors when users give the program invalid arguments.</p>
</blockquote>

<p>It also has support for optional arguments. Maybe you can take a look at <a href=""https://docs.python.org/2/howto/argparse.html"" rel=""nofollow"">this</a> to get started on that.</p>
","795990","","","","","2015-07-06 17:28:19","","","","0","","",""
"31267118","2","","31252022","2015-07-07 11:17:59","","0","","<p>""... decides what translation object to install <strong>in the current thread context</strong>"" <a href=""https://docs.djangoproject.com/en/1.8/_modules/django/middleware/locale/#LocaleMiddleware"" rel=""nofollow"">(source)</a></p>

<p>Simple as it is, the language is thread-wide, since one thread serves one request, and request knows about the language.</p>
","4370639","","","","","2015-07-07 11:17:59","","","","0","","",""
"31252122","2","","31252037","2015-07-06 17:33:17","","1","","<p>A <code>&lt;br/&gt;</code> tag is an empty tag, always. There is no text in that tag.</p>

<p>What you have instead is text <em>between</em> two <code>&lt;br/&gt;</code> tags, which may have been confusing. You can drop either tag and it'll still be valid HTML.</p>

<p>You can get text following a tag using the <a href=""http://www.crummy.com/software/BeautifulSoup/bs4/doc/#next-sibling-and-previous-sibling"" rel=""nofollow""><code>.next_sibling</code> attribute</a>:</p>

<pre><code>soup.select('div.menu br')[0].next_sibling
</code></pre>

<p>Demo:</p>

<pre><code>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; html_doc = """"""
... &lt;HTML and CSS Stuff here&gt;
... &lt;div class=""menu""&gt;
... &lt;span class=""author""&gt;Bob&lt;/span&gt; 
... &lt;span class=""smaller""&gt;(06 Jul at 09:21)&lt;/span&gt;
... &lt;br/&gt;This message is very important to extract along with the matching author and time of submit&lt;br/&gt;
... &lt;/div&gt;
... """"""
&gt;&gt;&gt; soup = BeautifulSoup(html_doc)
&gt;&gt;&gt; soup.select('div.menu br')[0].next_sibling
u'This message is very important to extract along with the matching author and time of submit'
</code></pre>

<p>Putting that together with extracting all the data:</p>

<pre><code>for menu in soup.select('div.menu'):
    author = menu.find('span', class_='author').get_text()
    time = menu.find('span', class_='smaller').get_text()
    data = menu.find('br').next_sibling
</code></pre>

<p>which produces:</p>

<pre><code>&gt;&gt;&gt; for menu in soup.select('div.menu'):
...     author = menu.find('span', class_='author').get_text()
...     time = menu.find('span', class_='smaller').get_text()
...     data = menu.find('br').next_sibling
...     print 'Author: {}\nTime: {}\nData: {}'.format(author, time, data)
... 
Author: Bob
Time: (06 Jul at 09:21)
Data: This message is very important to extract along with the matching author and time of submit
</code></pre>
","100297","","100297","","2015-07-06 17:38:58","2015-07-06 17:38:58","","","","1","","",""
"31252343","2","","31252107","2015-07-06 17:45:07","","0","","<p>Could you try calling <a href=""http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.draw"" rel=""nofollow""><code>plt.draw</code></a> after plt.vlines? plt.draw is used to interactively redraw the figure after its been modified.</p>
","3416123","","","","","2015-07-06 17:45:07","","","","1","","",""
"31254208","2","","31252107","2015-07-06 19:37:47","","2","","<p>If I understood well, you want to use the <a href=""http://matplotlib.org/api/animation_api.html#animation"" rel=""nofollow noreferrer"">animation</a> tools of matplotlib. An example (adapted from the <a href=""http://matplotlib.org/1.4.2/examples/animation/basic_example.html"" rel=""nofollow noreferrer"">doc</a>): </p>

<pre><code>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

X_MIN = -6
X_MAX = 6
Y_MIN = -1
Y_MAX = 1
X_VALS = range(X_MIN, X_MAX+1);

def update_line(num, line):
    i = X_VALS[num]
    line.set_data( [i, i], [Y_MIN, Y_MAX])
    return line, 

fig = plt.figure()

x = np.arange(X_MIN, X_MAX, 0.1);
y = np.sin(x)

plt.scatter(x, y)

l , v = plt.plot(-6, -1, 6, 1, linewidth=2, color= 'red')

plt.xlim(X_MIN, X_MAX)
plt.ylim(Y_MIN, Y_MAX)
plt.xlabel('x')
plt.ylabel('y = sin(x)')
plt.title('Line animation')

line_anim = animation.FuncAnimation(fig, update_line, len(X_VALS),\   
                                    fargs=(l, ), interval=100,\
                                    blit=True, repeat=False)

#line_anim.save('line_animation.gif', writer='imagemagick', fps=4);

plt.show()
</code></pre>

<p>Resulting gif looks like this:</p>

<p><img src=""https://i.stack.imgur.com/XJ0dV.gif"" alt=""line animation with matplotlib""></p>
","4709400","","","","","2015-07-06 19:37:47","","","","4","","",""
"31252286","2","","31252155","2015-07-06 17:41:53","","1","","<p>Try using a string for <code>fk_name</code>:</p>

<pre><code>fk_name = 'linea'
</code></pre>

<p>As an aside, I recommend that you use the Django convention, and name your models <code>SensorAsignado</code> and <code>Linea</code> instead of <code>sensor_asignado</code> and <code>linea</code>. It will make your code easier to understand for other Django users.</p>
","113962","","113962","","2015-07-06 18:02:03","2015-07-06 18:02:03","","","","3","","",""
"31252430","2","","31252263","2015-07-06 17:50:10","","3","","<p>The inefficient way to do this is to use a loop:</p>

<pre><code>def fibR(n):
    if n == 1 or n ==2:
        return 1
    return fibR(n-1) + fibR(n-2)

for i in range(1,6):
    print(fibR(i))
</code></pre>

<p>However, this is inefficient because it will calculate the lower Fibonacci numbers more than once. You can use an array to store the intermediate Fibonacci numbers and improve performance:</p>

<pre><code>def fibR(n):
    if n &gt; len(fibR.values) - 1:
        for i in range(len(fibR.values), n+1):
            fibR.values.append(fibR(i-2) + fibR(i-1))
    return fibR.values[n]

fibR.values = [0, 1, 1]
for i in range(1,6):
    print(fibR(i))
</code></pre>
","72631","","72631","","2015-07-06 17:56:38","2015-07-06 17:56:38","","","","0","","",""
"31252916","2","","31252263","2015-07-06 18:19:23","","0","","<p>A basic (but not na√Øve) recursive Fibonacci solution is as follows:</p>

<pre><code>&gt;&gt;&gt; def fib(num, first=0, second=1):
...     if not num: return second
...     return fib(num-1, second, first+second)
...
&gt;&gt;&gt; fib(5)
8
</code></pre>

<p>You can save the intermediate values in two ways: create a <code>list</code> and <code>append()</code> to it, or have your function <code>return</code> a <code>tuple</code>.</p>

<p>Method 1:</p>

<pre><code>&gt;&gt;&gt; def fibl(num, first=0, second=1):
...     results.append(second)
...     if not num: return
...     return fibl(num-1, second, first+second)
...
&gt;&gt;&gt; results = []
&gt;&gt;&gt; fibl(5)
&gt;&gt;&gt; results
[1, 1, 2, 3, 5, 8]
</code></pre>

<p>Method 2:</p>

<pre><code>&gt;&gt;&gt; def fibr(num, first=0, second=1, *results):
...     if not num: return results+(second,)
...     return fibr(num-1, second, first+second, *(results + (second,)))
...
&gt;&gt;&gt; fibr(5)
(1, 1, 2, 3, 5, 8)
</code></pre>
","2617068","","","","","2015-07-06 18:19:23","","","","0","","",""
"31252323","2","","31252265","2015-07-06 17:43:58","","3","","<p>The line:</p>

<pre><code>drive_usage.split()
</code></pre>

<p>should be:</p>

<pre><code>drive_usage = drive_usage.split()
</code></pre>

<p>As the string method <code>.split()</code> returns a list, whereas you are expecting it to replace the string with a list of its parts which doesn't happen.</p>
","388787","","","","","2015-07-06 17:43:58","","","","0","","",""
"31252433","2","","31252284","2015-07-06 17:50:18","","2","","<p>This looks like a typo in the import statement. <code>datatime</code> should be <code>datetime</code> (a -> e).</p>
","61539","","","","","2015-07-06 17:50:18","","","","0","","",""
"31252368","2","","31252296","2015-07-06 17:46:08","","4","","<p>You can just concatenate another tuple to the end.</p>

<pre><code>x = ('a','b','c')
if Y:
    x += ('d',)
if Z:
    x += ('e',)
print(x)
</code></pre>
","3059812","","","","","2015-07-06 17:46:08","","","","0","","",""
"31252370","2","","31252296","2015-07-06 17:46:34","","0","","<p>One solution would be to concatenate tuples.</p>

<pre><code>x = ('a', 'b', 'c') + (('d',) if Y else ()) + (('e',) if Z else ())
</code></pre>

<p>One benefit of doing it this way is it's an expression thus usable inside a lambda.</p>
","788887","","788887","","2015-07-06 18:06:52","2015-07-06 18:06:52","","","","0","","",""
"31252386","2","","31252296","2015-07-06 17:47:11","","1","","<p>Another way is to make a list, then convert the list to a tuple by calling <code>tuple(lst)</code>.</p>
","5045738","","","","","2015-07-06 17:47:11","","","","0","","",""
"31252422","2","","31252296","2015-07-06 17:49:35","","3","","<p>One way to do it - useful if you're going to be generating the contents of the <code>tuple</code> a lot - is with a generator: </p>

<pre><code>def gen_X():
    yield 'a'
    yield 'b'
    yield 'c'
    if Y:
        yield 'd'
    if Z:
        yield 'e'
</code></pre>

<p>Then make a <code>tuple</code> from the generator results: </p>

<pre><code>X = tuple(gen_X())
</code></pre>

<p>With a slightly modified version you can also supply the arguments which determine what the generator will produce: </p>

<pre><code>def gen_X(Y = True, Z = True):
    yield 'a'
    yield 'b'
    yield 'c'
    if Y:
        yield 'd'
    if Z:
        yield 'e'
</code></pre>

<p>One nice thing about doing it with a generator is that you don't have to keep multiple sets of the tuple in memory - both the contents and the logic are contained in the generator. So you can be simultaneously iterating through lots of different versions of the same data, but it's all contained in only one location and generated on the fly as you need it. </p>
","2437514","","2437514","","2015-07-06 17:55:05","2015-07-06 17:55:05","","","","1","","",""
"31252465","2","","31252296","2015-07-06 17:52:13","","1","","<p>Python does not provide this kind of syntactic sugar.
The easiest way to solve your problem is to use a list. Then you can use <code>my_list.append()</code>, and finally, when you need a tuple, make a tuple out of it: <code>tuple(my_list)</code>. (<code>INSTALLED_APPS = tuple(my_list)</code>)</p>
","4370639","","","","","2015-07-06 17:52:13","","","","0","","",""
"31252611","2","","31252296","2015-07-06 18:01:39","","0","","<p>You can do something like this using a generator expression: </p>

<pre><code>truth_table = {'a': True, 'b': True, 'c': True, 'd': Y, 'e': Z}
X = tuple(k for k,v in sorted(truth_table.items()) if v)
</code></pre>

<p>...or in one line:</p>

<pre><code>X = tuple(k for k,v in sorted({'a': True, 'b': True, 'c': True, 'd': Y, 'e': Z}.items()) if v)
</code></pre>
","2437514","","2437514","","2015-07-06 18:07:22","2015-07-06 18:07:22","","","","0","","",""
"31255642","2","","31252320","2015-07-06 21:06:53","","1","","<p>The problem likely is in the terminal emulator, resetting colors after the tab-characters (which would be a bug).  If you change the tabs so that only spaces are written, it would work around that possibility.</p>

<p>By the way, if your terminal was set to use <em>hard tabs</em>, then you could expect some other unexpected behavior (the tabbed area would be <em>skipped</em> and not colored).  Here is a screenshot (with the script to demonstrate):
<img src=""https://i.stack.imgur.com/woPYk.png"" alt=""enter image description here""></p>
","4518274","","4518274","","2015-07-06 21:44:32","2015-07-06 21:44:32","","","","2","","",""
"31271453","2","","31252320","2015-07-07 14:28:22","","0","","<p>I still am not sure what the problem might be, but adding a <code>sys.stdout.flush()</code> at the beginning of the <code>for</code> loop seems to have fixed things.</p>

<pre><code>CSI='\x1B['
reset=CSI+'m'
import sys

for i in range(len(recs)):
    sys.stdout.flush()
    print CSI+'36;40m' + str(i+1) + '\t\t', recTitles[i], CSI+'33;40m' + recReleaseYears[i] + reset
    print CSI+'35;40m' + u'\u2588' + 'IMDb Rating:\t' + reset, recRatings[i], '('+recVotes[i]+' votes)'
    print CSI+'34;40m' + u'\u2588' + 'Genre:\t\t' + reset, CSI+'36;1m' + recGenres[i] + reset
    print CSI+'33;40m' + u'\u2588' + 'Cast:\t\t' + reset, recCast[i]
    print CSI+'32;40m' + u'\u2588' + 'Director:\t' + reset, recDirectors[i]
    print CSI+'36;40m' + u'\u2588' + 'Summary:\t' + reset, insertTabs(recPlots[i]) + reset
    print CSI+'31;40m' + u'\u2588' + 'IMDb Link:\t' + reset, CSI+'34;1m' + recIMDbLinks[i] + '\n' + reset
</code></pre>
","1768141","","","","","2015-07-07 14:28:22","","","","1","","",""
"31260634","2","","31252353","2015-07-07 05:44:24","","1","","<p>You can use the uWSGI alarm subsystem:</p>

<p><a href=""http://uwsgi-docs.readthedocs.org/en/latest/AlarmSubsystem.html"" rel=""nofollow"">http://uwsgi-docs.readthedocs.org/en/latest/AlarmSubsystem.html</a></p>

<p>the --alarm-backlog function will trigger an alarm whenever the listen queue is full, this alarm can be an ad-hoc script calling aws api to scale</p>
","966211","","","","","2015-07-07 05:44:24","","","","0","","",""
"31252408","2","","31252359","2015-07-06 17:48:28","","1","","<p>You're using Python 2. In Python 2, <a href=""https://docs.python.org/2/library/functions.html#input"" rel=""nofollow""><code>input</code></a> takes your input and tries to evaluate it. You want to use <a href=""https://docs.python.org/2/library/functions.html#raw_input"" rel=""nofollow""><code>raw_input</code></a>.</p>
","3059812","","","","","2015-07-06 17:48:28","","","","1","","",""
"31252413","2","","31252359","2015-07-06 17:48:43","","3","","<p>I am guessing you are using <code>Python 2.x</code> , in Python 2.x , <a href=""https://docs.python.org/2/library/functions.html#input"" rel=""nofollow""><code>input</code></a> actually tries to evaluate the input before returning the result, hence if you put in some name , it will treat that as a variable and try to get its value causing the issue.</p>

<p>Use <a href=""https://docs.python.org/2/library/functions.html#raw_input"" rel=""nofollow""><code>raw_input()</code></a>. instead. Example -</p>

<pre><code>participant = raw_input(""Participant name &gt; "")
....
score = raw_input(""Score for "" + participant + ""&gt; "")
</code></pre>
","795990","","4311994","","2015-07-06 17:51:58","2015-07-06 17:51:58","","","","2","","",""
"31252607","2","","31252360","2015-07-06 18:01:28","","0","","<p>You can use the existing <code>pygame</code> module. Import a file into a <code>Surface</code> using <code>pygame.image.load</code>. You can then access the bit array from this using <code>pygame.surfarray.array2d</code>. Please see the Pygame docs for more information.</p>
","3325465","","","","","2015-07-06 18:01:28","","","","0","","",""
"31252776","2","","31252360","2015-07-06 18:11:27","","2","","<p>If you have <code>PIL</code> installed then you can create an image with <code>Image.open</code> and get the colors like so:</p>

<pre><code>data = [image.getpixel((x, y)) for x in range(image.width) for y in range(image.height)]
</code></pre>
","4338920","","","","","2015-07-06 18:11:27","","","","1","","",""
"31253142","2","","31252360","2015-07-06 18:34:53","","0","","<p>You can use <a href=""http://docs.wand-py.org/en/0.4.0/"" rel=""nofollow""><code>wand</code></a> for such basic tasks.  The syntax is very easy to read unlike other ImageMagik libs.  Basically you'd do something like:</p>

<pre><code>from wand.image import Image
from wand.display import display

array = []
with Image(filename='yourfile.png') as img:
    array.append(img.channel_images)        # this is most likely wrong, but it should be something similar
</code></pre>

<p>It will be along those lines. Once I leave the office I will try this out.</p>
","2172464","","","","","2015-07-06 18:34:53","","","","0","","",""
"31253296","2","","31252473","2015-07-06 18:43:03","","0","","<p>The compiler doesn't use the <code>PATH</code> environment variable for finding header files.  Usually it uses <code>INCLUDE</code>.</p>

<p>I think you can pass this into nmake, like so</p>

<p><code>nmake INCLUDE=pathToPythonHeader -f ap24py27-win64-VC9.mk</code></p>
","3937","","","","","2015-07-06 18:43:03","","","","1","","",""
"31259320","2","","31252473","2015-07-07 03:38:55","","0","","<p>Why are you trying to compile it from source code? Why aren't you using the precompiled binaries?</p>

<p>There is nothing additional in the latter release that you would really need on Windows, so just grab and use the latest binary version which at this time is 4.4.12.</p>

<p>You also can't do a 'python setup.py install' nor a 'pip install' on Windows.</p>

<p>If you really do for some unknown reason need to build from source code, you do at least need to modify the <code>ap24py27-win64-VC9.mk</code> file and override the locations for where Python and Apache is installed. The default locations are based on a non standard layout that allows me to have many different Python and Apache versions installed for different architectures at the same time.</p>
","128141","","","","","2015-07-07 03:38:55","","","","2","","",""
"31343406","2","","31253148","2015-07-10 14:30:50","","0","","<p>I believe the .addSample() method expects one sample at a time. Rather than using .addSample(), try</p>

<pre><code>assert(X.shape[0] == y.shape[0])
DS.setField('input', X)
DS.setField('target', y)
</code></pre>

<p>The 'assert()' is recommended because the .setField() method does not verify array dimensions like .addSample() does.</p>

<p>See <a href=""http://pybrain.org/docs/tutorial/datasets.html"" rel=""nofollow"">Pybrain dataset tutorial</a> for more info.</p>
","5103316","","","","","2015-07-10 14:30:50","","","","0","","",""
"31253471","2","","31253156","2015-07-06 18:54:16","","1","","<p>If there are only two levels, then you can use list comprehension , like this -</p>

<pre><code>In [12]: df = pd.DataFrame([[slide, item[0], item[1], ''] if item[0] == '1' else [slide, item[0], '', item[1]] 
for slide, item in d.items()], columns=['Slide', 'Level', 'Level1 Title', 'Level2 Title'])

In [13]: df
Out[13]:
   Slide Level Level1 Title Level2 Title
0      1     2                     Pepsi
1      3     1       Pepper
</code></pre>
","795990","","","","","2015-07-06 18:54:16","","","","1","","",""
"31253676","2","","31253156","2015-07-06 19:06:35","","1","","<p>I'd suggest you start with your DataFrame like you have already got:</p>

<pre><code>slide   level    level_title
1       2         Pepsi
3       1         Pepper
</code></pre>

<p>Add a couple of columns with nothing in them:</p>

<pre><code>In [24]: df['level1'] = pd.np.nan

In [25]: df['level2'] = pd.np.nan
</code></pre>

<p>Then set the values as needed with some conditional wizardry:</p>

<pre><code>In [40]: df.loc[df['level'] == 2, 'level1'] = df.level_title

In [41]: df.loc[df['level'] == 1, 'level2'] = df.level_title

In [42]: df
Out[42]: 
   slide  level level_title level1  level2
0      1      2       Pepsi  Pepsi     NaN
1      3      1      Pepper    NaN  Pepper
</code></pre>

<p><em>(Spot the 'deliberate' mistake that I put the levels and the titles the wrong way round. But you get the idea!)</em></p>
","2071807","","","","","2015-07-06 19:06:35","","","","0","","",""
"31257416","2","","31253163","2015-07-06 23:33:19","","3","","<p>Your main issue is probably just reshaping your data so that you have date along one dimension and time along the other.  Once you do that you can use whatever plotting you like best (here I've used matplotlib's mplot3d, but it has some quirks).</p>

<p>What follows takes your data and reshapes it appropriately so you can then plot a surface that I believe is what your are looking for.  The key is using the <code>pivot</code> method, which restructures your data by date and time.</p>

<pre><code>import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d

fname = 'total_watt.csv'

# Read in the data, but I skipped setting the index and made sure no data
# is lost to a nonexistent header
df = pd.read_csv(fname, parse_dates=[0], header=None, names=['datetime', 'watt'])

# We want to separate the date from the time, so create two new columns
df['date'] = [x.date() for x in df['datetime']]
df['time'] = [x.time() for x in df['datetime']]

# Now we want to reshape the data so we have dates and times making the result 2D
pv = df.pivot(index='time', columns='date', values='watt')

# Not every date has every time, so fill in the subsequent NaNs or there will be holes
# in the surface
pv = pv.fillna(0.0)

# Now, we need to construct some arrays that matplotlib will like for X and Y values
xx, yy = np.mgrid[0:len(pv),0:len(pv.columns)]

# We can now plot the values directly in matplotlib using mplot3d
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.plot_surface(xx, yy, pv.values, cmap='jet', rstride=1, cstride=1)
ax.grid(False)

# Now we have to adjust the ticks and ticklabels - so turn the values into strings
dates = [x.strftime('%Y-%m-%d') for x in pv.columns]
times = [str(x) for x in pv.index]

# Setting a tick every fifth element seemed about right
ax.set_xticks(xx[::5,0])
ax.set_xticklabels(times[::5])
ax.set_yticks(yy[0,::5])
ax.set_yticklabels(dates[::5])

plt.show()
</code></pre>

<p>This gives me (using your data) the following graph:</p>

<p><img src=""https://i.stack.imgur.com/UDbyo.png"" alt=""3D surface plot of clustered data""></p>

<p>Note that I've assumed when plotting and making the ticks that your dates and times are linear (which they are in this case).  If you have data with uneven samples, you'll have to do some interpolation before plotting.</p>
","3100515","","3100515","","2017-04-04 15:52:59","2017-04-04 15:52:59","","","","5","","",""
"31253274","2","","31253229","2015-07-06 18:41:38","","2","","<p>You're creating two, since <code>Toplevel()</code> is the constructor call:</p>

<pre><code>Toplevel()
Toplevel().wm_title(""Directory"")
</code></pre>

<p>Instead, create one and save it:</p>

<pre><code>top = Toplevel()
top.wm_title(""Directory"")
</code></pre>
","2617068","","","","","2015-07-06 18:41:38","","","","2","","",""
"31256103","2","","31256091","2015-07-06 21:38:41","","1","","<p>You can pass count as <code>1</code> to replace to only replace one occurrence.</p>

<pre><code>temp_word2 = temp_word.replace(i, """",1)
</code></pre>

<p>You could also just slice the last letter off:</p>

<pre><code>for i in reversed(word):
    temp_word2 = temp_word[:-1]
</code></pre>
","2141635","","","","","2015-07-06 21:38:41","","","","2","","",""
"31256205","2","","31256091","2015-07-06 21:45:51","","1","","<p>Do you <em>have</em> to use a tempvariable, or are you allowed to just use string slicing?</p>

<pre><code>for i in range(1,len(word)+1):
    print(word[:i])

for i in range(len(word)-1,0,-1): #the third argument of range is step, and -1 causes range to step backwards
    print(word[:i])
</code></pre>
","5031339","","5031339","","2015-07-06 22:06:19","2015-07-06 22:06:19","","","","4","","",""
"31256220","2","","31256091","2015-07-06 21:47:01","","1","","<p>Here is a solution, it's not the best. Depending of what you want to do with this, I can provide a more specific solution</p>

<pre><code>word = 'hello'
temp_word = ''
temp_word2 = ''

for k in word:
    temp_word += k
    print temp_word
while temp_word:
    temp_word = temp_word[:-1]
    print temp_word 
</code></pre>

<p><strong>EDIT</strong></p>

<p>I prefer this version more</p>

<pre><code>word = 'hello'
for k in list(range(1,len(word)+1)) + list(range(len(word)-1,1,-1)):
    print word[:k]
</code></pre>
","1841852","","1841852","","2015-07-06 22:34:26","2015-07-06 22:34:26","","","","0","","",""
"31273784","2","","31256157","2015-07-07 16:03:10","","1","","<p>It seems like rowsInserted signal emits after rows were inserted, but before model fills data in inserted rows.
So I call printSomeData function from dropMimeData function (after data was dropped) and it works.</p>

<p>Here corrected code:</p>

<pre><code>class PlModel(QtGui.QStandardItemModel):
    def __init__(self):
        QtGui.QStandardItemModel.__init__(self)
        # no need for connect
        #self.rowsInserted.connect(self.printSomeData)

    def supportedDragActions(self):
        return QtCore.Qt.MoveAction

    def supportedDropActions(self):
        return QtCore.Qt.CopyAction | QtCore.Qt.MoveAction

    def canDropMimeData(self, QMimeData, Qt_DropAction, p_int, p_int_1, QModelIndex):
        if not self.itemFromIndex(QModelIndex) and p_int_1 == p_int == -1:
            return False
        elif QModelIndex.isValid():
            if self.item(self.itemFromIndex(QModelIndex).row(), 0) is None:
                return False
            else:
                return QtGui.QStandardItemModel.canDropMimeData(self, QMimeData, Qt_DropAction, p_int, p_int_1, QModelIndex)
        else:
            return QtGui.QStandardItemModel.canDropMimeData(self, QMimeData, Qt_DropAction, p_int, p_int_1, QModelIndex)

    def dropMimeData(self, mimedata, dropaction, row, col, modelindex):
        if not self.itemFromIndex(modelindex):
            if row == col == -1:
                return False    
            else:
                result = QtGui.QStandardItemModel.dropMimeData(self, mimedata, dropaction, row, 0, self.index(row, 0))
                if result:
                    self.printSomeData(self.index(row, 0))
                return result
        elif self.itemFromIndex(modelindex).isDragEnabled():
            if row == col == -1:
                crow = self.item(modelindex.row(), 0).rowCount()
                result = QtGui.QStandardItemModel.dropMimeData(self, mimedata, dropaction, crow, 0, self.indexFromItem(self.item(modelindex.row(), 0)))
                if result:
                    self.printSomeData(self.indexFromItem(self.item(modelindex.row(), 0)))
                return result
            else:
                result = QtGui.QStandardItemModel.dropMimeData(self, mimedata, dropaction, row, 0, modelindex)
                if result:
                    self.printSomeData(modelindex)
                return result
        elif self.itemFromIndex(modelindex).isDropEnabled():
            if col != -1:
                return False
            else:
                result = QtGui.QStandardItemModel.dropMimeData(self, mimedata, dropaction, row, 0, modelindex)
                if result:
                    self.printSomeData(modelindex)
                return result
        else:
            result = QtGui.QStandardItemModel.dropMimeData(self, mimedata, dropaction, row, 0, modelindex)
                if result:
                    self.printSomeData(modelindex)
                return result

    def printSomeData(self, ind: QtCore.QModelIndex):
        row = ind.row()
        item = self.itemFromIndex(ind)
        for i in range(0, item.rowCount()):
            print(self.index(i, 0, ind).data(QtCore.Qt.DisplayRole))
</code></pre>
","5087016","","","","","2015-07-07 16:03:10","","","","0","","",""
"31256227","2","","31256159","2015-07-06 21:47:57","","4","","<p>IIUC, you could use <code>itertools.accumulate</code> to generate a forward fill:</p>

<pre><code>&gt;&gt;&gt; from itertools import accumulate
&gt;&gt;&gt; a = [None,1,2,3,None,4,None,None]
&gt;&gt;&gt; list(accumulate(a, lambda x,y: y if y is not None else x))
[None, 1, 2, 3, 3, 4, 4, 4]
</code></pre>
","487339","","","","","2015-07-06 21:47:57","","","","1","","",""
"31256231","2","","31256159","2015-07-06 21:48:04","","0","","<p>Here's some code that will do what you want in place, if you don't want it in place then just pass it <code>list(my_list)</code> instead of <code>my_list</code>.</p>

<pre><code>def replaceNoneWithLeftmost(val):
    for i in range(len(val)):
        if val[i] is None:
            for j in range(i-1, -1, -1):
                if val[j] is not None:
                    val[i] = val[j]
                    break
    for i in range(len(val)):
        if val[i] is None:
            for j in range(i+1, len(val)):
                if val[j] is not None:
                    val[i] = val[j]
                    break
    return val
</code></pre>

<p>Also, if using python2, use <code>xrange</code> instead of <code>range</code>.</p>
","1695766","","","","","2015-07-06 21:48:04","","","","0","","",""
"31256246","2","","31256159","2015-07-06 21:48:50","","2","","<pre><code>a = [None,1,2,3,None,4,None,None]

start = next(ele for ele in a if ele is not None)
for ind, ele in enumerate(a):
    if ele is None:
        a[ind] = start
    else:
        start = ele
print(a)
[1, 1, 2, 3, 3, 4, 4, 4]
</code></pre>

<p>You also only need to set start to a value if the first element is None:</p>

<pre><code>if a[0] is None:
   start = next(ele for ele in a if ele is not None)
for ind, ele in enumerate(a):
    if ele is None:
        a[ind] = start
    else:
        start = ele
print(a)
</code></pre>
","2141635","","2141635","","2015-07-06 21:54:35","2015-07-06 21:54:35","","","","0","","",""
"31256466","2","","31256159","2015-07-06 22:04:54","","0","","<pre><code>a = [None,1,2,3,None,4,None,None]

first = True
for i in range(len(a)):
    if first:
        if a[i] != None:
            a[:i] = [a[i] for _ in range(i)]
            first = False
    if a[i] == None:
        a[i] = a[i-1]

print a
</code></pre>

<p><strong>OUT:</strong></p>

<pre><code>[1, 1, 2, 3, 3, 4, 4, 4]
</code></pre>
","4592059","","","","","2015-07-06 22:04:54","","","","0","","",""
"31265221","2","","31256174","2015-07-07 09:48:22","","0","","<p><code>django-lazysignup</code>, which you are using, allows you to deliver a custom LazyUser class (<a href=""https://github.com/danfairs/django-lazysignup/blob/master/lazysignup/constants.py#L4"" rel=""nofollow"">here</a>). All you need to do is to write a subclass of <code>lazysignup.models.LazyUser</code> with defined <code>is_authenticated</code> method and set it as <code>settings.LAZYSIGNUP_USER_MODEL</code>.</p>

<p>But this is not the end of your troubles. Lots of django apps 
assume that authenticated user has some properties. Mainly, <code>is_staff</code>, <code>is_superuser</code>, <code>permissions</code>, <code>groups</code>. First and foremost, <code>django.contrib.admin</code> needs them to check if it can let the user in and what to show him. Look how <a href=""https://github.com/django/django/blob/master/django/contrib/auth/models.py#L374"" rel=""nofollow""><code>django.contrib.auth.models.AnonymousUser</code></a> mocks them and copy it. Remark: look how <code>AnonymousUser</code> is <strong>not</strong> subclassing any user class nor <code>db.Model</code>. Supplied user class only needs to quack.</p>
","2405388","","","","","2015-07-07 09:48:22","","","","2","","",""
"32236034","2","","31256174","2015-08-26 20:22:40","","0","","<p>Ended up just having to replace all calls to User.is_authenticated().</p>

<p>To prevent django-allauth from redirecting lazy-users from the login page, this ended up looking something like this:</p>

<pre><code>from allauth.account.views import AjaxCapableProcessFormViewMixin

def _ajax_response(request, response, form=None):
    if request.is_ajax():
        if (isinstance(response, HttpResponseRedirect)
            or isinstance(response, HttpResponsePermanentRedirect)):
            redirect_to = response['Location']
        else:
            redirect_to = None
        response = get_adapter().ajax_response(request,
                                           response,
                                           form=form,
                                           redirect_to=redirect_to)
    return response


class RedirectUserWithAccountMixin(object):
    def dispatch(self, request, *args, **kwargs):
        self.request = request
        if user_has_account(request.user):
            redirect_to = self.get_authenticated_redirect_url()
            response = HttpResponseRedirect(redirect_to)
            return _ajax_response(request, response)
        else:
            response = super(RedirectUserWithAccountMixin,
                             self).dispatch(request,
                                            *args,
                                            **kwargs)
        return response

    def get_authenticated_redirect_url(self):
        redirect_field_name = self.redirect_field_name
        return get_login_redirect_url(self.request,
                                      url=self.get_success_url(),
                                      redirect_field_name=redirect_field_name)

class LoginView(RedirectUserWithAccountMixin,
            AjaxCapableProcessFormViewMixin,
            FormView):
...
</code></pre>

<p>Where user_has_account() was my own method for checking whether the user was actually signed in.</p>
","3043898","","","","","2015-08-26 20:22:40","","","","0","","",""
"31257573","2","","31256238","2015-07-06 23:52:43","","2","","<p>If your <a href=""https://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Session.execute"" rel=""nofollow"">session.execute</a> writes were not successful (they did not meet the required consistency level), then the driver will raise one of the following exceptions:</p>

<ol>
<li><a href=""https://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Session.execute"" rel=""nofollow"">Unavailable</a> - There were not enough live replicas to satisfy the requested consistency level, so the coordinator node immediately failed the request without forwarding it to any replicas.</li>
<li><a href=""https://datastax.github.io/python-driver/api/cassandra.html#cassandra.Timeout"" rel=""nofollow"">Timeout</a> - Replicas did not respond to the coordinator before cassandra timeout.</li>
<li><a href=""https://datastax.github.io/python-driver/api/cassandra.html#cassandra.WriteTimeout"" rel=""nofollow"">Write timeout</a> - Replicas did not respond to the coordinator before the write timeout. Configured in cassandra.yaml. There is a similar timeout for reads, read and write timeouts are configured separately in the yaml.</li>
<li><a href=""https://datastax.github.io/python-driver/api/cassandra.html#cassandra.OperationTimedOut"" rel=""nofollow"">Operation timeout</a> - Operation took longer than the specified client side timeout. Configure in your application code.</li>
</ol>

<p>You can try <a href=""https://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.get_query_trace"" rel=""nofollow"">tracing</a> your queries and find out what exactly happened for each write. This will show you the coordinators and the replica nodes involved in the operation and how much time the request spent in each.</p>
","3957972","","","","","2015-07-06 23:52:43","","","","2","","",""
"31257909","2","","31256252","2015-07-07 00:31:31","","16","","<p><code>np.linalg.solve(A, b)</code> does <em>not</em> compute the inverse of <em>A</em>. Instead it calls one of the <a href=""http://www.netlib.org/lapack/double/dgesv.f"" rel=""nofollow noreferrer""><code>gesv</code> LAPACK routines</a>, which first factorizes <em>A</em> using LU decomposition, then solves for <em>x</em> using forward and backward substitution (see <a href=""https://en.wikipedia.org/wiki/LU_decomposition#Solving_linear_equations"" rel=""nofollow noreferrer"">here</a>).</p>

<p><code>np.linalg.inv</code> uses the same method to compute the inverse of <em>A</em> by solving for <em>A<sup>-1</sup></em> in <em>A¬∑A<sup>-1</sup> = I</em> where <em>I</em> is the identity*. The factorization step is exactly the same as above, but it takes more floating point operations to solve for <em>A<sup>-1</sup></em> (an <em>n√ón</em> matrix) than for <em>x</em> (an <em>n</em>-long vector). Additionally, if you then wanted to obtain <em>x</em> via the identity <em>A<sup>-1</sup>¬∑b = x</em> then the extra matrix multiplication would incur yet more floating point operations, and therefore slower performance and more numerical error.</p>

<p>There's no need for the intermediate step of computing <em>A<sup>-1</sup></em> - it is  faster and more accurate to obtain <em>x</em> directly.</p>

<hr>

<p>* The relevant bit of source for <code>inv</code> is <a href=""https://github.com/numpy/numpy/blob/master/numpy/linalg/umath_linalg.c.src#L1727-L1729"" rel=""nofollow noreferrer"">here</a>. Unfortunately it's a bit tricky to understand since it's templated C. The important thing to note is that an identity matrix is being passed to the LAPACK solver as parameter <code>B</code>.</p>
","1461210","","1461210","","2017-09-22 13:54:03","2017-09-22 13:54:03","","","","0","","",""
"31257236","2","","31256269","2015-07-06 23:12:15","","1","","<p>[Updated answer]</p>

<p>The problem comes in when the 'request' object's url is used by webapp2:</p>

<pre><code>if uri.startswith(('.', '/')):
    request = request or get_request()
    uri = str(urlparse.urljoin(request.url, uri))
</code></pre>

<p>In this case you are overriding the RequestHandler's 'self.request' attribute with your own (to call GitHub):</p>

<pre><code>self.request = urllib2.Request(GITHUB_URL_ACCESSTOKEN, self.data)
</code></pre>

<p>I surmise that there is no 'url' on this new request object.</p>

<p>I suggest that you use a different variable name, or don't store the Github request on 'self'.</p>

<p>=======================</p>

<p>[Old answer]</p>

<p>Going out on a limb here based on the given info, but is your handler class extending webapp2.RequestHandler? If not the url attribute may not exist in 'self'.</p>

<p>Please include your handler class definition and your (minimal) handler method if this is not the case.</p>

<p>ie:</p>

<pre><code>class SomeHandler(webapp2.RequestHandler):
   ...
</code></pre>
","4065182","","4065182","","2015-07-06 23:57:18","2015-07-06 23:57:18","","","","2","","",""
"31256350","2","","31256286","2015-07-06 21:56:11","","3","","<p>Let <code>'movies'</code> be a dict and not a list:</p>

<pre><code>{
    ""movies"": {
        ""12"": {
            ""name"": ""charles"",
            ""id"": 12, 
            ""loopable"": true
        },
        ""39"": {
            ""name"": ""ray"",
            ""id"": 39, 
            ""loopable"": true
        }
    }
} 
</code></pre>

<p>and you can access movie by id with <code>yourjson['movies'][str(id)]</code></p>
","1044117","","1044117","","2015-07-06 22:08:25","2015-07-06 22:08:25","","","","2","","",""
"31256426","2","","31256360","2015-07-06 22:01:26","","3","","<p>Pass arguments to the function that is ran by a <code>Process</code> is done differently - looking at the <a href=""https://docs.python.org/2/library/multiprocessing.html"" rel=""nofollow"">documentation</a> it shows:</p>

<pre><code>from multiprocessing import Process

def f(name):
    print 'hello', name

if __name__ == '__main__':
    p = Process(target=f, args=('bob',)) # that's how you should pass arguments
    p.start()
    p.join()
</code></pre>

<p>Or in your case:</p>

<pre><code>from multiprocessing import Process
from time import sleep

def a(x):
    sleep(x)
    print (""goo"")

e = Process(target=a, args=(3,))
b = Process(target=a, args=(5,))
c = Process(target=a, args=(8,))
d = Process(target=a, args=(10,))

if __name__ == ""__main__"":
    e.start()
    b.start()
    c.start()
    d.start()
</code></pre>

<p><strong>Addition:</strong><br>
Good catch by Luke (in the comments below) - you're overriding the function <code>a</code> with the variable name <code>a</code> when doing:</p>

<pre><code>a = Process(target=a, args=(3,))
</code></pre>

<p>You should use a different name.</p>
","1057429","","1057429","","2015-07-06 22:11:00","2015-07-06 22:11:00","","","","4","","",""
"31256671","2","","31256397","2015-07-06 22:21:29","","2","","<p>Keep a boolean hashtable of hash codes of lines already seen.</p>

<p>For each line:</p>

<ul>
<li><p>if line hash()es to something you have already seen, you have a potential match: scan the file to check if it really is a duplicate.</p></li>
<li><p>if line hash()es to a new hash, just mark the hash for the first time.</p></li>
</ul>

<p>Dedicate as much memory you can to this hashtable, and the false positive rate will be low (i.e. less times you will have to scan for duplicates and found none).</p>

<p>Example:</p>

<pre><code>table_size = 2**16
seen = [False]*table_size
for line in file:
    h = hash(line) % table_size
    if seen[h]:
        dup = False
        with open('yourfile','r') as f:
            for line1 in f:
                if line == line1:
                    dup = True
                    break
            if not dup:
                print(line)
    else:
        seen[h] = True
        print(line)
</code></pre>

<p>As it has been pointed out, since you cannot store all the lines in memory you don't have many options, but at least this option doesn't require to scan the file for every single line, because most of the entries in the table will be False, i.e. the algorithm is sub-quadratic if the tabe is not full; it will degenerate to O(n<sup>2</sup>) once the table is full.</p>

<p>You can make a very memory-efficient implementation of the hash table, that requires only 1 bit for each hash code (e.g. make it an array of bytes, where each byte can store 8 boolean values)</p>

<hr>

<p>See also <a href=""https://en.wikipedia.org/wiki/Bloom_filter"" rel=""nofollow"">Bloom Filters</a> for more advanced techniques.</p>
","1044117","","1044117","","2015-07-06 22:41:31","2015-07-06 22:41:31","","","","2","","",""
"31256687","2","","31256397","2015-07-06 22:22:29","","1","","<p>One fairly straightforward way - make a version of your data such that each line includes a field with its line number. Use unix 'sort' to sort that new file, excluding the line number field. The sort utility will merge sort the file even if it exceeds the size of available memory. Now you have a new file in which the duplicates are ordered, along with their original line numbers. Extract the line numbers of the duplicates and then use that as input for linearly processing your original data. </p>

<p>In more detailed steps. </p>

<ul>
<li>Make a new version of your file such that each line is prepended by its line number. So, ""someline"" becomes ""1, someline"" </li>
<li>sort this file using the unix sort utility  - sort -t"","" -k2,2 file</li>
<li>Scan the new file for consecutive duplicate entries in the second field</li>
<li>the line numbers (first field) of such entries are the line numbers of duplicate lines in your original file - extract these and use them as input to remove duplicates in the original data. Since you know exactly where they are, you need not read in the entire file or create a giant in-memory structure for duplicates</li>
</ul>

<p>The advantage of this method compared to some of the others suggested - it always works, regardless of the size of the input and the size of your available memory and it does not fail due to hash collisions or other probabilistic artifacts. You are leveraging the merge sort in unix sort where the hard stuff - dealing with larger-than-memory input - 
 has been done for you. </p>
","5087125","","5087125","","2015-07-06 22:56:39","2015-07-06 22:56:39","","","","4","","",""
"31257069","2","","31256397","2015-07-06 22:54:15","","1","","<p>Here's an outline of how I'd do it using UNIX sort/uniq:</p>

<ol>
<li><p>Modify the data format so that each record is a single line. You could do this using the methods <a href=""https://stackoverflow.com/questions/8987257/concatenating-every-other-line-with-the-next"">here</a>.</p></li>
<li><p>Sort the data with the <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?sort"" rel=""nofollow noreferrer""><code>sort</code> command</a>. Note the you can specify which fields are important with the <code>--key</code> option, you might need to exclude the <code>#@ &lt;abc&gt;</code> part by selecting all the other fields as keys (I wasn't entirely sure from your description).</p></li>
<li><p>Apply the <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?uniq"" rel=""nofollow noreferrer""><code>uniq</code> command</a> to the sorted output to get only the unique lines.</p></li>
</ol>

<p>This should all work fine on out-of-core data as far as I know.</p>
","874671","","-1","","2017-05-23 11:51:12","2015-07-06 22:54:15","","","","0","","",""
"31261611","2","","31256444","2015-07-07 06:48:03","","0","","<p>If you use Scrapy you do not need regular expressions -- or at least you can limit them to a minimum. For example with the <code>LxmlLinkExtractor</code> you can set up which URLs to follow (<code>allow</code>) and in which XPath-branch (<code>restrict_xpaths</code>).</p>

<p>And you can use your regular expressions (which look fine for me at first glance) in in the <code>allow</code> restriction -- and for this site you do not need a restriction on XPath.</p>
","3941341","","","","","2015-07-07 06:48:03","","","","0","","",""
"31270049","2","","31256450","2015-07-07 13:33:30","","1","","<p>For oldest task you should probably use created_at rather than modified_at (the oldest task could have been modified recently, after all).</p>

<p>We don't have any way in the API to specifically get the older task, or order by creation time or anything like that, so for now your workaround is in fact the only way to do it. You may be able to make it a little faster by using <code>?opt_fields=created_at</code> in the task query to cut down on how much data you're loading.</p>
","254896","","","","","2015-07-07 13:33:30","","","","5","","",""
"31329850","2","","31256469","2015-07-09 23:10:26","","0","","<p>This is the solution to the issue I was encountering.  Tried reworking the string and the related escapes '\' but was not successful. Did however get the following working. I am not clear why this worked.</p>

<pre><code>dtg_opt_1 = driver.find_element_by_xpath(""//*[contains(text(),"" + "" '"" + dtg_found + ""'"" + "")]"")
</code></pre>
","5087066","","","","","2015-07-09 23:10:26","","","","0","","",""
"31256581","2","","31256484","2015-07-06 22:13:47","","0","","<p>Queries across relationships don't use the <code>_set</code> syntax. Try this:</p>

<pre><code>User.objects.all().values('userprofile__district__name').distinct()
</code></pre>
","2337736","","","","","2015-07-06 22:13:47","","","","5","","",""
"31257996","2","","31256484","2015-07-07 00:43:05","","0","","<p>You could try to execute the query like this:</p>

<pre><code>UserProfile.objects.values('district__name')
</code></pre>

<p>And if you need to query from an especified model instance:</p>

<pre><code>user_profile.objects.filter(user=my_user).values('district__name')
</code></pre>

<p>Also if you are using <code>User.objects.all().values('user_profile_set__district__name')</code> and getting this output:</p>

<pre><code>[{'user_profile_set__district__name': None},  
{'user_profile_set__district__name': None}, 
{'user_profile_set__district__name': None} ... ]
</code></pre>

<p>It might mean that your save method is not working correctly or at least for the name field, you might want to use the shell and query your District objects to verify if they have a name.</p>
","3080244","","","","","2015-07-07 00:43:05","","","","0","","",""
"31256661","2","","31256583","2015-07-06 22:20:40","","0","","<p>Motionless hasn't been updated since 06/08/2010 according to the <a href=""https://pypi.python.org/pypi/motionless/1.1"" rel=""nofollow"">PyPi Package Index</a>.</p>

<p>I've downloaded it and get the same error immediately just by running:</p>

<pre><code>import motionless

print(motionless.__version__)
</code></pre>

<p>It's also not flagged as being Python 3.4 compatible in PyPi; if you are running the latest version of Python this is likely the issue.  Have you tried running it with <a href=""https://www.python.org/download/releases/2.7/"" rel=""nofollow"">Python 2.7</a> instead?</p>

<p>Edit: Looking at the Python 2.7 docs; it states <a href=""https://docs.python.org/2.7/library/stdtypes.html#comparisons"" rel=""nofollow"">here</a> that <code>!=</code> and <code>&lt;&gt;</code> are equvilent, however <code>&lt;&gt;</code> is deprecated.  In the Python 3.4 docs it states <a href=""https://docs.python.org/3.4/library/stdtypes.html#comparisons"" rel=""nofollow"">here</a> that only <code>!=</code> is supported, no mention of <code>&lt;&gt;</code> so I imagine it's been removed.</p>

<p>You could try instead:</p>

<ul>
<li>Raising an issue on the <a href=""https://github.com/ryancox/motionless"" rel=""nofollow"">GitHub Repo</a>; the author may still be updating the library and not know it's incompatible with Python 3.4</li>
<li>Checking out the code yourself from the <a href=""https://github.com/ryancox/motionless"" rel=""nofollow"">GitHub Repo</a> and manually fixing the problem (Check out <a href=""https://docs.python.org/2/library/2to3.html"" rel=""nofollow"">2to3</a> for automatically doing this.  It will convert all <code>&lt;&gt;</code> usage to <code>!=</code> for you)</li>
</ul>
","497084","","497084","","2015-07-06 22:26:18","2015-07-06 22:26:18","","","","0","","",""
"31257455","2","","31257446","2015-07-06 23:38:15","","0","","<p>instead of <code>.readlines()</code> you can cast a file pointer to a list which automatically gets all the lines. So you can do this:</p>

<pre><code>FP = open('filename.data', 'r')
print(list(FP))
</code></pre>

<p>or this:</p>

<pre><code>FP = open('filename.data', 'r')
for line in FP:
    print(line)
</code></pre>
","2121816","","","","","2015-07-06 23:38:15","","","","6","","",""
"31257464","2","","31257446","2015-07-06 23:39:19","","0","","<p>open it in <strong>binary</strong> mode and print the repr of its contents instead </p>

<pre><code>print os.stat(""filename.data"") #ensure that st_size &gt; 0

with open(""filename.data"",""rb"") as f:
    print repr(f.read())
</code></pre>

<p>if this gives an empty string than you indeed have an empty file ...</p>

<p>im guessing ls -l tells you that the file is 0 bytes big?</p>
","541038","","541038","","2015-07-06 23:48:46","2015-07-06 23:48:46","","","","5","","",""
"31257483","2","","31257446","2015-07-06 23:41:00","","0","","<p>When opening a file just by filename, Python by default will first look in the current working directory.  If you're using IDLE, this may not actually be the same directory in which you're .py file is.  Try running your script from the command line in the same directory as your ""*.data"" file.</p>
","40896","","","","","2015-07-06 23:41:00","","","","2","","",""
"31257521","2","","31257457","2015-07-06 23:45:42","","1","","<p>How about this:</p>

<pre><code>def fix_it(scraps, recycled):
    for i in recycled:
        if i not in scraps:
            return ""give me something useful""
    return recycled

print fix_it('AbCdEfG', 'AhK')
print fix_it('AbCdEfG', 'CdE')
</code></pre>

<p>output is:</p>

<pre><code>python test.py
give me something useful
CdE
</code></pre>
","3058120","","","","","2015-07-06 23:45:42","","","","4","","",""
"31257977","2","","31257478","2015-07-07 00:41:23","","2","","<blockquote>
  <p>What does the list consist of that we only want elements 0-5?</p>
</blockquote>

<p>To be precise, <code>request.endpoint</code> is not a list, it's a string. And it doesn't matter what the rest of it contains, the code is only concerned with it beginning with <code>'auth.'</code>:</p>

<pre><code>('auth.somethingsomething'[:5] == 'auth.') is True
</code></pre>

<p>I don't have much experience with Flask so I can't specify what possible <code>auth.*</code> values exist, but it's probably values like <code>auth.username</code> and <code>auth.password</code>.</p>

<p>If you're curious about what value it contains, you can add a debugging breakpoint to the code and inspect it:</p>

<pre><code># ... previous app code ...
import pdb; pdb.set_trace()
request.endpoint[:5] != 'auth.'
</code></pre>

<p>Then run and test the code. When it hits that point, it'll pause execution and give you a <code>pdb</code> shell, which will let you look at the <code>request</code> object and its <code>endpoint</code> attribute.</p>
","11265","","","","","2015-07-07 00:41:23","","","","1","","",""
"31257738","2","","31257489","2015-07-07 00:11:00","","1","","<p>If the device responses are in order and are grouped together by host, then you don't need a dictionary, just three lists:</p>

<pre><code>last_host = None
hosts = []                # the list of hosts
host_responses = []       # the list of responses for each host
responses = []
for output in expandresults:
    if output.val is not None:
        if output.hostname != last_host:    # new host
            if last_host:    # only append host_responses after a new host
                host_responses.append(responses)
            hosts.append(output.hostname)
            responses = [output.val]        # start the new list of responses
            last_host = output.hostname
        else:                               # same host, append the response
            responses.append(output.val)
host_responses.append(responses)

for host, responses in zip(hosts, host_responses):
    self.WriteOut(host, ','.join(responses))
</code></pre>
","584846","","","","","2015-07-07 00:11:00","","","","3","","",""
"31257791","2","","31257489","2015-07-07 00:17:18","","0","","<p>You might have an easier time figuring out where the memory is going by using a profiler: </p>

<p><a href=""https://pypi.python.org/pypi/memory_profiler"" rel=""nofollow"">https://pypi.python.org/pypi/memory_profiler</a></p>

<p>Additionally, if you're already already tweaking the fastsnmpy classes, you can just change the implementation to do the dictionary based results merging for you instead of letting it construct a gigantic list first. </p>

<p>How long are you hanging on to the session? The result list will grow indefinitely if you reuse it. </p>
","5087125","","","","","2015-07-07 00:17:18","","","","8","","",""
"34982060","2","","31257489","2016-01-24 22:04:01","","1","","<p>The memory consumption was due to instantiation of several workers in an unbound manner.</p>

<blockquote>
  <p>I've updated fastsnmpy (latest is version 1.2.1 ) and uploaded it to
  PyPi.  You can do a search from PyPi for 'fastsnmpy', or grab it
  directly from my PyPi page here at <a href=""https://pypi.python.org/pypi/fastsnmpy2/1.2.1"" rel=""nofollow"">FastSNMPy</a></p>
</blockquote>

<p>Just finished updating the docs, and posted them to the project page at <a href=""http://ajaydivakaran.com/fastsnmpy/"" rel=""nofollow"">fastSNMPy DOCS</a></p>

<p>What I basically did here is to replace the earlier model of unbound-workers with a process-pool from multiprocessing. This can be passed in as an argument, or defaults to 1.</p>

<p>You now have just 2 methods for simplicity. 
snmpwalk(processes=n) and snmpbulkwalk(processes=n)</p>

<p>You shouldn't see the memory issue anymore. If you do, please ping me on github.</p>
","5390281","","","","","2016-01-24 22:04:01","","","","4","","",""
"31260886","2","","31260814","2015-07-07 06:01:02","","0","","<p>Why recursive? </p>

<pre><code>a = [1, 2, 2, 3, 3] 
b = [2, 3, 4] 

result = [[x, b.remove(x)][0] for x in a if x in b] 
result
[2, 3, 3]
</code></pre>
","1575066","","1575066","","2015-07-07 06:06:37","2015-07-07 06:06:37","","","","1","","",""
"31260954","2","","31260814","2015-07-07 06:05:19","","1","","<p>Please see the documentation of the module <a href=""https://docs.python.org/2/library/collections.html"" rel=""nofollow""><code>collections</code></a>, which contains helpers for many functional tasks:</p>

<pre><code>from collections import defaultdict, Counter

# Preserves the order of b:
def in_both(a, b):
    # Count the occurrences of elements in a:
    a = Counter(a)
    # Default to 0:
    a = defaultdict(lambda: 0, a)

    # Return true if there is a positive amount of items x in a left:
    def take_from_a(x):
        cur = a[x]
        if cur &gt; 0:
            a[x] = cur - 1
            return True

    # Filter out elements in b that are not often enough in b:
    return filter(take_from_a, b)

in_both(""abbcccdddd"", ""abcdabcde"") == ""abcdbcd""
</code></pre>

<p>In here <code>a</code> and <code>b</code> are both iterated once.</p>
","416224","","416224","","2015-07-07 06:11:12","2015-07-07 06:11:12","","","","0","","",""
"31262754","2","","31260814","2015-07-07 07:50:39","","-1","","<p>Recursive sounds like a non-pythonistic way of doing this. What about something as simple as:</p>

<pre><code>a = [1, 2, 3]
b = [2, 3, 4]
c = a + b
</code></pre>

<p>produces: c = [1, 2, 3, 2, 3, 4]</p>
","3842449","","","","","2015-07-07 07:50:39","","","","1","","",""
"31260959","2","","31260899","2015-07-07 06:05:30","","1","","<p>I think this what you expected:</p>

<pre><code>integer1 = eval(input('Enter the first integer between -10 and 10: '))

integer2 = eval(input('Enter the second integer between -10 and 10: '))

while (integer1 &gt;= 10 or integer1 &lt;= -10):
    integer1 = eval(input('Integer 1 is invalid, Please enter a valid number: '))

while (integer2 &gt; 10 or integer2 &lt; -10):
    integer2 = input('Integer2 is invalid, Please enter a valid number: ')
</code></pre>

<p><strong>Since the value of integer1 is not changed in first while loop it will act as a infinite loop</strong></p>

<p>Instead of eval you could use <code>int()</code> since there are some harmful effect on using <code>eval</code> stick with <code>int</code></p>

<p><strong>Modified:</strong></p>

<pre><code>integer1 = int(input('Enter the first integer between -10 and 10: '))

integer2 = int(input('Enter the second integer between -10 and 10: '))

while (integer1 &gt;= 10 or integer1 &lt;= -10):
    integer1 = int(input('Integer 1 is invalid, Please enter a valid number: '))

while (integer2 &gt; 10 or integer2 &lt; -10):
    integer2 = int(input('Integer2 is invalid, Please enter a valid number: '))
</code></pre>
","4251775","","4251775","","2015-07-07 06:09:01","2015-07-07 06:09:01","","","","5","","",""
"31260966","2","","31260899","2015-07-07 06:05:47","","1","","<pre><code>while (integer1 &gt;= 10 or integer1 &lt;= -10):
    replace1 = eval(input('Integer 1 is invalid, Please enter a valid number: '))
</code></pre>

<p>You never change <code>integer1</code>, so if the condition is true, it is <em>always</em> true and it loops forever.</p>

<p>Assign to <code>integer1</code> rather than <code>replace1</code>. Similarly for the second.</p>
","416467","","","","","2015-07-07 06:05:47","","","","0","","",""
"31261081","2","","31260915","2015-07-07 06:14:02","","0","","<p>Possible Duplicate : 
<a href=""https://stackoverflow.com/questions/30409591/sklearn-error-x-and-y-have-incompatible-shapes"">sklearn error: &quot;X and y have incompatible shapes.&quot;</a></p>

<p>The above link answers your question.</p>
","3704252","","-1","","2017-05-23 12:14:06","2015-07-07 06:14:02","","","","0","","",""
"31261004","2","","31260935","2015-07-07 06:08:35","","1","","<p><a href=""https://docs.python.org/2/library/sys.html#sys.exc_info"" rel=""nofollow""><code>sys.exc_info</code></a> returns the tuple of 3 elements, where the third is the traceback.</p>

<p>The returned tuple is like - <code>(type, value, traceback)</code> .</p>

<p>You are doing - <code>str(sys.exc_info()[0:2])</code> which only selects first two elements.</p>

<p>Try -</p>

<pre><code>str(sys.exc_info())
</code></pre>

<p>If you cannot use the traceback module to format the traceback. And if you just want the exception's line number and filename, you can use the following -</p>

<pre><code>sys.exc_info()[2].tb_frame.f_code.co_filename #&lt;---- filename
sys.exc_info()[2].tb_lineno # &lt;------ line number
</code></pre>

<p>Please note these can be internal names, and best is to use <code>traceback</code> module.</p>
","795990","","795990","","2015-07-07 06:41:07","2015-07-07 06:41:07","","","","4","","",""
"31261059","2","","31260982","2015-07-07 06:12:14","","0","","<p>Instead of running the python file directly, run it as another user</p>

<pre><code>su -c ""./myFile.py arg1 arg2"" another_user
</code></pre>
","4103025","","","","","2015-07-07 06:12:14","","","","7","","",""
"31261439","2","","31260988","2015-07-07 06:38:09","","8","","<p>When Python executes a script file, the whole file is parsed first. You can notice that when you introduce a syntax error somewhere: Regardless of where it is, it will prevent any line from executing.</p>

<p>So since Python parses the file first, literals can be loaded effectively into the memory. Since Python knows that these are constant, all variables that represent those constant values can point to the same object in memory. So the object is shared.</p>

<p>This works for ints and floats, but even for strings; even when there is a constant expression that needs to be evaluated first:</p>

<pre><code>a = ""foo""
b = ""foo""
c = ""fo"" + ""o""
print(a is b)
print(a is c)
</code></pre>

<p>Now in IDLE, the behavior is very different: As an interactive interpreter, IDLE executes every line separately. So <code>a = 1.1</code> and <code>b = 1.1</code> are executed in separated contexts which makes it impossible (or just very hard) to figure out that they both share the same constant literal value and could share the memory. So instead, the interpreter will allocate two different objects, which causes the identity check using <code>is</code> to fail.</p>

<p>For small integers, the situation is a bit different. Because they are often used, CPython stores a set of integers (in the range between -5 and 256) statically and makes that every value of these points to the same <code>int</code> object. That‚Äôs why you get a different result for small integers than for any other object. See also the following questions:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/306313/pythons-is-operator-behaves-unexpectedly-with-integers"">&quot;is&quot; operator behaves unexpectedly with integers</a></li>
<li><a href=""https://stackoverflow.com/questions/15171695/weird-integer-cache-inside-python-2-6"">What&#39;s with the Integer Cache inside Python?</a></li>
</ul>
","216074","","-1","","2017-05-23 12:23:59","2015-07-07 06:38:09","","","","0","","",""
"31261079","2","","31261047","2015-07-07 06:13:58","","2","","<p>there is no need to escape the space character.</p>
","4954037","","","","","2015-07-07 06:13:58","","","","1","","",""
"31261170","2","","31261047","2015-07-07 06:19:55","","1","","<p>It's not necessary to escape the space character.</p>

<pre><code>os.remove(""/Users/karthik/Desktop/screenshot 2.png"")
</code></pre>
","4064006","","","","","2015-07-07 06:19:55","","","","0","","",""
"31261237","2","","31261068","2015-07-07 06:25:02","","3","","<p>Here every item in <code>item_to_be_found</code> list is a <code>Tag</code> type object so you can get the string inside <code>&lt;loc&gt;</code> tag using <code>.text</code> or <code>.string</code> on them. Though <code>.text</code> and <code>.string</code> have <a href=""https://stackoverflow.com/questions/25327693/difference-between-string-and-text-beautifulsoup/25328374#25328374"">differences</a> both will work same in this case.</p>

<pre><code>for loc in item_to_be_found:
    print item_to_be_found.index(loc) + 1, loc.text
</code></pre>

<p>this will give you a result like</p>

<pre><code>1 http://www.htcysnc.com/m/designer-sarees
2 http://www.htcysnc.com/m/anarkali-suits
</code></pre>
","1113211","","-1","","2017-05-23 11:53:08","2015-07-07 06:31:58","","","","2","","",""
"31261196","2","","31261123","2015-07-07 06:22:07","","5","","<p>First you should load the file using the <code>open()</code> method and then apply the <code>.readlines()</code> method, which splits on <code>""\n""</code> and returns a list, then you update the list of strings by inserting a new string in between the list, then simply write the contents of the list to the new file using the <code>new_file.write(""\n"".join(updated_list))</code></p>

<p><strong>NOTE:</strong> This method will only work for files which can be loaded in the memory.</p>

<pre><code>with open(""filename.txt"", ""r"") as prev_file, open(""new_filename.txt"", ""w"") as new_file:
    prev_contents = prev_file.readlines()
    #Now prev_contents is a list of strings and you may add the new line to this list at any position
    prev_contents.insert(4, ""\n This is a new line \n "")
    new_file.write(""\n"".join(prev_contents))
</code></pre>
","3051961","","3051961","","2015-07-07 06:25:13","2015-07-07 06:25:13","","","","2","","",""
"31261375","2","","31261123","2015-07-07 06:34:11","","0","","<p>For Large file</p>

<pre><code>with open (""s.txt"",""r"") as inp,open (""s1.txt"",""w"") as ou:
    for a,d in enumerate(inp.readlines()):
        if a==2:
            ou.write(""hi there\n"")
        ou.write(d)
</code></pre>
","4251775","","","","","2015-07-07 06:34:11","","","","0","","",""
"31264759","2","","31261123","2015-07-07 09:27:59","","1","","<p><code>readlines()</code> is not recommended because it reads the whole file into memory. It is also not needed because you can iterate over the file directly.</p>

<p>The following code will insert <code>Hello at line 2</code> at line 2</p>

<pre><code>with open('file.txt', 'r') as f_in:
    with open('file2.txt','w') as f_out:
        for line_no, line in enumerate(f_in, 1):
            if line_no == 2:
                f_out.write('Hello at line 2\n')
            f_out.write(line)
</code></pre>

<p>Note the use of the <code>with open('filename','w') as filevar</code> idiom. This removes the need for an explicit <code>close()</code> because it closes the file automatically at the end of the block, and better, it does this  <em>even if there is an exception</em>.</p>
","3714940","","3714940","","2015-07-07 09:35:06","2015-07-07 09:35:06","","","","0","","",""
"31263508","2","","31261376","2015-07-07 08:30:08","","1","","<p>You should use a FileInputFormat specific for Avro files. </p>

<p>Unfortunately I am not using python so I can only link you to a solution. You can look into that: <a href=""https://github.com/apache/spark/blob/master/examples/src/main/python/avro_inputformat.py"" rel=""nofollow"">https://github.com/apache/spark/blob/master/examples/src/main/python/avro_inputformat.py</a></p>

<p>The most interesting part is this one:</p>

<pre><code>avro_rdd = sc.newAPIHadoopFile(
    path,
    ""org.apache.avro.mapreduce.AvroKeyInputFormat"",
    ""org.apache.avro.mapred.AvroKey"",
    ""org.apache.hadoop.io.NullWritable"",
    keyConverter=""org.apache.spark.examples.pythonconverters.AvroWrapperToJavaConverter"",
    conf=conf)
</code></pre>
","4250114","","","","","2015-07-07 08:30:08","","","","3","","",""
"31262473","2","","31261448","2015-07-07 07:35:23","","-2","","<p>try this once:</p>

<pre><code>selectEle = Select(driver.find_element_by_xpath(""//select[@class='select_filter_class valid']""));

//In list it may be element instead of webelement in python
List&lt;WebElement&gt; list = select.find_elements_by_tag_name(""option"");
</code></pre>

<p>Try this:</p>

<pre><code>for index,element in enumerate(list):
        element= list[index];
        select = Select(selectEle);
        print 'Text  :', element.text
        select.select_by_visible_text(element.text);
        Thread.sleep(2000);

Let me know,is it working or not..
</code></pre>
","4787944","","4787944","","2015-07-08 10:50:16","2015-07-08 10:50:16","","","","1","","",""
"31262013","2","","31261477","2015-07-07 07:10:24","","0","","<p>I think what you are trying to achieve is something like the following:</p>

<p><strong>file1.py</strong></p>

<pre><code>from file2 import my_list

print(my_list)
</code></pre>

<p><strong>file2.py</strong></p>

<pre><code>my_list = []

class abc:
    def __init__(self):
        global my_list

        my_list = [12,13,4] #values assigned


my_abc_file2 = abc()
</code></pre>

<p>Running <code>file1.py</code> would give:</p>

<pre><code>[12, 13, 4]
</code></pre>

<p>As mentioned in the comments, <code>file2.py</code> really only needs to contain the following for it to work though:</p>

<p><strong>file2.py</strong></p>

<pre><code>my_list = [12,13,4]
</code></pre>

<p>Tested in Python 2.7</p>
","4985733","","4985733","","2015-07-07 07:17:45","2015-07-07 07:17:45","","","","3","","",""
"31313124","2","","31261528","2015-07-09 09:14:52","","0","","<p><code>pyinstall</code> is hard to configure, the <code>cx_freeze</code> maybe better, both support windows (you can download the <code>exe</code> directly) and linux. Provide the <code>example.py</code>, In windows, suppose you have install python in the default path (<code>C:\\Python27</code>):</p>

<pre><code>$ python c:\\Python27\\Scripts\\cxfreeze example.py -s --target-dir some_path
</code></pre>

<p>the <code>cxfreeze</code> is a python script, you should run it with <code>python</code>, then the build files are under <code>some_path</code> (with a lot of <code>xxx.pyd</code> and <code>xxx.dll</code>).</p>

<p>In Linux, just run:</p>

<pre><code>$ cxfreeze example.py -s --target-dir some_path
</code></pre>

<p>and also output a lot of files(<code>xxx.so</code>) under <code>some_path</code>.</p>

<p>The defect of <code>cx_freeze</code> is it would not wrap all libraries to target dir, this means you have to test your build under different environments. If any library missing, just copy them to target dir. A exception case is, for example, if your build your python under Centos 6, but when running under Centos 7, the missing of libc.so.6 will throw, you should compile your python both under Centos 7 and Centos 6. </p>
","342348","","342348","","2015-07-09 09:20:32","2015-07-09 09:20:32","","","","0","","",""
"31611824","2","","31261528","2015-07-24 13:28:59","","0","","<p>Hi hope you're still looking for an answer. Here is how I solved it:</p>

<p>add a file called <code>hook-psutil.py</code></p>

<pre class=""lang-python prettyprint-override""><code>from PyInstaller.hooks.hookutils import (collect_data_files, collect_submodules)

datas = [('./venv/lib/python2.7/site-packages/psutil/_psutil_linux.so', 'psutil'),
         ('./venv/lib/python2.7/site-packages/psutil/_psutil_posix.so', 'psutil')]
hiddenimports = collect_submodules('psutil')
</code></pre>

<p>And then call <code>pyinstaller --additional-hooks-dir=(the dir contain the above script) script.py</code></p>
","714179","","","","","2015-07-24 13:28:59","","","","2","","",""
"31936248","2","","31261528","2015-08-11 07:59:50","","0","","<p>What worked for me is as follows:</p>

<ol>
<li><p>Install python-psutil: <code>sudo apt-get install python-psutil</code>. If you
have a previous installation of the <code>psutil</code> module from other
method, for example through source or <code>easy_install</code>, remove it first.</p></li>
<li><p>Run <code>pyinstaller</code> as you do, without the <code>hidden-import</code> option.</p></li>
</ol>
","1847471","","","","","2015-08-11 07:59:50","","","","0","","",""
"31288272","2","","31261543","2015-07-08 09:13:01","","0","","<p>I found, the foreign key constraint in the <code>column</code> must be removed</p>

<pre><code>from sqlalchemy import (Column, Integer, create_engine, 
                        ForeignKeyConstraint)
from sqlalchemy.ext.declarative import declarative_base


#engine = create_engine('sqlite:///memory')
engine = create_engine('postgres:///memory')
Base = declarative_base()


class Test(Base):
    __tablename__ = 'test'
    id = Column(Integer, primary_key=True)
    id2 = Column(Integer, primary_key=True)


class Test2(Test):
    __tablename__ = 'test2'
    # No foreign key here
    id = Column(Integer, primary_key=True)
    id2 = Column(Integer, primary_key=True)

    __table_args__ = (
        # this constraints must be the alone to Test model
        ForeignKeyConstraint([id, id2], [Test.id, Test.id2]),
    )


Base.metadata.create_all(engine)
</code></pre>
","5088122","","","","","2015-07-08 09:13:01","","","","0","","",""
"31262642","2","","31261600","2015-07-07 07:44:15","","1","","<p>This is by the way a terrible idea, since you already have begun using gitpython, and I have never tried working with that, but I just really want to let you know, that you can do it without cloning it in local, without using gitpython.</p>

<p>Simply run the git command, in a shell, using subprocess..
<a href=""https://stackoverflow.com/questions/4256107/running-bash-commands-in-python"">running bash commands in python</a></p>

<hr>

<p>edit: added some demonstration code, of reading stdout and writing stdin.</p>

<p>some of this is stolen from here:
<a href=""http://eyalarubas.com/python-subproc-nonblock.html"" rel=""nofollow noreferrer"">http://eyalarubas.com/python-subproc-nonblock.html</a></p>

<p>The rest is a small demo..
first two prerequisites</p>

<p><strong>shell.py</strong></p>

<pre><code>import sys
while True:
    s = raw_input(""Enter command: "")
    print ""You entered: {}"".format(s)
    sys.stdout.flush()
</code></pre>

<p><strong>nbstreamreader.py:</strong></p>

<pre><code>from threading import Thread
from Queue import Queue, Empty

class NonBlockingStreamReader:

    def __init__(self, stream):
        '''
        stream: the stream to read from.
                Usually a process' stdout or stderr.
        '''

        self._s = stream
        self._q = Queue()

        def _populateQueue(stream, queue):
            '''
            Collect lines from 'stream' and put them in 'quque'.
            '''

            while True:
                line = stream.readline()
                if line:
                    queue.put(line)
                else:
                    raise UnexpectedEndOfStream

        self._t = Thread(target = _populateQueue,
                args = (self._s, self._q))
        self._t.daemon = True
        self._t.start() #start collecting lines from the stream

    def readline(self, timeout = None):
        try:
            return self._q.get(block = timeout is not None,
                    timeout = timeout)
        except Empty:
            return None

class UnexpectedEndOfStream(Exception): pass
</code></pre>

<p>then the actual code:</p>

<pre><code>from subprocess import Popen, PIPE
from time import sleep
from nbstreamreader import NonBlockingStreamReader as NBSR

# run the shell as a subprocess:
p = Popen(['python', 'shell.py'],
        stdin = PIPE, stdout = PIPE, stderr = PIPE, shell = False)
# wrap p.stdout with a NonBlockingStreamReader object:
nbsr = NBSR(p.stdout)
# issue command:
p.stdin.write('command\n')
# get the output
i = 0
while True:
    output = nbsr.readline(0.1)
    # 0.1 secs to let the shell output the result
    if not output:
        print ""time out the response took to long...""
        #do nothing, retry reading..
        continue
    if ""Enter command:"" in output:
        p.stdin.write('try it again' + str(i) + '\n')
        i += 1
    print output
</code></pre>
","1331076","","-1","","2017-05-23 11:43:59","2015-07-07 11:40:04","","","","2","","",""
"31262622","2","","31261664","2015-07-07 07:43:25","","0","","<p>We can't really diagnose this if you don't tell us what it <em>does</em> return. If you need any sort of login to access it, it won't work because Python doesn't have your browser cookies. Python also won't automatically follow some types of redirects and anything Javascript-dependant is right out of the question. Those would be the first things to check for.</p>
","3419977","","","","","2015-07-07 07:43:25","","","","4","","",""
"31262790","2","","31262702","2015-07-07 07:52:42","","0","","<p>I guess you need to store the value returned by the function in a variable and then print it:</p>

<pre><code>y = fpol(4)
print y
</code></pre>
","3051961","","","","","2015-07-07 07:52:42","","","","0","","",""
"31262792","2","","31262702","2015-07-07 07:52:52","","4","","<p><code>y</code> is known only in the scope of the function <code>fpol</code>. You should assign the result to a variable, and only then print its value:</p>

<pre><code>y = fpol(4)
print(y)
</code></pre>

<p>Note that <code>y</code> is a different variable here, it has nothing to do with the <code>y</code> inside the function. You could write:</p>

<pre><code>x = fpol(4)
print(x)
</code></pre>
","1735406","","1735406","","2015-07-07 07:55:26","2015-07-07 07:55:26","","","","3","","",""
"31262794","2","","31262702","2015-07-07 07:53:00","","1","","<p>The variable <code>y</code> is only visible from within the function you have declared. To print the result of <code>fpol(4)</code> you can assign the returned value to a new variable:</p>

<pre><code>returnedValue = fpol(4)
print(returnedValue)
</code></pre>
","5088220","","","","","2015-07-07 07:53:00","","","","0","","",""
"31262804","2","","31262702","2015-07-07 07:53:39","","0","","<p><code>y</code> is out of scope. It was only in scope for your function call, and since the function <code>fpol</code> has ran and ended, the scope has died with it. We need to assign a variable that's visible to the print command. Let's reuse <code>y</code> for simplicity.</p>

<pre><code>y = fpol(4)
print(y)
</code></pre>

<p>The key rule of thumb for python is every time you indent you have started a new scope! You must make sure your variables are in scope to use them.</p>
","4307644","","","","","2015-07-07 07:53:39","","","","0","","",""
"31262830","2","","31262702","2015-07-07 07:55:01","","0","","<p><code>y</code> is a variable with scope that's local to function fpol().</p>

<p>it is not defined outside of that scope.</p>

<p>The code <code>return y</code> does not make <code>y</code> visible outside of the function in which it has been defined. It only returns the value of <code>y</code> to the caller as a function return value.</p>
","3818405","","","","","2015-07-07 07:55:01","","","","0","","",""
"31262854","2","","31262702","2015-07-07 07:56:08","","0","","<p>Using your example, the following would show you the value of <code>y</code></p>

<pre><code>def fpol(x):
    y=x**4
    print(y)      # This will print the value of y
    return(y)

print fpol(4)     # This will print the returned result
</code></pre>

<p>But trying to print <code>y</code> after your function call will fail with the not defined error as the variable is defined only inside you function, i.e. it is local to that function. This is often referred to as the scope of a variable.</p>

<p>As soon as the function returns, <code>y</code> ceases to exist.</p>
","4985733","","","","","2015-07-07 07:56:08","","","","0","","",""
"31262858","2","","31262702","2015-07-07 07:56:16","","0","","<p>y is not defined outside th function</p>

<p>you can not do print(y)</p>

<p>probably you want</p>

<p>y = fpol(4)</p>

<p>print(y)</p>

<p>is not very good programming style, but you also can make y global variable. then it will be available after function, but pls do not do it.</p>

<p>finally you can do just </p>

<p>return y</p>

<p>no need ()</p>
","964080","","","","","2015-07-07 07:56:16","","","","1","","",""
"31262886","2","","31262702","2015-07-07 07:58:00","","0","","<p>I suspect you are trying to print(y) outside the function. The variable y is local in scope, that is only defined within fpol(). So you can print it there. You can do:,</p>

<pre><code>def fpol(x):
    y=x**4
    return(y)

y = fpol(4)
print(y)
</code></pre>

<p>But not:</p>

<pre><code>def fpol(x):
    y=x**4
    return(y)

print(y)
</code></pre>
","3842449","","","","","2015-07-07 07:58:00","","","","0","","",""
"31266738","2","","31266550","2015-07-07 11:00:19","","2","","<p>Here's a regular expression that will find which (if any) of your title keywords appear in <code>c_raw</code>:</p>

<pre><code>regex = re.compile(""(?:Dresses)|(?:Wallets)|(?:Pumps)"")
print regex.findall(c_raw)
</code></pre>

<p>The format of <code>(?:Dresses)</code> etc., just means match the letters inside the parenthesis in the order they appear together but don't save them as a regex group.</p>

<p>As to what <code>c_raw[0]</code> is doing, basically <code>c_raw</code> is a string. In python, you can treat strings as if they are arrays of characters. So, <code>c_raw[0]</code> is saying, give me the 0th index of the array <code>c_raw</code> -- i.e. get the first character of <code>c_raw</code></p>
","2487336","","2487336","","2015-07-07 11:05:36","2015-07-07 11:05:36","","","","1","","",""
"31266918","2","","31266550","2015-07-07 11:08:46","","1","","<p>try this demo from scrapy shell,</p>

<pre><code>In [1]: text = ""&lt;title&gt;Testing test Pumps abc asdf a&lt;/title&gt;""

In [2]: sel = Selector(text=text)

In [3]: sel.xpath('//title').re('Dresses|Wallets|Pumps')
Out[3]: [u'Pumps']
</code></pre>

<p>I have made an input html to selector object since you haven't provide any specific start-url</p>
","2043974","","","","","2015-07-07 11:08:46","","","","0","","",""
"43531445","2","","31266658","2017-04-20 23:20:04","","0","","<p>Are you trying to use Redshift as the backend database for your web application? That's a bad idea, Redshift is a data warehouse and as such individual query performance and latency are far from great, not to mention that Redshift doesn't enforce primary keys, which almost surely Django expects. </p>

<p>My recommendation, use PostgreSQL.</p>
","1081711","","","","","2017-04-20 23:20:04","","","","0","","",""
"31285962","2","","31266687","2015-07-08 07:19:35","","0","","<p>if your ticker file is large
(judging by the path name, it may be)</p>

<p>using the csv reader is a waste of time.
it does not suport seek, so the only way you can get to the last line is </p>

<pre><code>    for row in spamreader:
        pass
</code></pre>

<p>since after this ""row"" will contain the last row in the file..</p>

<p>you can see here: <a href=""https://stackoverflow.com/questions/260273/most-efficient-way-to-search-the-last-x-lines-of-a-file-in-python"">Most efficient way to search the last x lines of a file in python</a>
that it's possible to retrieve only the last lines in the file, and then parse it with the csv module afterward..</p>

<p>This will save some computation time..</p>
","1331076","","-1","","2017-05-23 12:29:48","2015-07-08 07:19:35","","","","0","","",""
"31266827","2","","31266760","2015-07-07 11:04:48","","1","","<p>in python <code>pickle</code> refers to a module that provides (a specific) serialization of python objects.</p>

<p>serialization itself is a more general term. python objects can also be serialized into json for example.</p>

<p><a href=""https://en.wikipedia.org/wiki/Serialization"" rel=""nofollow"">https://en.wikipedia.org/wiki/Serialization</a></p>
","4954037","","","","","2015-07-07 11:04:48","","","","0","","",""
"31267072","2","","31266760","2015-07-07 11:16:00","","2","","<p>You are misreading the article. Pickling and serialisation are not synonymous, nor does the text claim them to be.</p>

<p>Paraphrasing slighly, the text <em>says</em> this:</p>

<blockquote>
  <p>This module implements an <strong>algorithm</strong> for turning an object into a series of bytes. <strong>This process</strong> is also called <em>serializing</em> the object.</p>
</blockquote>

<p>I removed the module name, <code>pickle</code>, deliberately. The module implements a process, an algorithm, and that process is commonly known as <em>serialisation</em>.</p>

<p>There are other implementations of that process. You could use JSON or XML to serialise data to text. There is also the <a href=""https://docs.python.org/2/library/marshal.html"" rel=""nofollow""><code>marshal</code> module</a>. Other languages have other serialization formats; the <a href=""https://stat.ethz.ch/R-manual/R-devel/library/base/html/serialize.html"" rel=""nofollow"">R language has one</a>, so <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"" rel=""nofollow"">does Java</a>. Etc.</p>

<p>See the <a href=""https://en.wikipedia.org/wiki/Serialization"" rel=""nofollow"">WikiPedia article on the subject</a>:</p>

<blockquote>
  <p>In computer science, in the context of data storage, <strong>serialization</strong> is the process of translating data structures or object state into a format that can be stored (for example, in a file or memory buffer, or transmitted across a network connection link) and reconstructed later in the same or another computer environment.</p>
</blockquote>

<p>Python picked the name <code>pickle</code> because it modelled the process on how this was handled in <a href=""https://en.wikipedia.org/wiki/Modula-3"" rel=""nofollow"">Modula-3</a>, where it was also called pickling. See <a href=""https://stackoverflow.com/questions/27324986/pickles-why-are-they-called-that"">Pickles: Why are they called that?</a></p>
","100297","","100297","","2015-07-07 11:22:07","2015-07-07 11:22:07","","","","0","","",""
"31267980","2","","31266768","2015-07-07 11:59:04","","0","","<p>I would take a look at itertools. 
<a href=""https://docs.python.org/3.5/library/itertools.html#itertools.permutations"" rel=""nofollow"">https://docs.python.org/3.5/library/itertools.html#itertools.permutations</a></p>
","1309301","","","","","2015-07-07 11:59:04","","","","0","","",""
"33099661","2","","31266868","2015-10-13 09:58:31","","-1","","<p>You can also use php to have an URL like this:</p>

<pre><code>http://xxx.xxx.xxx.xxx/index.php?starttime=1360000000&amp;endtime=1370000000
</code></pre>

<p>Then you can define any start and end time to create a dynamic m3u8</p>

<p>Here is an example of index.php</p>

<pre><code>&lt;?php
$starttime = $_REQUEST[""starttime""];
$endtime = $_REQUEST[""endtime""];

$m3u8file = ""#EXTM3U\n#EXT-X-KEY:METHOD=NONE\n#EXT-X-TARGETDURATION:10\n#EXT-X-MEDIA-SEQUENCE:"".substr($starttime,0,9).""\n\n"";
for ($i=substr($starttime,0,9);$i&lt;=substr($endtime,0,9);$i++){
    if (file_exists(""/xxxpath/"".date(""YmdH"",$i*10).""/"".substr($i,0,9)."".ts"")) {
        $m3u8file .= ""#EXTINF:10,\n"";
        $m3u8file .= ""/xxxpath/"".date(""YmdH"",$i*10).""/"".substr($i,0,9)."".ts\n"";
    }
}
$m3u8file .= ""#EXT-X-ENDLIST\n"";

header('Content-Type: application/force-download');
header(""Content-Disposition: attachment; filename=index.m3u8"");
echo $m3u8file;
?&gt;
</code></pre>
","3020268","","3020268","","2015-10-15 01:38:48","2015-10-15 01:38:48","","","","1","","",""
"31267007","2","","31266899","2015-07-07 11:12:50","","1","","<p>You can create the directory with :</p>

<pre><code>os.mkdir
</code></pre>

<p>See the doc : <a href=""https://docs.python.org/2/library/os.html"" rel=""nofollow"">https://docs.python.org/2/library/os.html</a></p>
","2519059","","","","","2015-07-07 11:12:50","","","","0","","",""
"31267109","2","","31266930","2015-07-07 11:17:34","","0","","<blockquote>
  <p>could we call it from cPython</p>
</blockquote>

<p>No, netTcpBinding is interoperable only with WCF clients. </p>

<p>From <a href=""https://msdn.microsoft.com/en-us/library/system.servicemodel.nettcpbinding(v=vs.110).aspx"" rel=""nofollow"">here</a>:</p>

<blockquote>
  <p>The default configuration for the NetTcpBinding is faster than the
  configuration provided by the WSHttpBinding, <strong>but it is intended only
  for WCF-to-WCF communication</strong>. </p>
</blockquote>

<p>From comments:</p>

<blockquote>
  <p>does wsHttpBinding work or only basicHttpBinding work?</p>
</blockquote>

<p>Short answer is no, basicHttpBinding is the only binding (except for the web bindings) which support interoperability with non-wcf clients. Even then you may have difficulty consuming it from non-windows.</p>

<p>Long answer is that the reason this is the case is because basicHttpBinding supports communication over SOAP 1.1, which is a relatively simple protocol, and most vendors have implemented it in very similar ways. Therefore, these different implementations tend to be interoperable. However, wsHttpBinding is Microsoft's attempt to support the SOAP 1.2 protocol and WS-* web service extensions, which is a much larger and more complex set of standards. So there is a much larger scope for interpretation between the various vendors, leading normally to non-interoperability between implementations. It is theoretically possible, therefore, to call an endpoint exposed over wsHttpBinding from a non-wcf (or even non-windows) client, but you would have to overcome all the niggles.</p>

<p>A much better approach would be to move away from SOAP completely if possible, and just use HTTP/POX or HTTP/REST services. </p>
","569662","","569662","","2015-07-08 08:08:37","2015-07-08 08:08:37","","","","2","","",""
"31267634","2","","31266964","2015-07-07 11:43:32","","1","","<p>I suggest you use the <code>STREAM NAME</code> option when you load your data.</p>

<pre><code>Copy schema1.table1 from local 'E:\folder1\table1.csv.gz' STREAM NAME 'E:\folder1\table1.csv.gz' GZIP with Delimiter ',' direct;
</code></pre>

<p>Then run a query on the stream loads that were successful and remove them from your list. </p>

<pre><code>SELECT * FROM v_monitor.load_streams WHERE stream_name = 'My stream name';
</code></pre>

<p>Also it's good to see the <code>rejected_row_count</code> column value in the <code>load_streams</code> table as it will tell you how many rows were rejected.</p>

<p>You can use <code>CURRENT_LOAD_SOURCE()</code> as well, with this you will need to add a new column to your table.</p>

<p>But this is used when I do loads from different locations(parallel), and I can identify better which file failed during load.</p>

<pre><code>--create the table 
create table bla(email varchar2(50),source varchar2(200));

--load the table using the CURRENT_LOAD_SOURCE() as a filler for the source column
COPY bla (email, source AS CURRENT_LOAD_SOURCE()) FROM '/home/dbadmin/data*' DELIMITER ',';

select * from bla limit 1;

                        email                     |  source
    ----------------------------------------------+----------
      Steven.Kastrinakis@advantagepharmacy.com.au | data.csv
</code></pre>
","1504392","","4374739","","2015-07-07 15:17:16","2015-07-07 15:17:16","","","","0","","",""
"31267472","2","","31266969","2015-07-07 11:35:06","","0","","<p>Take a look at <a href=""https://stackoverflow.com/questions/10636611/how-does-access-control-allow-origin-header-work"">this link</a>, it explains how Access-Control-Allow-Origin works.</p>

<p>You might be hosting it on one url and directing ajax to another, and browsers have a same origin policy preventing this from working.</p>
","5073534","","-1","","2017-05-23 11:58:17","2015-07-07 11:35:06","","","","0","","",""
"31267122","2","","31267030","2015-07-07 11:18:18","","2","","<p>Just put <code>-</code>, <code>\d</code> inside a char class.</p>

<pre><code>phone = re.search(r'[\d-]+$', addr_str)
</code></pre>

<p>If the phonenumber startswith with a optional <code>+</code> then you may try this,</p>

<pre><code>phone = re.search(r'\+?\d+(?-\d+)*$', addr_str)
</code></pre>
","3297613","","","","","2015-07-07 11:18:18","","","","1","","",""
"31267126","2","","31267030","2015-07-07 11:18:25","","0","","<p>Assuming you want to allow only one hyphenated section then you can do this using an optional group</p>

<pre><code>((\d+-)?\d+)$
</code></pre>

<p>Demonstration: <a href=""https://regex101.com/r/wV6zP7/1"" rel=""nofollow"">https://regex101.com/r/wV6zP7/1</a></p>

<p>For example, this will match ""0123-456789"" but not ""0123-456-789"".</p>
","127480","","","","","2015-07-07 11:18:25","","","","0","","",""
"31267158","2","","31267030","2015-07-07 11:19:46","","1","","<pre><code>phone = re.search(r'\d[\d-]+\d$', addr_str)
</code></pre>

<p>You can simply modify your regex to this.If there is always a possiblity of only   1 <code>-</code> use</p>

<pre><code>phone = re.search(r'\d+-\d+$', addr_str)
</code></pre>
","3679490","","","","","2015-07-07 11:19:46","","","","0","","",""
"31267216","2","","31267030","2015-07-07 11:22:34","","1","","<p>You could have your digit pattern to include optional minus sign and expect the group to be repeated 1 or 2 times.</p>

<pre><code>phone = re.search(r'(\d+-?){1,2}$', addr_str)
</code></pre>
","331172","","331172","","2015-09-30 19:07:18","2015-09-30 19:07:18","","","","0","","",""
"31267257","2","","31267030","2015-07-07 11:24:39","","0","","<p>If you always have a space before the phone number, why not simply:</p>

<pre><code>phone = addr_str[addr_str.rfind(' ') + 1:]
</code></pre>
","2666289","","","","","2015-07-07 11:24:39","","","","0","","",""
"31267288","2","","31267030","2015-07-07 11:26:03","","1","","<p>In case your string always contains <code>Phone:</code> with the phone number following it at the end, you do not need the regex. Also, note that <code>1-800-MALL</code> is also a valid phone number.</p>

<p>I suggest <a href=""http://ideone.com/vDKnpA"" rel=""nofollow"">this</a>:</p>

<pre><code>addr_str = ""No 123 4th St, 5th Ave NYC\n\tPhone: 1-800-MALL""
idx = addr_str.find(""Phone: "")
if idx &gt; -1:
    print addr_str[idx+7:]
else:
    print addr_str
</code></pre>

<p>Or, in case regex is still preferable, <a href=""http://ideone.com/85j94u"" rel=""nofollow"">another solution</a>:</p>

<pre><code>import re
addr_str = ""No 123 4th St, 5th Ave NYC\n\tPhone: 1-800-MALL""
print re.search(r""Phone:\s*(.*)$"", addr_str).group(1)
</code></pre>
","3832970","","","","","2015-07-07 11:26:03","","","","0","","",""
"31879325","2","","31267073","2015-08-07 13:47:18","","1","","<p>As I understand it now, the answer is no. The <code>IncludeExceptionDetailInFaults</code> setting seems to be only accessible on the server, there doesn't seem to be a way to change it from the client side.</p>
","1799871","","","","","2015-08-07 13:47:18","","","","0","","",""
"31268669","2","","31267080","2015-07-07 12:33:27","","2","","<p>If you just want to copy the file then just do that using <code>shutil</code>. There are still several things that openpyxl doesn't support such as images and charts that will be lost. And, as you're seeing, memory is an issue. Each cell uses about 45 kB of memory.</p>

<p>The openpyxl documentation is pretty clear about the different options used when opening workbooks: data_only only read the results of any formulae and ignore the formulae.</p>

<p>See <a href=""https://bitbucket.org/openpyxl/openpyxl/issue/171/copy-worksheet-function"" rel=""nofollow"">https://bitbucket.org/openpyxl/openpyxl/issue/171/copy-worksheet-function</a> if you want to copy worksheets.</p>

<p>Otherwise you can use two workbooks, one in read-only mode and the other in write-only mode. But if you want to copy, this is best done in the file system.</p>

<p>If you only want to copy the values from one workbook to another then you can combine read-only and write-only modes to reduce the memory footprint. The following pseudo-code should give you a basis.</p>

<pre><code>wb1 = load_workbook(""file.xlsx"", read_only=True, data_only=True)
wb2 = Workbook(write_only=True)
for ws1 in wb1:
    ws2 = wb2.create_sheet(ws1.title)
    for r1 in ws1:
        ws2.append(r1) # this might need unpacking to use values
wb2.save(""copy.xlsx"")
</code></pre>
","2385133","","2385133","","2015-07-07 13:22:13","2015-07-07 13:22:13","","","","7","","",""
"31290685","2","","31267147","2015-07-08 10:59:23","","0","","<p>I fixed this by uninstalling coverage.py with pip and installing it using easy_install.</p>
","4700717","","","","","2015-07-08 10:59:23","","","","0","","",""
"31267171","2","","31267148","2015-07-07 11:20:38","","1","","<p>Just pass param for <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html#pandas.read_csv"" rel=""nofollow""><code>usecols</code></a>:</p>

<pre><code>In [160]:
t=""""""1;2;1;7.00;
2;32;2;0.76;
3;4;6;6.00;
4;1;5;4.00;""""""
‚Äãimport pandas as pd
import io
df = pd.read_csv(io.StringIO(t), sep=';', header=None, usecols=range(4))
df

Out[160]:
   0   1  2     3
0  1   2  1  7.00
1  2  32  2  0.76
2  3   4  6  6.00
3  4   1  5  4.00
</code></pre>

<p>Here I generate the list <code>[0,1,2,3]</code> to indicate which columns I'm interested in.</p>
","704848","","","","","2015-07-07 11:20:38","","","","0","","",""
"31267403","2","","31267174","2015-07-07 11:31:55","","1","","<p>If you are not in interactive mode, you might need to add <code>plt.figure()</code> before your code, and <code>plt.show()</code> after.</p>
","2996578","","","","","2015-07-07 11:31:55","","","","1","","",""
"31268992","2","","31267174","2015-07-07 12:49:27","","2","","<p>Adding <code>plt.show()</code> should do the trick, although if I may make a recomendation..this data would be better represented by a bar chart. Something like the following should do the trick:</p>

<pre><code>import pandas as pd
import matplotlib.pyplot as plt
import matplotlib

df = pd.DataFrame(data = BabyDataSet, columns=['Names', 'Births'])

matplotlib.style.use('ggplot')

ax = df['Births'].plot(kind = 'bar')
ax.set_xticklabels(df.Names)

ax.annotate('Most Popular Name: {}: {} births'.format(df.max().Names, df.max().Births),
        xy=(1, 1), 
        xytext=(1, 800))

ax.set_title(""Number of Births by Name"")
ax.set_ylabel(""No. Births"")

plt.show()
</code></pre>

<p><img src=""https://i.stack.imgur.com/8Rpnh.png"" alt=""enter image description here""></p>
","1493341","","1493341","","2015-07-07 13:38:05","2015-07-07 13:38:05","","","","0","","",""
"31269060","2","","31268331","2015-07-07 12:52:00","","1","","<p>This works fine:</p>

<pre><code>import threading
import time

class MyClass:
    def check_list(self, theList, arg1):
        keep_going=True
        while keep_going:
            print(""check list"")
            #do stuff
            time.sleep(1)

    def __init__(self, arg1):
        self.a_list = [""1"",""2""]
        t = threading.Thread(target=self.check_list, args=(self.a_list, arg1))
        t.start()

myObject = MyClass(""something"")
</code></pre>
","4720935","","","","","2015-07-07 12:52:00","","","","2","","",""
"31269337","2","","31268331","2015-07-07 13:04:18","","1","","<p>Figured out what was wrong thanks to the user Weeble's comment. When he said <em>'something is causing your main.py to run twice'</em> I remembered that Bottle has an argument that is called 'reloader'. When set to <strong>True</strong>, <strong>this will make the application load twice</strong>, and thus the thread creation is run twice as well.</p>
","2350986","","","","","2015-07-07 13:04:18","","","","0","","",""
"31269439","2","","31268359","2015-07-07 13:08:33","","0","","<p>If all you're looking for is a way to pass in arguments without prompting the user, you could use the library argparse to pass in <strong>command line arguments</strong>, see <a href=""https://docs.python.org/3/library/argparse.html"" rel=""nofollow"">https://docs.python.org/3/library/argparse.html</a></p>

<p>Another source of information would be an <strong>.ini file</strong>, which is handled by the module <em>ConfigParser</em> or any other file-based source like XML, shelve, json.</p>

<p>All these issues have the weakness, that you have to apply access protection for the file containing the credentials.</p>
","5085539","","1435475","","2015-07-07 14:16:55","2015-07-07 14:16:55","","","","1","","",""
"31269128","2","","31268364","2015-07-07 12:55:27","","2","","<p>Your code fails as you have already consumed the iterator on the first call, if you call <code>none_context()</code> in the with block the original code would work:</p>

<pre><code>none_context = contextmanager(lambda: iter([None]))
printing=False

with open(fa, ""r"") if printing else none_context() as writter, \
    open(fb, ""r"") if printing else none_context() as another_writter:
    print 1 if printing else 2
</code></pre>

<p>You can see using your original code that if you add a <code>None</code> for each open then the code will work as expected:</p>

<pre><code>none_context = contextmanager(lambda: iter([None,None,None]))()
printing=False

with open(fa, ""r"") if printing else none_context as writter, \
    open(fb, ""r"") if printing else none_context as another_writter,\
    open(fb, ""r"") if printing else none_context as another_writer3:
    print 1 if printing else 2
</code></pre>
","2141635","","","","","2015-07-07 12:55:27","","","","0","","",""
"31269006","2","","31268373","2015-07-07 12:50:14","","0","","<p>It looks like you are using <code>flask</code> as a framework:</p>

<p>Have a look at some of the example <a href=""https://exploreflask.com/views.html#url-converters"" rel=""nofollow"">here</a> and <a href=""http://code.runnable.com/Uh4qRmSwz8cHAAAN/how-to-perform-advanced-routing-in-flask-for-python-and-routes"" rel=""nofollow"">here</a>. </p>

<p>You can pass the form ID in as a URL parameter.</p>

<pre><code>@app.route('/pdf/&lt;formid&gt;/', methods=['GET', 'POST'])
def make_pdf(formid):
    ...
</code></pre>
","403043","","","","","2015-07-07 12:50:14","","","","2","","",""
"31268940","2","","31268453","2015-07-07 12:47:08","","0","","<p>If the CSV elements are positionally correct, can you not do something more straight forward i.e. as an example with the following data</p>

<pre><code>1,2,3
a,b,c
</code></pre>

<p>use the following;</p>

<pre><code>import sqlite3
con = sqlite3.connect("":memory:"")
cur = con.cursor()

cur.execute(""CREATE TABLE t (col1,col2,col3);"")

with open('database.csv', 'rb') as fp:
    for line in fp.readlines():
        cur.execute(""INSERT INTO t VALUES (?, ?, ?)"",line.strip().split(','))
con.commit()

for row in cur.execute(""select * from t;""):
    print row
</code></pre>
","5074334","","","","","2015-07-07 12:47:08","","","","0","","",""
"31269661","2","","31268453","2015-07-07 13:17:19","","0","","<p>This works. I used a few short cuts to save on typing.</p>

<pre><code>import csv
import sqlite3
import itertools

params = ['No', 'Source', 'Host', 'Link', 'Date', 'Time', 'time2', 'Category', 'AuthorId', 'AuthorName', 'AuthorUrl', 'Auth', 'Followers', 'Following', 'Age', 'Gender', 'Language', 'Country', 'Province', 'City', 'Location', 'Sentiment', 'Title', 'Snippet', 'Description', 'Tags', 'Contents', 'View', 'Comments', 'Rating', 'Favourites', 'Duration', 'Bio', 'UniqueId']

create_str = ""CREATE TABLE t (%s);"" % ', '.join('""%s""' % p for p in params)
insert_str = ""INSERT INTO t VALUES (%s)"" % ', '.join(itertools.repeat('?', len(params)))

with open('database.csv') as fin:
    dr = csv.DictReader(fin, fieldnames=params, skipinitialspace=True)
    lst = [tuple(d[p] for p in params) for d in dr]

con = sqlite3.connect("":memory:"")
cur = con.cursor()
cur.execute(create_str)

cur.executemany(insert_str, lst)
con.commit()

for row in cur.execute(""select * from t;""):
    print(row)
</code></pre>

<p>Note its bad practice to use string format operations to build up sql query strings. It can lead to sql injection attacks, if used with unknown input data. I am doing so here because the strings are only being built from known values and unknown input (that from the file) is built properly using the standard '?' placeholder with tuple passed to <code>execute</code> method.</p>

<p>Note also you have far too many parameters in one table. It should be more normalised across multiple tables, but I guess you will learn that at some point.</p>
","1540468","","1540468","","2015-07-08 01:14:53","2015-07-08 01:14:53","","","","2","","",""
"31272086","2","","31268494","2015-07-07 14:52:32","","1","","<p>I'm assuming you don't want to wait because you are using an external service (outside of your control) for sending email. If that's the case then setup a local SMTP server as a relay. Many services such as Amazon SES, SendGrid, Mandrill/Mailchimp have directions on how to do it. The application will only have to wait on the delivery to localhost (which should be fast and is within your control). The final delivery will be forwarded on asynchronously to the request/response. STMP servers are already built to handle delivery failures with retries which is what you might gain by moving to Celery.</p>
","61539","","","","","2015-07-07 14:52:32","","","","1","","",""
"31272562","2","","31272409","2015-07-07 15:11:31","","3","","<p>Add an optional quantifier <code>?</code> to the <code>value</code> part so that it is matched zero or one time</p>

<pre><code>&gt;&gt; regex = re.compile('(?P&lt;key&gt;[^=]+)(?:=(?P&lt;val&gt;.+))?')
&gt;&gt;&gt; regex.match('x=y').groupdict()
{'key': 'x', 'val': 'y'}
&gt;&gt;&gt; regex.match('x').groupdict()
{'key': 'x', 'val': None}
</code></pre>

<p><strong>Changes made</strong></p>

<ul>
<li><p>Moved the <code>=</code> to a non capturing group <code>(?:..)</code></p></li>
<li><p><code>(?:=(?P&lt;val&gt;.+))?</code> Matched zero or one time. This is ensured by the <code>?</code>. That is it checks if <code>=value</code> can be matched (capturing only the value part). If not <code>None</code> is captured.</p></li>
</ul>
","3150943","","3150943","","2015-07-07 15:18:12","2015-07-07 15:18:12","","","","0","","",""
"31272651","2","","31272409","2015-07-07 15:15:11","","0","","<p>Try this:</p>

<pre><code>regex = re.compile('(?P&lt;key&gt;[^=]+)(?:=(?P&lt;val&gt;.*))?')
</code></pre>

<p>Edited the regex</p>

<p>Test 1 :  'x=y' , then key='x' and val='y'</p>

<p>Test 2 :  'x=' , then key='x' and val=''</p>

<p>Test 3 :  'x' , then key='x' and val=None</p>
","5062974","","5062974","","2015-07-07 15:27:31","2015-07-07 15:27:31","","","","0","","",""
"31293713","2","","31272427","2015-07-08 13:09:49","","1","","<p>So, thanks to @MikeMcKerns' answer, I found how to get the job done with the <code>pathos</code> lib. I needed to get rid of all <code>pymongo</code> cursors, which (being generators) could not be pickled by <code>dill</code>; doing that solved the problem and I managed to run my code in parallel.</p>
","4258834","","","","","2015-07-08 13:09:49","","","","0","","",""
"31769680","2","","31769514","2015-08-02 07:47:26","","0","","<p>The <a href=""http://lxml.de/"" rel=""nofollow noreferrer""><code>lxml</code></a> lib is well suited for this:</p>

<p>With <code>sample.txt</code> and <code>sample.dtd</code> in the current working directory, you can simply run:</p>

<pre><code>from lxml import etree
parser = etree.XMLParser(dtd_validation=True)
tree = etree.parse(""sample.xml"", parser)
</code></pre>

<p>Results in:</p>

<pre><code>XMLSyntaxError: root and DTD name do not match 'node_description' and 'nodedescription', line 3, column 18
</code></pre>

<p>See <a href=""http://lxml.de/validation.html"" rel=""nofollow noreferrer"">here</a> for more detail.  Also, <a href=""https://stackoverflow.com/questions/22392180/using-python-and-lxml-to-validate-xml-against-an-external-dtd"">a related question</a></p>
","4582273","","-1","","2017-05-23 12:02:02","2015-08-02 07:47:26","","","","2","","",""
"31769537","2","","31769525","2015-08-02 07:26:45","","2","","<p>You're trying to mutate the list's respresenting string instead of using it's members to build your specific
representation. This is not the way to go.</p>

<p>Use <a href=""https://docs.python.org/3/library/functions.html#map"" rel=""nofollow""><code>map</code></a> to create strings and <a href=""https://docs.python.org/3/library/stdtypes.html#str.join"" rel=""nofollow""><code>str.join</code></a> to join the strings with your favorite separator:</p>

<pre><code>lst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(' '.join(map(str, lst)))
</code></pre>

<p>An alternative with a <a href=""https://www.python.org/dev/peps/pep-0289/"" rel=""nofollow"">generator expression</a>:</p>

<pre><code>lst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(' '.join((str(x) for x in lst)))
</code></pre>
","948550","","948550","","2015-08-02 07:44:32","2015-08-02 07:44:32","","","","1","","",""
"31769543","2","","31769525","2015-08-02 07:27:23","","2","","<p>You can do it with another loop, and using a comma after the <code>print</code>:</p>

<pre><code>for e in your_list:
   print e,
</code></pre>

<p><strong>Note:</strong> The comma will avoid printing a new-line character.</p>
","2670792","","","","","2015-08-02 07:27:23","","","","0","","",""
"32492220","2","","32491545","2015-09-10 02:39:22","","1","","<p>Your php script is executed by the <code>www</code> user.</p>

<ul>
<li><p>You could check if the <code>python</code> script interpreter is correctly called, it is usually in one of the directory in the <code>PATH</code> environment variable (like <code>/usr/bin/python</code>), but the <code>www</code> user don't have a <code>PATH</code> environment variable set.<br>
<strong>Solution</strong> specify the whole path to your <code>python</code> interpreter in your <code>shell_exec</code> call ( also specify the full path to your script when you're at it )</p></li>
<li><p>What about the path the <code>nltk</code> library is installed, you could check if the <code>python</code> interpreter would correctly look for it by looking at the <code>sys.path</code> while running <code>python</code> with the <code>www</code> user.<br>
<strong>Diagnostic</strong> : use the <code>shell_exec</code> call to run a python script to print the <code>sys.path</code> values
<strong>Solution</strong> : append the library path to the <code>sys.path</code> in your python script before the <code>import nltk</code></p></li>
</ul>

<p>These would be the most obvious solutions considering the information provided in the question.</p>

<p>Update :<br>
As there is 2 version version of python installed (on that haven't got the library installed ), it is recommended to specify the path to the desired interpreter. The first solution help correct the issue.
In unix like system I would recommend using <code>which python</code> command to determine the path of your default python interpreter.</p>
","105104","","105104","","2015-09-11 08:16:16","2015-09-11 08:16:16","","","","5","","",""
"32492406","2","","32491545","2015-09-10 03:01:50","","1","","<p><strong>Option 1</strong></p>

<p>Setup a simple python httpserver listening on localhost.  <a href=""https://stackoverflow.com/questions/13065306/how-to-execute-python-script-on-the-basehttpserver-created-by-python"">This old answer</a> might help but there are plenty of howtos out there. The advantage is that you don't have the overhead of starting the python interpreter each time the ntlk stuff needs to be executed and you don't have to worry about shell script executions, permissions etc. Disadvantage is a little of extra work and a little overhead.</p>

<p><strong>Option 2</strong>
Using a task queue. Whatever said and done it's not safe to execute commands from your web facing PHP scripts. If you are already using RabbitMQ or something similar you can use that here. Or else if you are using redis you can use the lpush, rpop methods to make redis behave like a queue. Disadvantage: the result is not immidiately available.</p>

<p><strong>Option 3</strong></p>

<p>Anbother strategy for your php script to enter the data into a table and setup your python script to run as a cron job to check the table once a minute. Disadvantage: the result is not immidiately available.</p>

<p><strong>Option 4</strong></p>

<p>Your current choice but please make sure that you have escaped the data properly by @lafor if this option is chosen @dvhh 's answer ought to work.</p>
","267540","","-1","","2017-05-23 11:58:08","2015-09-10 03:01:50","","","","0","","",""
"38958001","2","","38957908","2016-08-15 15:21:39","","1","","<p><code>n</code> should be incremented unconditionally. If it isn't the program gets stuck in an infinite loop the first time it encounters a non-prime.</p>

<pre><code>def primegen():
    n = 1
    while True:
        if isprime(n):
            print n
            cont = raw_input(""continue? Enter Y/N"")
            if cont == 'N':
                break
        n += 1
</code></pre>
","3142963","","","","","2016-08-15 15:21:39","","","","1","","",""
"38958593","2","","38957908","2016-08-15 16:01:04","","0","","<p>Your code is a bit chaotic, I would rewrite it like this:</p>

<pre><code>def isPrime(num):
    if num % 2 == 0:
        return True
    return False

n=1
while True:
    if isPrime(n):
        print n
        cont = raw_input(""Do you want to continue? (1,0) "")
        if not bool(int(cont)):
            break
    n += 1
</code></pre>
","6591030","","","","","2016-08-15 16:01:04","","","","0","","",""
"39000851","2","","38957961","2016-08-17 15:35:23","","4","","<p>The problem you have is that you want real-time updates against a database, which requires a db query each time. If you instead maintain a list of scores in memory, and update it at a more reasonable frequency (say once an hour, or even once a minute, if your players are really concerned with their rank), then the players will still experience real-time progress vs a score rank, and they can't really tell if there is a short lag in the updates.</p>

<p>With a sorted list of scores in memory, you can instantly get the player's rank (where by instantly, I mean O(lg n) lookup in memory) at the cost of the memory to cache, and of course the time to update the cache when you want to. Compared to a db query of 100k records every time someone wants to glance at their rank, this is a much better option.</p>

<p>Elaborating on the sorted list, you must query the db to get it, but you can keep using it for a while. Maybe you store the last_update, and re-query the db only if this list is ""too old"". So you update quickly by not trying to update all the time, but rather just enough to feel like real-time.</p>

<p>In order to find someone's rank nearly instantaneously, you use the bisect module, which supports binary search in a sorted list. The scores are sorted when you get them.</p>

<pre><code>from bisect import bisect_left

# suppose scores are 1 through 10
scores = range(1, 11)

# get the insertion index for score 7
# subtract it from len(scores) because bisect expects ascending sort
# but you want a descending rank
print len(scores) - bisect_left(scores, 7)
</code></pre>

<p>This says that a 7 score is rank 4, which is correct.</p>
","1766544","","1766544","","2016-08-17 16:03:58","2016-08-17 16:03:58","","","","2","","",""
"39002736","2","","38957961","2016-08-17 17:18:25","","0","","<p>That kind of information can be pulled using SQLAlchemy's sort_by function. If you perform a Query like:</p>

<pre><code>leaderboard = session.query(Player).order_by(Player.score).all()
</code></pre>

<p>You will have the list of Players sorted by their score. Keep in mind that every time you do this you do an I/O with the database which can be rather slow instead of saving the data python variables. </p>
","2277088","","","","","2016-08-17 17:18:25","","","","0","","",""
"39043000","2","","38957961","2016-08-19 15:40:22","","6","","<p>Redis sorted sets help with this exact situation (the documentation uses leader boards as the example usage) <a href=""http://redis.io/topics/data-types-intro#redis-sorted-sets"">http://redis.io/topics/data-types-intro#redis-sorted-sets</a></p>

<ul>
<li>The key commands you care about are ZADD (update player rank) and ZRANK (get rank for specific player). Both operations are O(log(N)) complexity.</li>
</ul>

<p>Redis can be used as a cache of player ranking. When your application starts, populate redis from the SQL data. When updating player scores in mysql also update redis.</p>

<p>If you have multiple server processes/threads and they could trigger player score updates concurrently then you should also account for the mysql/redis update race condition, eg:</p>

<ul>
<li>only update redis from a DB trigger; or</li>
<li>serialise player score updates; or</li>
<li>let data get temporarily out of sync and do another cache update after a delay; or</li>
<li>let data get temporarily out of sync and do a full cache rebuild at fixed intervals</li>
</ul>
","6653190","","","","","2016-08-19 15:40:22","","","","0","","",""
"38958044","2","","38957964","2016-08-15 15:23:33","","0","","<p><code>MainWindow</code> is a class, not an object. What you should do instead is something like:</p>

<pre><code>class B(Thread):
    def __init__(self, target):
        self.__target = target

    def run(self):
        self.__target.setprogressBar(48)

MAINWIN = MainWindow()

bi = B(MAINWIN)
bi.start()

MAINWIN.show()
</code></pre>
","3058609","","","","","2016-08-15 15:23:33","","","","1","","",""
"38958092","2","","38958048","2016-08-15 15:26:59","","7","","<p>Something like this:</p>

<pre><code>r'\w*[0-9]\w*'
</code></pre>

<p>That should match any contiguous run of word characters containing at least one digit.</p>
","3890632","","","","","2016-08-15 15:26:59","","","","0","","",""
"38958451","2","","38958114","2016-08-15 15:51:35","","1","","<p>You may want to use <a href=""http://docs.ansible.com/ansible/playbooks_variables.html#local-facts-facts-d"" rel=""nofollow"">facts.d</a> and place your python script there to be available as a fact.<br>
Or write a simple action plugin that returns json object to eliminate the need in stdout->from_json conversion.</p>
","2795592","","","","","2016-08-15 15:51:35","","","","0","","",""
"38964290","2","","38958212","2016-08-15 23:03:51","","0","","<p>I hope you find this solution satisfactory:</p>

<pre><code>import re

data = """"""
Views 2.x-dev
Viewfield 6.x-2.x, xxxx-xx-xx
Version 6.x-2.3
ctools 7.x-1.x-dev
XML sitemap 6.x-1, 2009-08-24
6.x-1.6
""""""
## Solution 1: 
## 1) Finds all results that matches with the pattern 
## '&lt;number&gt;.x-&lt;other_chars&gt;' in a not greedy way 
## (that is why the '?')
## 2) Treat the found match and remove any ','

results = []
for result in re.findall( r""[0-9]\.x{1}\-.*x?"", data ):
    results.append(result.split("","")[0])

print (results)

## Solution 2: (and my favourite)
## Create a list with those words that matches the pattern 
## &lt;number&gt;.x at their beginning
## The words are the result of splitting the 'data' with the
## split function from the regex module with a
## non-capturing version of regular parentheses.

result = [ x  for x in re.split(r'(?:,|\s)\s*', data) \ 
           if re.match(r'^[0-9].x',x) ]

print (result)
</code></pre>
","3595315","","3595315","","2016-08-17 19:28:57","2016-08-17 19:28:57","","","","0","","",""
"39005037","2","","38958212","2016-08-17 19:44:01","","0","","<p>As already said in the comments:</p>

<pre><code>import re

rx = re.compile(r'\b\d\.[-.xdev\d]+\b')

data = """"""
Views 2.x-dev
Viewfield 6.x-2.x, xxxx-xx-xx
Version 6.x-2.3
ctools 7.x-1.x-dev
XML sitemap 6.x-1, 2009-08-24
6.x-1.6
""""""

versions = rx.findall(data)
print(versions)
# ['2.x-dev', '6.x-2.x', '6.x-2.3', '7.x-1.x-dev', '6.x-1', '6.x-1.6']
</code></pre>

<p><hr>
See <a href=""https://regex101.com/r/xM2hR5/1"" rel=""nofollow""><strong>a demo on regex101.com</strong></a>.</p>
","1231450","","","","","2016-08-17 19:44:01","","","","0","","",""
"38958939","2","","38958233","2016-08-15 16:22:18","","1","","<p>You are trying to bind to an IP address that is not actually assigned to your network interface:</p>

<pre><code>bind_ip = ""184.168.237.1""
</code></pre>

<p>See the <a href=""https://msdn.microsoft.com/en-gb/library/windows/desktop/ms740668(v=vs.85).aspx"" rel=""nofollow""><em>Windows Sockets Error Codes</em> documentation</a>:</p>

<blockquote>
  <p><strong>WSAEADDRNOTAVAIL</strong> 10049<br>
  <em>Cannot assign requested address.</em></p>
  
  <p>The requested address is not valid in its context. This normally results from an attempt to bind to an address that is not valid for the local computer.</p>
</blockquote>

<p>That may be an IP address that your router is listening to before using NAT (network address translation) to talk to your computer, but that doesn't mean your computer sees that IP address at all.</p>

<p>Either bind to <code>0.0.0.0</code>, which will use all available IP addresses (both localhost and any public addresses configured):</p>

<pre><code>bind_ip = ""0.0.0.0""
</code></pre>

<p>or use any address that your computer is configured for; run <code>ipconfig /all</code> in a console to see your network configuration.</p>

<p>You probably also don't want to use ports &lt; 1024; those are reserved for processes running as root only. You'll have to pick a higher number than that if you want to run an unprivileged process (and in the majority of tutorials programs, that is exactly what you want):</p>

<pre><code>port = 5021  # arbitrary port number higher than 1023
</code></pre>

<p>I believe the specific tutorial you are following uses <code>BIND_IP = '0.0.0.0'</code> and <code>BIND_PORT = 9090</code>.</p>
","100297","","100297","","2016-08-15 16:29:19","2016-08-15 16:29:19","","","","0","","",""
"38960694","2","","38960631","2016-08-15 18:21:18","","2","","<p>You need to convert the list to numpy array in order to use vectorized operation such as <code>==</code> and <code>&amp;</code>:</p>

<pre><code>import numpy as np
np.where((np.array(x) == ""A"") &amp; (np.array(y) == ""2""))
# (array([1, 5]),)
</code></pre>

<p>Shorter version (if you are sure that x and y are numpy arrays):</p>

<pre><code>&gt;&gt;&gt; np.where(np.logical_and(x == 'A', y == '2'))
(array([1, 5]),)
</code></pre>
","4983450","","1005215","","2016-08-15 18:26:42","2016-08-15 18:26:42","","","","0","","",""
"38960750","2","","38960631","2016-08-15 18:25:08","","2","","<p>pure python solution:</p>

<pre><code>&gt;&gt;&gt; [i for i,j in enumerate(zip(x,y)) if j==('A','2')]
[1, 5]
</code></pre>
","1682131","","","","","2016-08-15 18:25:08","","","","0","","",""
"38960855","2","","38960631","2016-08-15 18:32:09","","1","","<p>If you want to work with lists:</p>

<pre><code>idx1 = [i for i, x in enumerate(x) if x == 'A']
idx2 = [i for i, x in enumerate(y) if x == '2']
list(set(idx1).intersection(idx2))
</code></pre>
","4838024","","","","","2016-08-15 18:32:09","","","","0","","",""
"38961132","2","","38960708","2016-08-15 18:50:58","","1","","<p>Here's the culprit:</p>

<pre><code>profile = models.ForeignKey(Profile, default=Profile)
#                                    ^^^^^^^^^^^^^^^
</code></pre>

<p>You can't set a Model class as a <code>Foreignkey</code> default. If you're thinking of setting an <em>hardcoded</em> default then you should use an <code>int</code> and be sure the selected value exists as a key in your <code>Profile</code> model.</p>
","3125566","","3125566","","2016-08-15 18:57:24","2016-08-15 18:57:24","","","","2","","",""
"38960864","2","","38960714","2016-08-15 18:32:46","","2","","<p>Here's one way to use <code>itertools</code> for this problem.</p>

<pre><code>import itertools

def makenum(digits):
    return int(''.join(map(str, digits)))

for p in itertools.permutations(range(10)):
    a = makenum(p[:5])
    b = makenum(p[5:])
    if a == 9 * b:
        print(a, b)
</code></pre>
","2144669","","","","","2016-08-15 18:32:46","","","","5","","",""
"38961088","2","","38960714","2016-08-15 18:48:11","","2","","<p>Take advantage of algebra:</p>

<pre><code>a / b = 9 == a = 9 * b
</code></pre>

<p>Knowing that, you only have to bother generating the values:</p>

<pre><code>[(9*num, num) for num in range(10000, 100000)]
</code></pre>

<p>If you need to filter things out by some criteria, you can easily write a filter function:</p>

<pre><code>def unique_numbers(num):
    num = str(num)
    return len(num) == len(set(num))

[(9*num, num) for num in range(10000, 100000) if unique_numbers(num) and unique_numbers(9*num)]
</code></pre>

<p>If you wanted to shorten things a bit, you could re-write your function so that it returns the valid pair, or <code>None</code> otherwise.</p>

<pre><code>def good_nums_or_none(num):
    a = num * 9
    b = num
    str_a = str(a)
    str_b = str(b)
    if len(a) == len(set(a)) and len(b) == len(set(b)):
         return a, b
    else:
         return None

[nums for nums in (good_nums_or_none(num) for num in range(10000, 100000)) if nums is not None]
</code></pre>

<p>Or, just create a generator and iterate over that:</p>

<pre><code> def target_numbers(factor=9, min=10000, max=100000):
     cur = min
     while cur &lt; max:
         a = factor*cur
         b = cur
         str_a = str(a)
         str_b = str(b)
         if len(a) == len(set(a)) and len(b) == len(set(b)):
             yield a, b

 [num for num in target_numbers()]
</code></pre>

<p>If you want to allow zero padded numbers in <code>b</code> then you can use this filter:</p>

<pre><code>def target_numbers(factor=9, min=1000, max=100000):
    cur = min                                      
    while cur &lt; max:                               
        b = cur                                    
        a = factor*cur                             
        text = str(a) + str(b).zfill(5)            
        if len(text) == len(set(text)):            
            yield a, b                             
        cur += 1    
</code></pre>
","344286","","344286","","2016-08-15 19:33:24","2016-08-15 19:33:24","","","","14","","",""
"38961197","2","","38960714","2016-08-15 18:54:58","","1","","<p>Runs in <strong>0.7 secs</strong>. Faster than most solutions mentioned, though bit clumsy.</p>

<pre><code>def sol(a,b,zero):
  for i in range(a,b):
     fl = 0
     marked = 10*[0]
     marked[0] = zero
     tmp = i
     while tmp &gt; 0:
       marked[tmp%10] = marked[tmp%10] + 1
       tmp = tmp/10
     numerator = i*9

     while numerator &gt; 0:
       marked[numerator%10] = marked[numerator%10] + 1
       numerator = numerator/10

     for j in range(10):
        if marked[j] != 1:
           fl = 1

     if fl == 0:
        print ""found a solution "",i*9,""/"",i


sol(1000,10000,1)
sol(10000,100000,0)
</code></pre>

<p>The solution printed is:</p>

<pre><code> found a solution  57429 / 6381
 found a solution  58239 / 6471
 found a solution  75249 / 8361
 found a solution  95742 / 10638
 found a solution  95823 / 10647
 found a solution  97524 / 10836
</code></pre>
","2437292","","2437292","","2016-08-15 19:22:55","2016-08-15 19:22:55","","","","4","","",""
"38961307","2","","38960714","2016-08-15 19:01:03","","0","","<p>This is a minor variation on @David's answer.</p>

<p>If we look at <code>itertools.permutations([1,2,3,4])</code></p>

<pre><code>&gt;&gt;&gt; for p in itertools.permutations([1,2,3,4]):
...     print(p)
...
(1, 2, 3, 4)
(1, 2, 4, 3)
(1, 3, 2, 4)
(1, 3, 4, 2)
(1, 4, 2, 3)
(1, 4, 3, 2)
(2, 1, 3, 4)
(2, 1, 4, 3)
(2, 3, 1, 4)
(2, 3, 4, 1)
(2, 4, 1, 3)
(2, 4, 3, 1)
(3, 1, 2, 4)
(3, 1, 4, 2)
(3, 2, 1, 4)
(3, 2, 4, 1)
(3, 4, 1, 2)
(3, 4, 2, 1)
(4, 1, 2, 3)
(4, 1, 3, 2)
(4, 2, 1, 3)
(4, 2, 3, 1)
(4, 3, 1, 2)
(4, 3, 2, 1)
</code></pre>

<p>You'll notice that for a tuple <code>(a,b,c,d)</code>, <code>(c,d,a,b)</code> also appears.  If a number <code>a == 9*b</code>, then <code>b != a*9</code>.  We'll use this to our advantage.</p>

<p>Also, note that if <code>a = 9*b</code>, <code>a</code> must be bigger than <code>b</code>, unless we're using negative numbers or non-integers.</p>

<p>You'll see that as we look at the results, splitting the tuples in half and turning them into numbers gives, initially, a small number followed by a larger number.  This is a side effect of passing <code>permutations</code> a sorted list.  Again, we can use this to our advantage.</p>

<pre><code>import itertools

def makenum(digits):
    return int(''.join(map(str, digits)))

for p in itertools.permutations(range(10)):
    first_half = makenum(p[:5])    
    second_half = makenum(p[5:])
    if second_half &lt; first_half: # first half is smaller for first half of permutations, second half of permutations has been covered, backwards.
        break
    if second_half == 9 * first_half:
        print(first_half, second_half)
</code></pre>

<p>If you're taking user input, you should be able to get the same result simply by <code>sort</code>ing your input:</p>

<pre><code>for p in itertools.permutations(sorted(digits)):
    # ...
</code></pre>
","105886","","","","","2016-08-15 19:01:03","","","","0","","",""
"38961548","2","","38960714","2016-08-15 19:16:56","","2","","<p>Adapting Wayne Werner's solution you can do this to add the digit uniqueness constraint (assuming Python 3):</p>

<pre><code>[(9*num, num) 
 for num in range(10000, 100000 // 9) 
 if len(set(str(num) + str(num * 9))) == 10]
</code></pre>

<p>This runs in 1.5 ms on my machine.</p>

<p>Note, that you can only check numbers between 10000 and 100000 / 9 = 11111. </p>

<p>And if you want to allow preceding zeros, you can do it like this:</p>

<pre><code>[(9*num, num) 
 for num in range(0, 100000 // 9) 
 if len(set((""%05d"" % num) + (""%05d"" % (num * 9)))) == 10]
</code></pre>

<p>And this one takes 15 ms.</p>
","1098230","","","","","2016-08-15 19:16:56","","","","8","","",""
"38961806","2","","38961251","2016-08-15 19:34:50","","5","","<p>I believe that the cause of this problem is <a href=""https://spark.apache.org/docs/1.2.0/api/python/pyspark.html?highlight=coalesce#pyspark.RDD.coalesce"" rel=""nofollow noreferrer"">coalesce()</a>, which despite the fact that it avoids a full shuffle (like <a href=""https://stackoverflow.com/questions/31610971/spark-repartition-vs-coalesce"">repartition would do</a>), it has to shrink the data in the requested number of partitions.</p>

<p>Here, you are requesting all the data to fit into one partition, thus one task (and only one task) has to work with <em>all the data</em>, which may cause its container to suffer from memory limitations.</p>

<p>So, either ask for more partitions than 1, or avoid <code>coalesce()</code> in this case.</p>

<hr>

<p>Otherwise, you could try the solutions provided in the links below, for increasing your memory configurations:</p>

<ol>
<li><a href=""https://stackoverflow.com/questions/21138751/spark-java-lang-outofmemoryerror-java-heap-space"">Spark java.lang.OutOfMemoryError: Java heap space</a></li>
<li><a href=""https://stackoverflow.com/questions/22637518/spark-runs-out-of-memory-when-grouping-by-key"">Spark runs out of memory when grouping by key</a></li>
</ol>
","2411320","","1560062","","2017-09-09 12:20:15","2017-09-09 12:20:15","","","","0","","",""
"39106641","2","","38961251","2016-08-23 16:43:24","","2","","<p>The problem for me was indeed <code>coalesce()</code>. 
What I did was exporting the file not using <code>coalesce()</code> but parquet instead using <code>df.write.parquet(""testP"")</code>. Then read back the file and export that with <code>coalesce(1)</code>.</p>

<p>Hopefully it works for you as well.</p>
","3291563","","2411320","","2016-08-23 18:11:56","2016-08-23 18:11:56","","","","0","","",""
"41681999","2","","38961251","2017-01-16 17:36:21","","0","","<p>In my case the driver was smaller than the workers. Issue was resolved by making the driver larger.  </p>
","7274944","","7274944","","2017-03-29 16:44:10","2017-03-29 16:44:10","","","","0","","",""
"38975543","2","","38961252","2016-08-16 12:54:24","","0","","<p><code>pcolorfast</code> works best for large arrays and updates quickly.</p>
","6667934","","","","","2016-08-16 12:54:24","","","","0","","",""
"38961389","2","","38961284","2016-08-15 19:06:42","","2","","<p>I think there are two parts to your issue. The first is ""what's wrong with <code>pcl</code> in the current code?"", and the second is ""why do I need the <code>if __name__ == ""__main__""</code> guard block at all?"".</p>

<p>Lets address them in order. The problem with the <code>pcl</code> variable is that it is only defined in the <code>if</code> block, so if the module gets loaded without being run as a script (which is what sets <code>__name__ == ""__main__""</code>), it will not be defined when the later code runs.</p>

<p>To fix this, you can change how your code is structured. The simplest fix would be to guard the other bits of the code that use <code>pcl</code> within an <code>if __name__ == ""__main__""</code> block too (e.g. indent them all under the current block, perhaps). An alternative fix would be to put the code that uses <code>pcl</code> into functions (which can be declared outside the guard block), then call the functions from within an <code>if __name__ == ""__main__""</code> block. That would look something like this:</p>

<pre><code>def do_stuff_with_pcl(pcl):
    print(pcl)

if __name__ == ""__main__"":
    # multiprocessing code, etc
    pcl = ...
    do_stuff_with_pcl(pcl)
</code></pre>

<p>As for why the issue came up in the first place, the ultimate cause is using the <code>multiprocessing</code> module on Windows. You can read about the issue in <a href=""https://docs.python.org/2/library/multiprocessing.html#windows"" rel=""nofollow"">the documentation</a>.</p>

<p>When multiprocessing creates a new process for its <code>Pool</code>, it needs to initialize that process with a copy of the current module's state. Because Windows doesn't have <code>fork</code> (which copies the parent process's memory into a child process automatically), Python needs to set everything up from scratch. In each child process, it loads the module from its file, and if you the module's top-level code tries to create a new <code>Pool</code>, you'd have a recursive situation where each of the child process would start spawning a whole new set of child processes of its own.</p>

<p>The <code>multiprocessing</code> code has some guards against that, I think (so you won't <a href=""https://en.wikipedia.org/wiki/Fork_bomb"" rel=""nofollow"">fork bomb</a> yourself out of simple carelessness), but you still need to do some of the work yourself too, by using <code>if __name__ == ""__main__""</code> to guard any code that shouldn't be run in the child processes.</p>
","1405065","","1405065","","2016-08-16 05:38:25","2016-08-16 05:38:25","","","","2","","",""
"38961568","2","","38961293","2016-08-15 19:18:09","","0","","<p>The answer is quite simple. Although it is a proxy service, it doesn't guarantee 100% anonymity. When you send the HTTP GET request via the proxy server, the request sent by your program to the proxy server is:</p>

<pre><code>GET http://www.whatsmybrowser.org/ HTTP/1.1
Host: www.whatsmybrowser.org
Connection: keep-alive
Accept-Encoding: gzip, deflate
Accept: */*
User-Agent: python-requests/2.10.0
</code></pre>

<p>Now, when the proxy server sends this request to the actual destination, it sends:</p>

<pre><code>GET http://www.whatsmybrowser.org/ HTTP/1.1
Host: www.whatsmybrowser.org
Accept-Encoding: gzip, deflate
Accept: */*
User-Agent: python-requests/2.10.0
Via: 1.1 naxserver (squid/3.1.8)
X-Forwarded-For: 122.126.64.43
Cache-Control: max-age=18000
Connection: keep-alive
</code></pre>

<p>As you can see, it throws your IP (in my case, <code>122.126.64.43</code>) in the HTTP header: <code>X-Forwarded-For</code> and hence the website knows that the request was sent on behalf of <code>122.126.64.43</code></p>

<p>Read more about this header at: <a href=""https://tools.ietf.org/html/rfc7239"" rel=""nofollow"">https://tools.ietf.org/html/rfc7239</a></p>

<p>If you want to host your own squid proxy server and want to disable setting <code>X-Forwarded-For</code> header, read: <a href=""http://www.squid-cache.org/Doc/config/forwarded_for/"" rel=""nofollow"">http://www.squid-cache.org/Doc/config/forwarded_for/</a></p>
","1005215","","","","","2016-08-15 19:18:09","","","","0","","",""
"38961378","2","","38961327","2016-08-15 19:06:19","","2","","<p>You can retrieve the path from the <code>__file__</code> attribute of the file. Use <code>os.path.abspath</code> on that attribute to retrieve the absolute path of the file and then <code>os.path.dirname</code> to retrieve the containing directory:</p>

<pre><code>import os

file_directory = os.path.dirname(os.path.abspath(__file__))
path = os.path.join(file_directory, other_path) # join directory to an inner path
roto.command.CommandExecute('MACRO EXEC({})'.format(path))
</code></pre>

<p>Use <code>os.path.dirname</code> recursively to move out as many directories as you want.</p>
","3125566","","3125566","","2016-08-15 19:22:48","2016-08-15 19:22:48","","","","3","","",""
"39077066","2","","38961360","2016-08-22 10:23:59","","2","","<p>In openpyxl you'll have to go cell by cell.</p>

<p>You could use Excel's builtin Data Validation or Conditional Formatting, which openpyxl supports, for this. Let Excel do the work and talk to it using xlwings.</p>
","2385133","","","","","2016-08-22 10:23:59","","","","0","","",""
"39088757","2","","38961360","2016-08-22 21:07:09","","1","","<p>I ended up just manually looking at each cell. I have to read them all into my data structures before I can process anything anyways so it actually made sense to check then.</p>
","3794870","","","","","2016-08-22 21:07:09","","","","0","","",""
"38963769","2","","38963631","2016-08-15 22:06:27","","0","","<p>Your current working directory should be the directory of your makefile, which should be <code>docs</code>.</p>
","1513933","","","","","2016-08-15 22:06:27","","","","1","","",""
"38963810","2","","38963631","2016-08-15 22:10:09","","2","","<p>Try doing this for your path insertion instead:</p>

<pre><code>sys.path.insert(0, os.path.abspath('../'))
</code></pre>

<p>Also consider a better name for your directory than <code>src</code>.</p>
","2658917","","2658917","","2016-08-15 23:20:47","2016-08-15 23:20:47","","","","2","","",""
"38964103","2","","38963653","2016-08-15 22:42:19","","1","","<p>This has nothing to do with the parser, you'll see the same behavior just from <code>mktime()</code> alone, since <code>datetime.timetuple()</code> doesn't have any time zone offset information, and <code>mktime()</code> is the inverse of <code>localtime</code>. You can correct this by converting it to <code>localtime</code> before calling <code>timetuple()</code>:</p>

<pre><code>from time import mktime
from datetime import datetime
from dateutil import tz

dt_base = datetime(2012, 11, 9, 9, 4, 2)

dt_est = dt_base.replace(tzinfo=tz.tzoffset('EST', -5 * 3600))
dt_pst = dt_base.replace(tzinfo=tz.tzoffset('PST', -8 * 3600))

def print_mktime(dt):
    print(mktime(dt.timetuple()))

# Run in UTC
print_mktime(dt_est)   # 1352469842.0
print_mktime(dt_pst)   # 1352469842.0

# Convert to local time zone first first
print_mktime(dt_est.astimezone(tz.tzlocal())) # 1352469842.0
print_mktime(dt_pst.astimezone(tz.tzlocal())) # 1352480642.0
</code></pre>

<p>Note that there is a chart on the <a href=""https://docs.python.org/3/library/time.html"" rel=""nofollow"">documentation for <code>time()</code></a> (<a href=""https://docs.python.org/2/library/time.html"" rel=""nofollow"">python 2.x docs</a>) that tells you how to convert between these representations:</p>

<pre><code>From                        To                           Use
---------------------------------------------------------------------------
seconds since the epoch   | struct_time in UTC        |  gmtime()
seconds since the epoch   | struct_time in local time |  localtime()
struct_time in UTC        | seconds since the epoch   |  calendar.timegm()
struct_time in local time | seconds since the epoch   |  mktime()
</code></pre>

<p>My personal preference would be to convert the parsed date to UTC, in which case <code>calendar.timegm()</code> would be the appropriate function:</p>

<pre><code>from calendar import timegm
def print_timegm(dt):
    print(timegm(dt.timetuple()))

print_timegm(dt_est.astimezone(tz.tzutc())) # 1352469842.0
print_timegm(dt_pst.astimezone(tz.tzutc())) # 1352480642.0
</code></pre>
","467366","","467366","","2016-08-15 22:48:15","2016-08-15 22:48:15","","","","4","","",""
"38970460","2","","38963698","2016-08-16 08:51:20","","1","","<p>The refactored ""Version 2"" code in the question suffers from a concurrency / timing problem.</p>

<p><code>sse_request()</code> is called for each of the web-clients  (in the test case 3 instances). We thus have 3 instances looping in <code>event_stream()</code>.</p>

<p>These calls happen ""more or less"" in parallel: which actually means in random sequence.</p>

<p>However the list <code>change_objects</code> is shared, so the first web-client that spots a change will update the ""old"" copy in the shared <code>WalkReporter</code> instance to the latest state, and may do so before the other clients spot the change. i.e. the first successful web-client effectively hides the change from the other web-clients.</p>

<p>This is easily fixed, by giving each web-client its own copy of <code>change_objects</code>. </p>

<p>i.e. <code>change_objects</code> is moved into <code>sse_request()</code> as shown below.</p>

<pre><code>@app.route('/server_events')
def sse_request():
    change_objects = [
        WalkReporter(name=""walk1"", reportee=walks[0]),
        ... more objects to be tracked...
    ]
    return Response(
            event_stream(change_objects),
            mimetype='text/event-stream')
</code></pre>

<p>With this minor change, each instance of <code>sse_request()</code> can spot the changes, and thus all the web-clients receive the sse-events as expected.</p>
","5675083","","","","","2016-08-16 08:51:20","","","","0","","",""
"38963782","2","","38963711","2016-08-15 22:07:39","","1","","<p>Okay, i've used the API docs and found the problem.
The parameter you need to use to order the data is: ""order=asc|desc"", and not ""sort_order"" as previously thought.</p>

<p>Please use this function:</p>

<pre><code>def download_contract_from_quandl(contract, dl_dir):
""""""
Download an individual futures contract from Quandl and then
store it to disk in the 'dl_dir' directory. An auth_token is
required, which is obtained from the Quandl upon sign-up.
""""""
# Construct the API call from the contract and auth_token
api_call = ""https://www.quandl.com/api/v3/datasets/""
api_call += ""CME/%s.csv"" % contract
# If you wish to add an auth token for more downloads, simply
# comment the following line and replace MY_AUTH_TOKEN with
# your auth token in the line below
params = ""?auth_token=YOUR_TOKEN""
params += ""&amp;order=asc""
full_url = ""%s%s"" % (api_call, params)

# Download the data from Quandl
data = requests.get(full_url).text
# Store the data to disk
fc = open('%s/%s.csv' % (dl_dir, contract), 'w')
fc.write(data)
</code></pre>

<p>Note:
The way you are using the api, by simple http request, altough works, is the not the ideal way to use their API.
There is a python package called Quandl, you can install like so:</p>

<pre><code>pip3 install quandl
</code></pre>

<p>On your system.
Also then you would have a single (and not multiple using auth_token=YOUR_TOKEN in each request) auth call like so:</p>

<pre><code>quandl.ApiConfig.api_key = 'YOUR_TOEKN'
</code></pre>

<p>And then each api call will be simple and elegent using their package instead or creating an http request manually, like so:</p>

<pre><code>data = quandl.get(""CME/ESH2010.csv"", order=""asc"")
</code></pre>

<p>I will advise using the second method of using the API, but both will work perfectly.</p>

<p>Cheers, Or.</p>
","3315590","","3315590","","2016-08-16 10:24:00","2016-08-16 10:24:00","","","","10","","",""
"38964654","2","","38963734","2016-08-15 23:50:21","","1","","<p>use the <code>s</code> parameter.</p>

<pre><code>from pandas.tools.plotting import scatter_matrix

df = pd.DataFrame(np.random.rand(10, 2))
scatter_matrix(df, alpha=0.5, figsize=(8, 8), diagonal='kde', s=1000)
</code></pre>

<p><a href=""https://i.stack.imgur.com/Ry1Zr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Ry1Zr.png"" alt=""enter image description here""></a></p>
","2336654","","","","","2016-08-15 23:50:21","","","","0","","",""
"38963870","2","","38963751","2016-08-15 22:16:19","","1","","<p>This is not about django but about html in general. This is your template:</p>

<pre><code>&lt;div class=""form-group""&gt;
    &lt;div class=""checkbox""&gt;
        &lt;label&gt;&lt;input type=""checkbox"" name=""{{ form.primal.name }}"" value=""True"" id=""primal1""&gt;Primal&lt;/label&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>Your checkbox, when unchecked, will not fly because it will not make a <code>{{ form.primal.name }}=True</code> in the url or post body.</p>

<p>To solve your problem, you should ensure a way to add <code>{{ form.primal.name }}=False</code> to the url. The standard solution involves a fixed additional field (a hidden one) like this:</p>

<pre><code>&lt;div class=""form-group""&gt;
    &lt;div class=""checkbox""&gt;
        &lt;input type=""hidden"" name=""{{ form.primal.name }}"" value=""False"" /&gt;
        &lt;label&gt;&lt;input type=""checkbox"" name=""{{ form.primal.name }}"" value=""True"" id=""primal1""&gt;Primal&lt;/label&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>Which will generate a query string part like <code>{{ form.primal.name }}=False</code> if checkbox is unchecked, or <code>{{ form.primal.name }}=False&amp;{{ form.primal.name }}=True</code> if checkbox is checked. In this case, only the latter occurrence counts, so you will have <code>""True""</code> when checked and <code>""False""</code> when unchecked.</p>
","1105249","","","","","2016-08-15 22:16:19","","","","1","","",""
"38963918","2","","38963816","2016-08-15 22:21:29","","1","","<p>Here's a working example, it's written to be executed on python 2.x:</p>

<pre><code>import sys

try:
    x = int(raw_input(""Please provide a value for x (between 5 and 25): ""))

    if x &lt; 5 or x &gt; 25:
        print('Your entry is not valid {0}.' +
              'Please provide a number between 5 and 25'.format(x))
    else:
        exp = 2 ** x
        print(exp)
except ValueError as v:
    print('You did not enter a valid integer {0}'.format(v))
</code></pre>

<p>One advice though, try carefully to read &amp; understand all the code and start
tweaking it here and there to make it yours. You won't learn too much using other's code 'as it is', next time try to be more specific asking which specific parts of your code don't understand :)</p>

<p>Have fun learning python!</p>
","3809375","","","","","2016-08-15 22:21:29","","","","3","","",""
"38964486","2","","38963816","2016-08-15 23:28:39","","0","","<p>The way you define custom exceptions in python is as shown below. You need to define each custom exception as a subclass of the Exception class. You can then catch your own custom exceptions with a catch-except block.</p>

<pre><code>import sys

class TooSmallExc(Exception):
    def __init__(self):
        Exception.__init__(self,""The number is less than 5"") 

class TooLargeExc(Exception):
    def __init__(self):
        Exception.__init__(self,""The number is greater than 25"") 

print 'How are you?'
i = raw_input(""Please provide a value for x (between 5 and 25): "" )

try:
    x = int(i)
    if x&lt;5:
    raise TooSmallExc
    if x&gt;25:
    raise TooLargeExc
except ValueError:
    print 'I just caught a ValueError exception, which is a Python built-in exception'
except TooSmallExc:
    print 'I just caught a custom exception that I made for integers less than 5'
except TooLargeExc:
    print 'I just caught a custom exception that I made for integers greater than 25'
</code></pre>
","454610","","454610","","2016-08-15 23:34:40","2016-08-15 23:34:40","","","","0","","",""
"38963940","2","","38963822","2016-08-15 22:23:50","","2","","<p>If <code>item_info</code> is a <code>RawQuerySet</code>, try <code>{% if item_info.all %}</code> instead of <code>{% if item_info %}</code>. <code>RawQuerySet</code> does not define a <code>__bool__()</code> method, so the instances are always considered <code>True</code>. See the warnings in <a href=""https://docs.djangoproject.com/en/1.10/topics/db/sql/#performing-raw-queries"" rel=""nofollow"">this section</a> of the docs, repeated below, just in case this link dies in the future:</p>

<blockquote>
  <p>While a RawQuerySet instance can be iterated over like a normal
  QuerySet, RawQuerySet doesn‚Äôt implement all methods you can use with
  QuerySet. For example, <strong>bool</strong>() and <strong>len</strong>() are not defined in
  RawQuerySet, and thus all RawQuerySet instances are considered True.
  The reason these methods are not implemented in RawQuerySet is that
  implementing them without internal caching would be a performance
  drawback and adding such caching would be backward incompatible.</p>
</blockquote>
","3642398","","","","","2016-08-15 22:23:50","","","","7","","",""
"39381252","2","","38963838","2016-09-08 01:26:46","","1","","<p>I don't have pexpect handy to test my answer to your question, but I have a suggestion that should work and, if not, may at least get you closer.  </p>

<p>Consider this command:</p>

<pre><code>$ ssh oak 'ftp &lt;&lt; EOF
lpwd
quit
EOF'
Local directory: /home/jklowden
$ 
</code></pre>

<p>What is happening?  The entire quoted string is passed as a single argument to ssh, where it is ""executed"" on the remote.  While ssh isn't explicit about what that means, exactly, we know what <strong>execv</strong>(2) does: if <strong>execve</strong>(2) fails to execute its passed arguments, the execv function will invoke <code>/bin/sh</code> with the same arguments (in this case, our quoted string).  The shell then evaluates the quoted string as separate arguments, detects the HereDoc redirection, and executes per usual.  </p>

<p>Using that information, and taking a quick look at the <a href=""https://pexpect.readthedocs.io/en/stable/api/pxssh.html"" rel=""nofollow"">pexpect.pxssh</a> documentation, it looks like you want:</p>

<pre><code>s = pxssh.pxssh()
...
s.sendline('ftp &lt;&lt; EOF\nlpwd\nquit\nEOF')
</code></pre>

<p>If that doesn't work, something is munging your data.  Five minutes with <strong>strace</strong>(1) will tell you what happened to it, and you can start pointing fingers.  ;-)</p>

<p>HTH.  </p>
","451601","","","","","2016-09-08 01:26:46","","","","1","","",""
"40393774","2","","38963841","2016-11-03 04:14:10","","0","","<p>Usually Seaborn is imported as 'sns' so if you use that, that will be much easier for you initially (because all the code examples use that), and for others later when you share your code.</p>

<p>Have fun with Seaborn, it is an amazing package. </p>
","6941244","","","","","2016-11-03 04:14:10","","","","0","","",""
"42792862","2","","38963841","2017-03-14 17:35:56","","0","","<p>For those using GUI (navigator), select Environments > root. On the right is a list of packages - installed, not installed, etc. </p>

<p>Select ""not installed"", search for seaborn. If it appears, then click the row, and select Apply button at bottom of that page.</p>

<p>If it doesn't appear, then something else is wrong with your install.</p>

<p>Hope that helps.</p>
","226118","","","","","2017-03-14 17:35:56","","","","0","","",""
"42807727","2","","38963841","2017-03-15 10:55:31","","3","","<p>Since <a href=""https://docs.continuum.io/anaconda/changelog"" rel=""nofollow noreferrer"">version 4.3.0 dated 2017-01-31</a>, Anaconda comes with seaborn installed by default. Try upgrading your Anaconda installation.</p>
","6246044","","","","","2017-03-15 10:55:31","","","","0","","",""
"45656342","2","","38963841","2017-08-13 01:37:29","","0","","<p>Just do conda install seaborn. If its installed it will updated it.</p>
","3366740","","","","","2017-08-13 01:37:29","","","","0","","",""
"38966482","2","","38963857","2016-08-16 04:03:12","","14","","<p>The zip commands in that tutorial are missing a parameter. I ran into this exact problem today with pysftp, which is built on paramiko. <code>libffi-72499c49.so.6.0.4</code> is in a hidden dot directory inside <code>lib64/python2.7/site-packages/.libs_cffi_backend</code>. Depending on how you zipped up the dependencies in your virtualenv, you may have inadvertantly excluded this directory.</p>

<ol>
<li><p>First, make sure libffi-devel and openssl-devel are installed on your <a href=""http://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html"" rel=""noreferrer"">Amazon Linux instance</a>, otherwise the cryptography module may not be compiling correctly.</p>

<pre><code>sudo yum install libffi-devel openssl-devel
</code></pre></li>
</ol>

<p>If those packages were not installed before, delete and rebuild your virtualenv.</p>

<ol start=""2"">
<li><p>Make sure that when you are zipping up your site-packages that you use '.' instead of '*', otherwise you will not be including files and directories that are hidden because their names begin with a period.</p>

<pre><code>cd path/to/my/helloworld-env/lib/python2.7/site-packages
zip -r9 path/to/zip/worker_function.zip .
cd path/to/my/helloworld-env/lib64/python2.7/site-packages
zip -r9 path/to/zip/worker_function.zip .
</code></pre></li>
</ol>
","6720110","","6720110","","2016-08-17 19:55:09","2016-08-17 19:55:09","","","","7","","",""
"45093065","2","","38963857","2017-07-14 01:06:03","","1","","<p>My 2 cents: if you want to build&amp;test your lambda function in the environment as similar to actual lambda as possible but still under your control, I would suggest using <a href=""https://hub.docker.com/r/lambci/lambda/"" rel=""nofollow noreferrer"">LambdaCI's Docker images</a>. They are based on dumps of original lambda filesystem. Also they have build-specific variants (tags <code>build-python2.7</code> and <code>build-python3.6</code> are most interesting for us).
These images are not very small - more than 500mb - but they allow you to avoid any headache when building.</p>

<p>Important benefit over Amazon Linux is that all package versions etc are the same as on the real lambda.</p>

<p>Here is how I did building myself:</p>

<pre><code>cd PROJECT_DIR
docker run --rm -it -v ""$PWD"":/var/task lambci/lambda:build-python2.7 bash
### now in docker
mkdir deps
pip install -t deps -r requirements.txt
# now all dependencies for our package are installed to deps/ directory,
# without any garbage like wheel or setuptools - unlike when using virtualenv
zip -r archive.zip MYCODE.py MYMODULE MYMODULE2.py
cd deps
# it's important to use . here, not * - or else some dot-starting directories will be omitted
zip -r ../archive.zip .
exit
### now locally
# just upload archive to lambda, with or without s3
</code></pre>

<p>For automating it with GitLab CI, just instruct it to use that same docker image
and put these commands in deploy script section:</p>

<pre><code>deploy:
    stage: deploy
    image: lambci/lambda:build-python2.7
    script:
        - mkdir deps
        - pip install -t deps -r requirements.txt
        - zip -r archive.zip MYCODE.py MYMODULE MYMODULE2.py
        - cd deps &amp;&amp; zip -r ../archive.zip . &amp;&amp; cd ..
        - aws s3 cp archive.zip ${bucket}/${key}
        - aws lambda update-function-code --function-name ${func} --s3-bucket ${bucket} --s3-key ${key}
    variables:
        bucket: ...
        key: ...
        func: ...
</code></pre>
","2267932","","2267932","","2017-07-14 01:12:30","2017-07-14 01:12:30","","","","0","","",""
"38964596","2","","38963882","2016-08-15 23:42:27","","3","","<h3>Recursive <code>groupby</code> and <code>apply</code></h3>

<pre><code>def append_tot(df):
    if hasattr(df, 'name') and df.name is not None:
        xs = df.xs(df.name)
    else:
        xs = df
    gb = xs.groupby(level=0)
    n = xs.index.nlevels
    name = tuple('Total' if i == 0 else '' for i in range(n))
    tot = gb.sum().sum().rename(name).to_frame().T
    if n &gt; 1:
        sm = gb.apply(append_tot3)
    else:
        sm = gb.sum()
    return pd.concat([sm, tot])

fields = ['project__name', 'person__username',
          'activity__name', 'issue__subject']
append_tot(df.set_index(fields))
</code></pre>

<p><a href=""https://i.stack.imgur.com/377Nd.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/377Nd.png"" alt=""enter image description here""></a></p>
","2336654","","2336654","","2016-08-16 08:34:37","2016-08-16 08:34:37","","","","0","","",""
"38965198","2","","38963882","2016-08-16 01:07:16","","2","","<p>Consider running three level pivot_tables with stack and concatenate them for a final groupby object. As mentioned, the docs does work if you see the use of <code>.stack()</code> on the corresponding pivot_table columns value:</p>

<pre><code># ISSUE_SUBJECT PIVOT
pt1 = pd.pivot_table(data=df, values=['2014', '2015', '2016'], 
                     columns=['issue__subject'], aggfunc=np.sum, 
                     index=['project__name', 'person__username', 'activity__name'], 
                     margins=True, margins_name = 'Total')    
pt1 = pt1.stack().reset_index()

# ACTIVITY_NAME PIVOT
pt2 = pd.pivot_table(data=df, values=['2014', '2015', '2016'], 
                     columns=['activity__name'], aggfunc=np.sum, 
                     index=['project__name', 'person__username'], 
                     margins=True, margins_name = 'Total' )    
pt2 = pt2.stack().reset_index()

# PERSON_USERNAME PIVOT
pt3 = pd.pivot_table(data=df, values=['2014', '2015', '2016'],        
                     columns=['person__username'], 
                     aggfunc=np.sum, index=['project__name'],
                     margins=True, margins_name = 'Total')    
pt3 = pt3.stack().reset_index()

# CONCATENATE ALL THREE
gdf = pd.concat([pt1, 
                 pt2[(pt2['project__name']=='Total') | 
                     (pt2['activity__name']=='Total')],
                 pt3[(pt3['project__name']=='Total') |
                     (pt3['person__username']=='Total')]]).reset_index(drop=True)

# REPLACE NaNS IN COLUMN
gdf = gdf.apply(lambda x: np.where(pd.isnull(x), '', x), axis=1)

# FINAL GROUPBY (A COUNT USED TO RENDER GROUPBY)
gdf = gdf.groupby(['project__name', 'person__username',
                   'activity__name', 'issue__subject',
                   '2014', '2015', '2016']).agg(len)
</code></pre>

<p><strong>Output</strong></p>

<pre><code>project__name  person__username  activity__name     issue__subject  2014    2015    2016  
Influenster    Total                                                667.0   610.0   626.0     1
               employee1         Development                        161.0   122.0   104.0     1
                                                    Fix bug         22.0    0.0     0.0       1
                                                    Refactor view   0.0     7.0     0.0       1
                                                    Total           183.0   129.0   104.0     1
                                 Quality assurance                  172.0   158.0   161.0     1
                                                    Total           172.0   158.0   161.0     1
                                 Total                              355.0   287.0   265.0     1
               employee2         Development                        119.0   137.0   155.0     1
                                                    Total           119.0   137.0   155.0     1
                                 Quality assurance                  193.0   186.0   205.0     1
                                                    Total           193.0   186.0   205.0     1
                                 Total                              312.0   323.0   360.0     1
               employee3         Development        Refactor view   0.0     0.0     1.0       1
                                                    Total           0.0     0.0     1.0       1
                                 Total                              0.0     0.0     1.0       1
Profit tools   Total                                                645.0   609.0   714.0     1
               employee1         Development                        177.0   136.0   216.0     1
                                                    Total           177.0   136.0   216.0     1
                                 Quality assurance                  162.0   122.0   182.0     1
                                                    Total           162.0   122.0   182.0     1
                                 Total                              339.0   258.0   398.0     1
               employee2         Development                        154.0   168.0   124.0     1
                                                    Total           154.0   168.0   124.0     1
                                 Quality assurance                  130.0   183.0   192.0     1
                                                    Fix bug         22.0    0.0     0.0       1
                                                    Total           152.0   183.0   192.0     1
                                 Total                              306.0   351.0   316.0     1
Total                                                               1268.0  1212.0  1339.0    1
                                                    Fix bug         44.0    0.0     0.0       1
                                                    Refactor view   0.0     7.0     1.0       1
                                                    Total           1312.0  1219.0  1340.0    1
                                 Development                        633.0   570.0   600.0     1
                                 Quality assurance                  679.0   649.0   740.0     1
                                 Total                              1312.0  1219.0  1340.0    1
               Total                                                1312.0  1219.0  1340.0    1
               employee1                                            694.0   545.0   663.0     1
               employee2                                            618.0   674.0   676.0     1
               employee3                                            0.0     0.0     1.0       1
</code></pre>
","1422451","","","","","2016-08-16 01:07:16","","","","0","","",""
"38964560","2","","38964528","2016-08-15 23:38:09","","2","","<p>There's a trailing tuple lurking somewhere between those lines; the <code>url(r'^accounts/register/$'...)</code> line:</p>

<pre><code>(r'^accounts/', include('registration.urls'))
</code></pre>

<p>You intend to have that as a url pattern not a tuple:</p>

<pre><code>url(r'^accounts/', include('registration.urls')),
</code></pre>
","3125566","","","","","2016-08-15 23:38:09","","","","0","","",""
"38971474","2","","38964578","2016-08-16 09:39:42","","1","","<p>Yes. Why didn't you simply try? ;)</p>

<p>Fixtures are put in <code>conftest.py</code> files to be able to use them in multiple test files.</p>
","2085149","","","","","2016-08-16 09:39:42","","","","0","","",""
"38967970","2","","38967478","2016-08-16 06:28:53","","1","","<p>I believe the reason for the whitespace is the size of the window. You can either change the window size (you'd have to figure out the numbers) or you can adjust the subplot. I found this out by playing with the ""configure subplots"" button in the image popup.</p>

<pre><code>plt.subplots_adjust(right=0.4)
</code></pre>

<p>With this line the plot will have no whitespace, but still some empty space (which you can fix by adjusting the window size).</p>
","5528308","","5528308","","2016-08-16 06:41:28","2016-08-16 06:41:28","","","","2","","",""
"39013209","2","","38967478","2016-08-18 08:22:03","","0","","<p>So the options are:</p>

<ol>
<li><p>Remove the <code>sharex</code>/<code>sharey</code> keywords - seems to clash with imshow in the subplot environment. (Suggested by <a href=""https://stackoverflow.com/users/293594/xnx"">xnx</a>)</p></li>
<li><p>Use <code>plt.subplots_adjust</code> with appropriate settings, in combination with <code>plt.gcf().tight_layout()</code> (Suggested by <a href=""https://stackoverflow.com/users/5528308/mwormser"">mwormser</a>)</p></li>
<li><p>Use pcolormesh instead of imshow in the subplot environment.</p></li>
</ol>
","3822090","","-1","","2017-05-23 10:28:38","2016-08-18 08:22:03","","","","0","","",""
"38968465","2","","38967533","2016-08-16 07:00:18","","1","","<p>You need to first find a website / API which allows you to lookup stock symbols and provide information. Then you can query that API for information. </p>

<p>I came up with a quick and dirty solution here: </p>

<pre><code>import requests


def get_symbol(symbol):
    symbol_list = requests.get(""http://chstocksearch.herokuapp.com/api/{}"".format(symbol)).json()

    for x in symbol_list:
        if x['symbol'] == symbol:
            return x['company']


company = get_symbol(""MSFT"")

print(company)
</code></pre>

<p>This website only provides company name. I didn't put any error checks. And you need the <code>requests</code> module for it to work. Please install it using <code>pip install requests</code>. </p>

<p><strong>Update:</strong> Here's the code sample using Yahoo! Finance API: </p>

<pre><code>import requests


def get_symbol(symbol):
    url = ""http://d.yimg.com/autoc.finance.yahoo.com/autoc?query={}&amp;region=1&amp;lang=en"".format(symbol)

    result = requests.get(url).json()

    for x in result['ResultSet']['Result']:
        if x['symbol'] == symbol:
            return x['name']


company = get_symbol(""MSFT"")

print(company)
</code></pre>
","301107","","","","","2016-08-16 07:00:18","","","","1","","",""
"40244249","2","","38967533","2016-10-25 15:42:43","","0","","<p>Here's another Yahoo API call. @masnun's call will return all results that contain the search param, for example trying AMD (Advanced Micro Devices):
<code>http://d.yimg.com/autoc.finance.yahoo.com/autoc?query=amd&amp;region=1&amp;lang=en</code>
gives you <code>AMD (Advanced Micro Devices, Inc.), AMDA (Amedica Corporation), DOX (Amdocs Limited),</code> etc.</p>

<p>If you know the ticker, you can try either of these Yahoo APIs:z
<code>http://finance.yahoo.com/d/quotes.csv?s=amd&amp;f=nb4t8</code> (well documented, this particular call asks for n=name; b4=book value; t8=1yr target price).
<code>https://query2.finance.yahoo.com/v7/finance/options/amd</code> (not very well documented but new...see more info here about this API: <a href=""https://stackoverflow.com/a/40243903/933972"">https://stackoverflow.com/a/40243903/933972</a>)</p>

<p>Forgot to include the Google API, which seems ok for stock quotes, but not reliable for full data on option chains:
'<a href=""https://www.google.com/finance?q=nyse:amd&amp;output=json"" rel=""nofollow noreferrer"">https://www.google.com/finance?q=nyse:amd&amp;output=json</a>'</p>
","933972","","-1","","2017-05-23 11:48:44","2016-10-25 15:42:43","","","","0","","",""
"38968045","2","","38967581","2016-08-16 06:34:02","","1","","<p>Just add <code>[0].text</code>, hope this help !</p>

<pre><code>horoscope = soup.findAll(""div"", {""class"": ""block-horoscope-text f16 l20""}, text=True)[0].text
print(horoscope)
</code></pre>
","4559110","","","","","2016-08-16 06:34:02","","","","3","","",""
"38967621","2","","38967599","2016-08-16 06:03:57","","2","","<p><strong>SOLUTION 1</strong></p>

<p>Just try to concatenate your queryset using <code>|</code> </p>

<pre><code>final_q = q1 | q2
</code></pre>

<p>In your example</p>

<pre><code>final_q = summary | awards_used
</code></pre>

<p>UPDATED:</p>

<p>| does not works using calculated attributes, so, we can select our queryset first and then mapping our extra attributes </p>

<pre><code>summary = Award.objects.filter(awardreceived__date__lte=query_date) 
awards_used = Award.objects.filter(awardused__date__lte=query_date)
final_q = summary | awards_used

final_q = final_q.annotate(used=Sum('awardused__date__lte__units')).annotate(awarded=Sum('awardissuedactivity__units_awarded'))
</code></pre>

<p><strong>SOLUTION 2</strong>  </p>

<p>Using chain built-in function </p>

<pre><code>from itertools import chain
final_list = list(chain(summary, awards_used))
</code></pre>

<p>There is an issue with this approach, you won't get a queryset, you will get a list containing instances. </p>
","1539655","","1539655","","2016-08-16 06:33:55","2016-08-16 06:33:55","","","","3","","",""
"38984224","2","","38967666","2016-08-16 20:49:31","","0","","<p>If I make all fields varchar(255) then it reads missing fiels as ''. sqlalchemy cannot force a '' from the csv file into another datatype.</p>

<p>Best is to use varchar to purely reads the csv file and then afterwards convert it to the proper formats</p>
","5200872","","5200872","","2016-08-17 19:39:08","2016-08-17 19:39:08","","","","0","","",""
"38967808","2","","38967678","2016-08-16 06:17:20","","4","","<p>The recursion is happening fine, but <code>temp_dir</code> is not a directory so it passes control to your stub <code>else</code> block. You can see this if you put <code>print(file_path)</code> outside your <code>if</code> block.</p>

<p><code>temp_dir</code> is the <strong><em>name</em></strong> of the next directory, not its absolute path. <code>""C:/users/adsmith/tmp/folder""</code> becomes just <code>""folder""</code>. Use <code>os.path.abspath</code> to get that</p>

<pre><code>self.convert(os.path.abspath(temp_dir))
</code></pre>

<p>Although the canonical way to do this (as mentioned in my comment on the question) is to use <code>os.walk</code>.</p>

<pre><code>class FileProcessor(object):
    def convert(self, file_path):
        for root, dirs, files in os.walk(file_path):
            # if file_path is C:/users/adsmith, then:
            #   root == C:/users/adsmith
            #   dirs is an iterator of each directory in C:/users/adsmith
            #   files is an iterator of each file in C:/users/adsmith
            # this walks on its own, so your next iteration will be
            # the next deeper directory in `dirs`

            for i, d in enumerate(dirs):
                # this is also preferred to setting a counter var and incrementing
                print(i, "":"", d)
                # no need to recurse here since os.walk does that itself
            for fname in files:
                # do something with the files? I guess?
</code></pre>
","3058609","","3058609","","2016-08-16 06:22:44","2016-08-16 06:22:44","","","","1","","",""
"38968143","2","","38967678","2016-08-16 06:40:22","","0","","<p>As <code>temp_dir</code> has the filename only without parent path, you should change</p>

<pre><code>self.convert(temp_dir)
</code></pre>

<p>to</p>

<pre><code>self.convert(os.path.join(file_path, temp_dir))
</code></pre>
","5317403","","","","","2016-08-16 06:40:22","","","","1","","",""
"38967956","2","","38967706","2016-08-16 06:27:46","","0","","<p>You need to import the <code>ReturnDocument</code> class first. Add this to the top of your script: </p>

<pre><code>from pymongo.collection import ReturnDocument
</code></pre>

<p>Detailed docs: <a href=""http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.ReturnDocument"" rel=""nofollow"">http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.ReturnDocument</a> </p>
","301107","","","","","2016-08-16 06:27:46","","","","3","","",""
"38970441","2","","38967729","2016-08-16 08:50:17","","0","","<p>I have decided to use <a href=""http://www.jqueryscript.net/other/Simple-jQuery-Based-Barcode-Generator-Barcode.html"" rel=""nofollow"">jquery-barcode</a> which is completely works at client end </p>
","2470999","","","","","2016-08-16 08:50:17","","","","0","","",""
"38971901","2","","38967833","2016-08-16 10:00:19","","0","","<p>You can try logging in then getting whatever page you want, there is more more data to be posted which you can get with <em>bs4</em>:</p>

<pre><code>import requests
from bs4 import BeautifulSoup
url = ""https://weblogin.utoronto.ca/""
with requests.Session() as s:
    s.headers.update({""User-Agent"":""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36""})
    soup = BeautifulSoup(s.get(url).content)
    data = {inp[""name""]: inp[""value""] for inp in soup.select(""#query input[value]"")}
    data[""user""] = ""username""
    data[""pass""] = ""password""
    post = s.post(url, data=data)
    print post
    print(post.content)
    protect = s.get(""protected_page"")
</code></pre>

<p>If we run the code and just print the data dict, you can see bs4 populates the required fields:</p>

<pre><code>In [14]: with requests.Session() as s:
   ....:         s.headers.update({""User-Agent"":""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36""})
   ....:         soup = BeautifulSoup(s.get(url).content,""html.parser"")
   ....:         data = {inp[""name""]:inp[""value""] for inp in soup.select(""#query input[value]"")}
   ....:         data[""user""] = ""username""
   ....:         data[""pass""] = ""password""
   ....:         print(data)
   ....:     
{'seven': '/index.cgi', 'sess_re': '0', 'pre_sess_tok': '0', 'pass': 'password', 'four': 'a5', 'user': 'username', 'reply': '1', 'two': 'pinit', 'hostname': '', 'three': '1', 'pinit': '1', 'relay_url': '', 'nine': 'PInit', 'create_ts': '1471341718', 'referer': '', 'six': 'weblogin.utoronto.ca', 'first_kiss': '1471341718-777129', 'flag': '', 'five': '', 'post_stuff': '', 'creds_from_greq': '1', 'fr': '', 'eight': '', 'one': 'weblogin.utoronto.ca', 'file': ''}
</code></pre>
","2141635","","","","","2016-08-16 10:00:19","","","","0","","",""
"38968056","2","","38967979","2016-08-16 06:34:51","","0","","<p>You need to serialize the data to a common format that is accessible from both C# and Python. For example - XML or JSON. I would recommend using JSON. </p>

<p>Then you have several options: </p>

<ul>
<li>Use sockets to transfer the data. </li>
<li>Use http to transfer the data. </li>
<li>Write to a file from C# and read that file from Python</li>
</ul>

<p>Sockets would probably the faster. Using http might be easier. With files, you will need to have some sort of scheduling or notification system to let your Python program know when you have written to the file.  </p>
","301107","","","","","2016-08-16 06:34:51","","","","6","","",""
"38968841","2","","38967979","2016-08-16 07:23:01","","1","","<p>Since your C# program runs the python script, I guess the easiest solution would be to redirect the standard input of the python process:</p>

<pre><code>     Process pyProc = Process.Start(
        new ProcessStartInfo(""python.exe"", @""/path/to/the/script.py"")
        {
           RedirectStandardInput = true,
           UseShellExecute = false
        }
     );
     for (int ii = 0; ii &lt; 100; ++ii)
     {
        pyProc.StandardInput.WriteLine(string.Format(""this is message # {0}"", ii));
     }
</code></pre>

<p>At the python script side, you just need to use built-in function <a href=""https://docs.python.org/2/library/functions.html#raw_input"" rel=""nofollow"">raw_input</a> like below (please note the function has been renamed to raw_input in 3.x):</p>

<pre><code>while True:
    data = raw_input()
    print(data)
</code></pre>
","4328122","","4328122","","2016-08-16 07:38:05","2016-08-16 07:38:05","","","","21","","",""
"39016545","2","","38971898","2016-08-18 11:02:28","","0","","<p>The reason you code is not working is mostly likely because you are creating a <code>Drawing</code> of just 1 pixel high and 100 pixels wide. Which could never fit a <code>Rect</code> of 500 by 100 pixels.</p>

<p>So your code should be something like this:</p>

<pre><code>draw = Drawing(500, 200)
draw.add(Rect(0, 100, 500, 100))
</code></pre>
","2263652","","","","","2016-08-18 11:02:28","","","","0","","",""
"38983335","2","","38971926","2016-08-16 19:52:01","","2","","<p><code>QColor</code> supports the HSL representation. You want to limit the range of lightness:</p>

<pre><code>QColor limitLightness(const QColor &amp; color) {
  auto hsl = src.toHsl();
  auto h = hsl.hslHueF();
  auto s = hsl.hslSaturationF();
  auto l = hsl.lightnessF();
  qreal const lMin = 0.25;
  qreal const lMax = 0.75;
  return QColor::fromHslF(h, s, qBound(lMin, lMax, l));
}
</code></pre>
","1329652","","","","","2016-08-16 19:52:01","","","","1","","",""
"38985310","2","","38971926","2016-08-16 22:13:23","","2","","<p>You can pick the color in the HSL space</p>

<pre><code>def color(Hmin=0.0, Hmax=360.0,
          Smin=0.0, Smax=1.0,
          Lmin=0.0, Lmax=1.0):
    H = (Hmin + random.random()*(Hmax - Hmin)) % 360.0
    S = Smin + random.random()*(Smax - Smin)
    L = Lmin + random.random()*(Lmax - Lmin)

    # Compute full-brightness, full-saturation color wheel point
    if 0.0 &lt;= H &lt; 60.0:
        R, G, B = (1.0, H/60.0, 0.0)             # R -&gt; Y
    elif 60.0 &lt;= H &lt; 120.0:
        R, G, B = (1-(H-60.0)/60.0, 1.0, 0.0)    # Y -&gt; G
    elif 120.0 &lt;= H &lt; 180.0:
        R, G, B = (0.0, 1.0, (H-120.0)/60.0)     # G -&gt; C
    elif 180.0 &lt;= H &lt; 240.0:
        R, G, B = (0.0, 1.0-(H-180.0)/60.0, 1.0) # C -&gt; B
    elif 240.0 &lt;= H &lt; 300.0:
        R, G, B = ((H-240.0)/60.0, 0.0, 1.0)     # B -&gt; M
    else:
        R, G, B = (1.0, 0.0, 1.0-(H-300.0)/60.0) # M -&gt; R

    # Compute amount of gray
    k = (1.0 - S) * L

    # Return final RGB
    return (k + R*(L-k), k + G*(L-k), k + B*(L-k))
</code></pre>
","320726","","320726","","2016-08-16 22:20:38","2016-08-16 22:20:38","","","","1","","",""
"38972273","2","","38972011","2016-08-16 10:17:26","","2","","<p>A general answer involves using a <code>Manager</code> object. Adapted from the docs:</p>

<pre><code>from multiprocessing import Process, Manager

def f(d):
    d[1] += '1'
    d['2'] += 2

if __name__ == '__main__':
    manager = Manager()

    d = manager.dict()
    d[1] = '1'
    d['2'] = 2

    p1 = Process(target=f, args=(d,))
    p2 = Process(target=f, args=(d,))
    p1.start()
    p2.start()
    p1.join()
    p2.join()

    print d
</code></pre>

<p>Output:</p>

<pre><code>$ python mul.py 
{1: '111', '2': 6}
</code></pre>

<p>Original answer: <a href=""https://stackoverflow.com/questions/6832554/python-multiprocessing-how-do-i-share-a-dict-among-multiple-processes"">Python multiprocessing: How do I share a dict among multiple processes?</a></p>
","6475848","","-1","","2017-05-23 11:51:34","2016-08-16 10:17:26","","","","2","","",""
"44072944","2","","38972052","2017-05-19 14:43:05","","15","","<p>The</p>

<pre><code>conda update --all
</code></pre>

<p>is actually the way to go. But it is possible that there are pending conflicts. Conda usually warns of those.</p>

<p>It is still possible to upgrade the packages by hand but I expect a warning (for breaking a certain dependency) to be shown.</p>

<p>That's why you 'cannot' upgrate them all.</p>

<p><strong>Considering your update</strong>: I think you <em>can</em> upgrade them each separately, but doing so will not only include an upgrade but also a downgrade of another package as well.</p>

<p>So you still cannot upgrade <em>them all</em> by doing the upgrades separately; the dependencies are just not satisfiable.</p>
","4360557","","4360557","","2017-08-31 16:13:00","2017-08-31 16:13:00","","","","0","","",""
"38972519","2","","38972209","2016-08-16 10:29:12","","1","","<p>The answer is that you probably shouldn't do this. Python virtualenvs and Conda environments are intended to determine the resources available to the Python system, which are completely independent of your working directory.</p>

<p>You can use the same environment to work on multiple projects, as long as they have the same dependencies. The minute you start tweaking the environment you begin messing with something that is normally automatically maintained.</p>

<p>So perhaps the real question you should ask yourself is ""why do I think it's a good idea to store my notebooks inside the environment used to execute them.""</p>
","146073","","","","","2016-08-16 10:29:12","","","","4","","",""
"38982381","2","","38972209","2016-08-16 18:48:33","","2","","<p>You have two options. You can install the Jupyter Notebook into each environment, and run the Notebook from that environment:</p>

<pre><code>conda create -n testEnv python=3.5 notebook
source activate testEnv
jupyter notebook
</code></pre>

<p>or you need to install the IPython kernel from <code>testEnv</code> into the environment from which you want to run Jupyter Notebook. Instructions are here: <a href=""http://ipython.readthedocs.io/en/stable/install/kernel_install.html#kernels-for-different-environments"" rel=""nofollow"">http://ipython.readthedocs.io/en/stable/install/kernel_install.html#kernels-for-different-environments</a> To summarize:</p>

<pre><code>conda create -n testEnv python=3.5
source activate testEnv
python -m ipykernel install --user --name testEnv --display-name ""Python (testEnv)""
source deactivate
jupyter notebook
</code></pre>
","2449192","","","","","2016-08-16 18:48:33","","","","0","","",""
"38972647","2","","38972245","2016-08-16 10:35:08","","1","","<p>It's a shame when you find something ready to go but very time consuming to make it work on windows. My advice would be avoid the hazzle of installing that non-ready-to-go-on-windows library and just looking for another alternative, there are few ones dealing with spherical harmonics. What about this one? <a href=""http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyspharm"" rel=""nofollow"">pyspharm</a></p>

<p>Also, posting an issue in the library's <a href=""https://github.com/SHTOOLS/SHTOOLS/issues"" rel=""nofollow"">github issues</a> could speed it up things.</p>
","3809375","","","","","2016-08-16 10:35:08","","","","0","","",""
"39922584","2","","38972380","2016-10-07 17:06:06","","0","","<p>The best way to achieve this seems to be to create a new generator class expanding the one provided by Keras that parses the data augmenting only the images and yielding all the outputs.</p>
","1490721","","","","","2016-10-07 17:06:06","","","","0","","",""
"41872896","2","","38972380","2017-01-26 11:54:08","","4","","<p>The example below might be self-explanatory!
The 'dummy' model takes 1 input (image) and it outputs 2 values. The model computes the MSE for each output.</p>

<pre><code>x = Convolution2D(8, 5, 5, subsample=(1, 1))(image_input)
x = Activation('relu')(x)
x = Flatten()(x)
x = Dense(50, W_regularizer=l2(0.0001))(x)
x = Activation('relu')(x)

output1 = Dense(1, activation='linear', name='output1')(x)
output2 = Dense(1, activation='linear', name='output2')(x)

model = Model(input=image_input, output=[output1, output2])
model.compile(optimizer='adam', loss={'output1': 'mean_squared_error', 'output2': 'mean_squared_error'})
</code></pre>

<p>The function below generates batches to feed the model during training. It takes the training data <code>x</code> and the label <code>y</code> where y=[y1, y2]</p>

<pre><code>batch_generator(x, y, batch_size):
        ....transform images
        ....generate batch batch of size: batch_size 
        yield(X_batch, {'output1': y1, 'output2': y2} ))
</code></pre>

<p>Finally, we call the fit_generator()</p>

<pre><code>    model.fit_generator(batch_generator(X_train, y_train, batch_size))
</code></pre>
","876896","","","","","2017-01-26 11:54:08","","","","0","","",""
"44907847","2","","38972380","2017-07-04 13:54:00","","3","","<p>If you have separated both mask and binary value you can try something like this:</p>

<pre><code>generator = ImageDataGenerator(rotation_range=5.,
                                width_shift_range=0.1, 
                                height_shift_range=0.1, 
                                horizontal_flip=True,  
                                vertical_flip=True)

def generate_data_generator(generator, X, Y1, Y2):
    genX = generator.flow(X, seed=7)
    genY1 = generator.flow(Y1, seed=7)
    while True:
            Xi = genX.next()
            Yi1 = genY1.next()
            Yi2 = function(Y2)
            yield Xi, [Yi1, Yi2]
</code></pre>

<p>So, you use the same generator for both input and mask <strong>with the same seed</strong> to define the same operation. You may change the binary value or not depending on your needs (Y2). Then, you call the fit_generator():</p>

<pre><code>model.fit_generator(generate_data_generator(generator, X, Y1, Y2),
                epochs=epochs)
</code></pre>
","5012298","","","","","2017-07-04 13:54:00","","","","0","","",""
"38972588","2","","38972419","2016-08-16 10:32:43","","0","","<p>UPDATE:
After trying to reproduce the error on linux it's showing a similar behavior, working fine with the first file but with the second is returning Errno32.
Traceback:</p>

<pre><code>Traceback (most recent call last):
  File ""Glob.py"", line 207, in &lt;module&gt;
    runGlobPlot()
  File ""Glob.py"", line 179, in runGlobPlot
    smooth = SavitzkyGolay('smoothFrame',0, sum_vector)
  File ""Glob.py"", line 105, in SavitzkyGolay
    stdin.write(`data`+'\n')
IOError: [Errno 32] Broken pipe
</code></pre>

<p>Update:</p>

<p>Some calls of the <strong>SG_bin</strong> return that the <strong>-n parameter</strong> is the wrong  type.</p>

<pre><code>Wrong type of parameter for flag -n. Has to be unsigned,unsigned
</code></pre>

<p>This parameter comes from the <strong>window</strong> variable that is passed to the <strong>SavitzkyGolay</strong> function.</p>

<p>Surrounding the stdin.write with a trycatch block reveals that it breaks a hadnfull of times.</p>

<pre><code>try:
   for data in datalist:
        stdin.write(repr(data)+'\n')
except:
    print ""It broke""
</code></pre>
","4725649","","4725649","","2016-08-16 18:02:12","2016-08-16 18:02:12","","","","19","","",""
"38986144","2","","38972452","2016-08-16 23:50:27","","3","","<p>The quickstart.py example sets the scope to:</p>

<pre><code>https://www.googleapis.com/auth/spreadsheets.readonly
</code></pre>

<p>To update the spreadsheet you need to set the scope to:</p>

<pre><code>https://www.googleapis.com/auth/spreadsheets
</code></pre>

<p>You can do this by first deleting the existing authentication file in ~/.credentials (that is the location on a raspberry.). It will likely be called ""sheets.googleapis.com-python-quickstart.json.</p>

<p>After you removed it you will need to re-authenticate, which should happen automatically when you re-run the script.</p>
","6182912","","","","","2016-08-16 23:50:27","","","","2","","",""
"38989666","2","","38972493","2016-08-17 06:37:58","","1","","<p>Vertica-Python supports INSERT INTO. </p>

<p>Unless you need frequent and very small inserts, writing your data to a file and using COPY would most likely give better performance. If you do it through python, does that still not meet your idea of 'programmatically' ?</p>

<ul>
<li><a href=""https://github.com/uber/vertica-python"" rel=""nofollow"">https://github.com/uber/vertica-python</a></li>
<li><a href=""https://pypi.python.org/pypi/vertica-python/"" rel=""nofollow"">https://pypi.python.org/pypi/vertica-python/</a></li>
</ul>
","5052399","","","","","2016-08-17 06:37:58","","","","2","","",""
"38995575","2","","38972493","2016-08-17 11:37:52","","2","","<p>I found a way to copy/insert data from list to flex table (in vertica) using python:</p>

<h1>For list</h1>

<pre><code># for python list
tempList = list()    
tempList.append('{ ""_id"" : ""01011"", ""city"" : ""CHESTER-APL21"", ""loc"" : [ -72.988761, 42.279421 ], ""pop"" : 1688, ""state"" : ""MA"" }')
tempList.append('{ ""_id"" : ""01011"", ""city"" : ""CHESTER-APL21"", ""loc"" : [ -72.988761, 42.279421 ], ""pop"" : 1688, ""state"" : ""MA"" }')
cur.copy( ""COPY STG.unstruc_data FROM STDIN parser fjsonparser() "", ''.join(tempList))
connection.commit()
</code></pre>

<h1>For JSON</h1>

<pre><code># for json file
with open(""D:/SampleCSVFile_2kb/tweets.json"", ""rb"") as fs:
    my_file = fs.read().decode('utf-8')
    cur.copy( ""COPY STG.unstruc_data FROM STDIN parser fjsonparser()"", my_file)
    connection.commit()
</code></pre>

<h1>For CSV</h1>

<pre><code># for csv file
with open(""D:/SampleCSVFile_2kb/SampleCSVFile_2kb.csv"", ""rb"") as fs:
    my_file = fs.read().decode('utf-8','ignore')
    cur.copy( ""COPY STG.unstruc_data FROM STDIN PARSER FDELIMITEDPARSER (delimiter=',', header='false') "", my_file) # buffer_size=65536
    connection.commit()
</code></pre>
","1900645","","","","","2016-08-17 11:37:52","","","","0","","",""
"43039300","2","","38972503","2017-03-27 06:29:04","","1","","<blockquote>
  <p>Does anyone know the historic reasons for the default behaviour?</p>
</blockquote>

<p>Guido van Rossum commented that he liked <em>update()</em> better and thinks a <code>+</code> operator wouldn't read clearly in code.</p>

<p>FWIW, he did approve <a href=""https://www.python.org/dev/peps/pep-0448/"" rel=""nofollow noreferrer"">PEP 448</a> which gives your another way to do it using star-unpacking generalizations:</p>

<pre><code>&gt;&gt;&gt; a = {'a': 1, 'b': 2}
&gt;&gt;&gt; b = {'c': 3, 'b': 4}
&gt;&gt;&gt; {**a, **b}
{'a': 1, 'b': 4, 'c': 3}
</code></pre>

<p>There are several reasons why <code>+</code> might not be a good idea.  Usually, we expect addition to be commutative, but dict addition would fail whenever there were overlapping keys with distinct values.   The ""normal"" use case is to update only dict in-place, but the usual semantics of <code>+</code> would copy the contents of both inputs to create a new dict (which is somewhat wasteful).</p>

<p>In addition, Python has <a href=""https://docs.python.org/3/library/collections.html#collections.ChainMap"" rel=""nofollow noreferrer"">collections.ChainMap</a> which replaces the expense of copying with a new expense of potentially having multiple lookups.</p>
","1001643","","","","","2017-03-27 06:29:04","","","","0","","",""
"38973575","2","","38973433","2016-08-16 11:21:39","","8","","<p>You could use a dict? Something like this:  </p>

<pre><code>#dict of winning outcomes, the first layer represents the AI moves, and the inner 
#layer represent the player move and the outcome
ai = {
    'punch' : {
        'punch' : 'tie',
        'kick' : 'wins',
    },
    'stab' : {
        'punch' : 'loses',
        'kick' : 'loses'
    }
}

ai_move = 'punch'
player_move = 'kick'
print ai[ai_move][player_move] #output: wins


ai_move = 'stab'
player_move = 'punch'
print ai[ai_move][player_move] #output: loses
</code></pre>

<p>I didn't map out all the moves, but you get the gist</p>
","5072675","","","","","2016-08-16 11:21:39","","","","4","","",""
"38973624","2","","38973433","2016-08-16 11:23:35","","0","","<p>Yes, store the decisions as key/value pairs in a dictionary with all the possible combinations as the key and decision as result. Basically make a lookup table for the possible moves. </p>

<p>This speeds up decision making at the expense of having to store all possible combinations.</p>

<pre><code>def tie():
    print(""It's a tie!"")

def lose():
    print(""You lose"")

def win():
    print(""You win"")
moves = { 
     # player_ai action
    'punch_punch': tie,
    'punch_kick': lose,
    'punch_stab': lose,
    &lt;..&gt;
}
player_move = &lt;move&gt;
ai_move = &lt;move&gt;
key = ""_"".join([player_move, ai_move])
if key in moves:
    # Execute appropriate function
    return moves[key]()
raise Exception(""Invalid move"")
</code></pre>
","4165324","","","","","2016-08-16 11:23:35","","","","0","","",""
"38973682","2","","38973433","2016-08-16 11:26:22","","0","","<p>You could try a dictionary of dictionaries (nested dictionary). Keep values and keys in text form, rather than map to numbers, to improve readability.</p>

<pre><code>outcome = {}
outcome['punch'] = {}
outcome['punch']['punch'] = 'Tie'
outcome['punch']['kick'] = 'Lose'
...
outcome['kick'] = {}
outcome['kick']['punch'] = 'Win'
outcome['kick']['kick'] = 'Tie'
...
i_do = 'punch'
he_does = 'fling'
...
if outcome[i_do][he_does] == 'Win':
    print(""Woohoo!"")
</code></pre>
","4795263","","4795263","","2016-08-16 12:03:40","2016-08-16 12:03:40","","","","2","","",""
"38973828","2","","38973433","2016-08-16 11:33:29","","0","","<p>You could use a python dictionary to map moves to numbers:</p>

<pre><code>move = {'Punch': 0, 'Kick': 1}
</code></pre>

<p>And then use a matrix to determine the outcome. Numpy can be used for that</p>

<pre><code>import numpy
move = {'Punch': 0, 'Kick': 1}

outcome = numpy.matrix([['Tie','Loses'],['Wins','Tie']])


# Punch vs Punch =&gt; Tie
print outcome[move['Punch'], move['Punch']]

# Punch vs Kick =&gt; Punch loses
print outcome[move['Punch'], move['Kick']]
</code></pre>
","2870336","","","","","2016-08-16 11:33:29","","","","0","","",""
"38973896","2","","38973433","2016-08-16 11:36:27","","1","","<p>I'd use a 2-dimensional list for this. Each attack is decoded to an index 0 to 5 and win tie and loss are decoded as 1, 0 and -1.</p>

<p>So the list will look something like this (not based on your example, I just put some random numbers):</p>

<pre><code>table = [[1,0,-1,0,1,-1],[1,1,0,1,0,-1],...,etc.]
</code></pre>

<p>And you will retrieve it like this:</p>

<pre><code>table[0][1]
</code></pre>
","2947592","","","","","2016-08-16 11:36:27","","","","0","","",""
"38973897","2","","38973433","2016-08-16 11:36:29","","5","","<p>You can create a map of attacks similar to your table above like this</p>

<pre><code>map = [
    [0,-1,-1,1,1,-1],
    [1,0,-1,-1,1,-1],
    [1,1,0,-1,-1,1],
    [-1,1,1,0,-1,1],
    [-1,-1,1,1,0,-1],
    [1,1,-1,-1,1,0]
]
</code></pre>

<p>Here, 0 is a draw, 1 is a win and -1 is a loss.</p>

<p>Now create an array of attacks where the places of the attacks corresponds with the map above.</p>

<pre><code>attacks = [""Punch"", ""Kick"", ""Stab"", ""Throw"", ""Fling"", ""Uppercut""]
</code></pre>

<p>Now you can easily find out if one attack beats another</p>

<pre><code>map[attacks.index(""Stab"")][attacks.index(""Punch"")]

&gt;&gt;&gt; 1
</code></pre>

<p>Stab wins over punch</p>
","927408","","","","","2016-08-16 11:36:29","","","","8","","",""
"38974250","2","","38973452","2016-08-16 11:53:55","","1","","<p>The call to <code>test.keywords.create(...)</code> doesn't <em>call</em> the keyword, it merely creates one to be called later. If you want the results to be assigned to a variable, use the <code>assign</code> attribute when calling <code>create</code>. This argument takes a list of variable names. </p>

<p>For example, given this line in plain text format:</p>

<pre><code>${greps}=    grep file    log.txt    url:    encoding_errors=ignore
</code></pre>

<p>... you would create it like this using the API:</p>

<pre><code>test.keywords.create('grep file', 
                     args=['log.txt', 'url:',  'encoding_errors=ignore'],
                     assign=['${greps}'])
</code></pre>
","7432","","","","","2016-08-16 11:53:55","","","","3","","",""
"46219607","2","","38976893","2017-09-14 12:47:00","","0","","<p>Instead of using <code>pexpect.spawn</code> you can use <code>pexpect.popen_spawn.PopenSpawn</code> for <code>windows</code>.</p>

<pre><code>child = pexpect.popen_spawn.PopenSpawn('cmd', timeout=1)
child.send('ipconfig')
child.expect('Wireless', timeout=None)
</code></pre>
","5933946","","4889267","","2017-09-14 13:20:57","2017-09-14 13:20:57","","","","0","","",""
"38977181","2","","38977005","2016-08-16 14:09:11","","7","","<p>Sure. You need to call the <code>.title</code> method. Doing </p>

<pre><code>root.title = ""This is a game window"" 
</code></pre>

<p>doesn't set the title, it overwrites the method with the string.</p>

<pre><code>import Tkinter as tk

class Game:
    def __init__(self, root):
        self.root = root
        root.title(""This is a game window"")

        button = tk.Button(root, text=""I am a button"")
        button.pack()

root = tk.Tk()
game = Game(root)
root.mainloop()
</code></pre>

<p>You <em>could</em> also do <code>self.root.title(""This is a game window"")</code> but it's more typing, and using <code>self.root</code> is slightly less efficient than using the  <code>root</code> parameter that was passed to the <code>__init__</code> method, since <code>self.root</code> requires an attribute lookup but <code>root</code> is a simple local variable.</p>
","4014959","","","","","2016-08-16 14:09:11","","","","0","","",""
"38977059","2","","38977008","2016-08-16 14:03:46","","2","","<pre><code>if position &lt;= 18:
    ...
elif position == 18:
    ...
</code></pre>

<p>Both the <code>if</code> and <code>elif</code> branches are catching <code>position</code> if <code>position == 18</code> (note the <code>&lt;=</code> in the <code>if</code> statement), so the <code>elif</code> branch will never be executed.</p>
","1453822","","","","","2016-08-16 14:03:46","","","","0","","",""
"38977069","2","","38977008","2016-08-16 14:04:02","","2","","<p>Your <code>if</code> <em>excludes</em> the <code>elif</code> condition:</p>

<pre><code>if position &lt;= 18:
</code></pre>

<p>This matches if <code>position == 18</code> <em>too</em>. Python ignores all following <code>elif</code> conditions when a <code>if</code> or <code>elif</code> branch has matched.</p>

<p>If you want to run <em>additional</em> code for the <code>== 18</code> case, use a new <code>if</code> statement:</p>

<pre><code>if position &lt;= 18:
     # will run for all values of `position up to and including 18

if position == 18:
     # will *also* be run for the `position == 18` case
</code></pre>

<p>Alternatively, fix your conditions to not overlap:</p>

<pre><code>if position &lt; 18:
     # ...
elif position == 18:
     # runs only when position is exactly equal to 18
</code></pre>

<p>or</p>

<pre><code>if position &lt;= 18:
     # ...
else:
     # runs when the first condition no longer matches, so position &gt; 18
</code></pre>
","100297","","100297","","2016-08-16 14:39:50","2016-08-16 14:39:50","","","","0","","",""
"38977079","2","","38977008","2016-08-16 14:04:24","","3","","<p>Change</p>

<pre><code>if position &lt;= 8:
</code></pre>

<p>by </p>

<pre><code>if position &lt; 8:
</code></pre>

<p>And leave your <code>elif</code> the same.</p>

<p>By having the condition <code>&lt;=8</code> your code always enter the if (When <code>position</code> is <code>&lt;=8</code>), but when is 9 (<code>&gt;8</code>) it will enter the <code>elif</code>. So if you want that the code enters the <code>elif</code> statement when <code>position = 8</code>, the <code>if</code> can not be true when <code>position = 8</code>.</p>
","1612432","","1612432","","2016-08-16 14:08:51","2016-08-16 14:08:51","","","","1","","",""
"38977361","2","","38977041","2016-08-16 14:17:50","","3","","<blockquote>
  <p><em>it is required to split either by a delimiter that occurs first in the string or by a delimiter that is most frequent in the string.</em></p>
</blockquote>

<p>So you can first find all the delimiters and preserve them in a proper container with their frequency, then find the most common and first one, then split your string based on them.</p>

<p>Now for finding the delimiters, you need to separate them from the plain text based on a particular feature, for example if they are none word characters, and for preserving them we can use a dictionary in order to preserve the count of similar delimiters (in this case <code>collections.Counter()</code> will do the job).</p>

<p>Demo:</p>

<pre><code>&gt;&gt;&gt; s = ""aaa#bbb*ccc#ddd*rkfh^ndjfh*dfehb*erjg-rh@fkej*rjh""
&gt;&gt;&gt; delimiters = re.findall(r'\W', s)
&gt;&gt;&gt; first = delimiters[0]
'#'
&gt;&gt;&gt; Counter(delimiters)
Counter({'*': 5, '#': 2, '@': 1, '-': 1, '^': 1})
&gt;&gt;&gt; 
&gt;&gt;&gt; frequent = Counter(delimiters).most_common(1)[0][0]
'*'
&gt;&gt;&gt; re.split(r'\{}|\{}'.format(first, frequent), s)
['aaa', 'bbb', 'ccc', 'ddd', 'rkfh^ndjfh', 'dfehb', 'erjg-rh@fkej', 'rjh']
</code></pre>

<p>Note that if you are dealing with delimiters that are more than one characters you can use <code>re.escape()</code> in order to escape the special regex characters (like <code>*</code>).</p>
","2867928","","2867928","","2016-08-16 14:24:16","2016-08-16 14:24:16","","","","2","","",""
"38984902","2","","38977041","2016-08-16 21:39:38","","0","","<p>I've found the string.count() method to be very fast since it's implemented in C. Anything that avoids for loops will generally be faster, even if you iterate the string multiple times. This is probably the fastest solution:</p>

<pre><code>&gt;&gt;&gt; s = 'aaa*bbb#ccc*ddd'
&gt;&gt;&gt; a, b = s.count('*'), s.count('#')
&gt;&gt;&gt; if a == b: a, b = -s.find('*'), -s.find('#')
... 
&gt;&gt;&gt; s.split('*' if a &gt; b else '#')
['aaa', 'bbb#ccc', 'ddd']
</code></pre>
","632088","","","","","2016-08-16 21:39:38","","","","1","","",""
"38977261","2","","38977169","2016-08-16 14:13:04","","1","","<p>You should try using <code>xpath</code> as below :-</p>

<pre><code>driver.find_element_by_xpath("".//button[contains(.,'Replace')]"").click()
</code></pre>

<p>Or if there is multiple button with same text <code>Replace</code> try as below :-</p>

<pre><code>driver.find_element_by_xpath("".//button[child::span[text() = 'Replace' and @class = 'ui-button-text']]"").click()
</code></pre>

<p>Or</p>

<pre><code>driver.find_element_by_xpath("".//span[text() = 'Replace' and @class = 'ui-button-text']/parent::button"").click()
</code></pre>

<p><strong>Edited</strong> : If you are unable to <code>click</code> on element due to overlay of other element, you can try to <code>click</code> using <code>execute_script</code> as below :-</p>

<pre><code> replace = driver.find_element_by_xpath("".//span[text() = 'Replace' and @class = 'ui-button-text']/parent::button"");

driver.execute_script(""arguments[0].click()"", replace); 
</code></pre>
","3193455","","3193455","","2016-08-17 10:02:12","2016-08-17 10:02:12","","","","7","","",""
"38977366","2","","38977169","2016-08-16 14:17:56","","1","","<p>Try xpath:</p>

<pre><code>//span[.='Replace']
</code></pre>
","6655281","","","","","2016-08-16 14:17:56","","","","0","","",""
"38977374","2","","38977169","2016-08-16 14:18:14","","0","","<pre><code>def click_link(self, link_name: str):
    if link_name in self.driver.page_source:
        elem = self.driver.find_element_by_link_text(link_name)
        elem.click()
</code></pre>
","5912296","","","","","2016-08-16 14:18:14","","","","1","","",""
"38977377","2","","38977184","2016-08-16 14:18:25","","1","","<p>There is problem with duplicates in <code>index</code>. You can replace all values of index by <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html"" rel=""nofollow""><code>reset_index</code></a> to <code>Regular Index</code> (<code>0,1,2..len(df)-1</code>). Old values are removed by parameter <code>drop=True</code>:</p>

<pre><code>ff.reset_index(drop=True, inplace=True)
</code></pre>

<p>Test:</p>

<pre><code>ff = pd.DataFrame({'OldCol':['darkbrown','lightbeige','lightbrown / beige','beige','brown','beige / cognac'], 'NewCol':['nan','nan','nan','nan','nan','nan']})
ffnew = pd.DataFrame({'OldCol':['darkbrown','lightbeige','lightbrown / beige','beige','brown','beige / cognac'], 'NewCol':['brown','beige','beige / brown','sand','brown','sand / brown']})
ff.index = [0,0,2,3,4,5]
#ValueError: cannot reindex from a duplicate axis
ff.reset_index(drop=True, inplace=True)
</code></pre>
","2901002","","2901002","","2016-08-16 14:24:46","2016-08-16 14:24:46","","","","2","","",""
"38977345","2","","38977285","2016-08-16 14:17:16","","1","","<p>If a worker name can't include a space, you can check that and change the behavior accordingly.</p>

<p>This will even work if the user combine the 2 options (e.g. entering <code>'a'</code> and then <code>'b c'</code>), although it is not perfect (it is possible to get more than <code>n</code> names, for example if <code>n == 3</code> and inputting <code>'a b'</code> and <code>'c d'</code>)</p>

<pre><code>n = int(input(""enter the no of workers \n""))
print(""enter the names of workers"")
NameList = []
while len(NameList) &lt; n:
    worker_name = input()
    if ' ' in worker_name:
        if NameList:
            NameList.extend(worker_name.split())
        else:
            NameList = worker_name.split()
    else:
        NameList.append(worker_name)
print(NameList)
</code></pre>
","1453822","","1453822","","2016-08-16 14:32:28","2016-08-16 14:32:28","","","","7","","",""
"38977553","2","","38977285","2016-08-16 14:26:44","","0","","<p>Instead of the spaces, I would <em>highly</em> recommend the following:</p>

<pre><code>for i in range(n):
    NameList.append(input(""What is the name of worker "" + i +""?""))
</code></pre>

<p>If you <em>absolutely</em> need to accept spaces, 
use DeepSpace's answer.</p>
","6719731","","","","","2016-08-16 14:26:44","","","","0","","",""
"39014240","2","","38977344","2016-08-18 09:13:21","","0","","<p>Based on the answer of Simon Visser on question : 
<a href=""https://stackoverflow.com/questions/28107123/cannot-install-numpy-from-wheel-format?rq=1"">Cannot install numpy from wheel format</a>
the solution is to replace ""cp26mu"" in the name of the file by none. </p>
","4398691","","-1","","2017-05-23 12:08:34","2016-08-18 09:13:21","","","","0","","",""
"38977521","2","","38977360","2016-08-16 14:25:02","","7","","<p><code>dt</code>, <code>x</code>, and <code>states</code> are defined as <em>class</em> variables, not <em>instance</em> variables. Every instance of that class that you make will share them. If you need them to be initialized each time you generate a new instance, that's exactly what <code>__init__()</code> is for:</p>

<pre><code>class run_c:

   def __init__(self, input):
      ...
      self.dt     = dft.dt
      self.x      = dft.x0
      self.states = [ [], [], [], [] ]
      ...

      for key in input.keys():
         if hasattr(self, key): setattr(self, key, input[key])
      ...
      self.execute()
</code></pre>
","789671","","","","","2016-08-16 14:25:02","","","","0","","",""
"38977584","2","","38977360","2016-08-16 14:28:08","","0","","<p>In addition to the existing answer: you can initialize these variables in the <code>__new__</code> method.</p>

<pre><code>class A:
    val = 1

    def __new__(cls, v):
        t = super().__new__(cls)
        t.val = v
        return t

    def __init__(self, v):
        val = v

a, b = A(1), A(2)

print(a.val, b.val)
</code></pre>

<p>If you remove the <code>__new__</code> method, the output'd be <code>1 1</code> and otherwise <code>1 2</code>. </p>
","4354477","","","","","2016-08-16 14:28:08","","","","1","","",""
"38977559","2","","38977390","2016-08-16 14:27:06","","0","","<p>you can find your apache logs in this directory <code>/var/log/apache/</code>. Error 500 usually means there is a server error. If you can't find the error in these logs, then try to use verbose logging.</p>
","6578674","","","","","2016-08-16 14:27:06","","","","2","","",""
"38986394","2","","38977401","2016-08-17 00:26:04","","0","","<p>The <a href=""https://en.wikipedia.org/wiki/Levenshtein_distance"" rel=""nofollow"">Levenshtein edit distance</a> is the most common way to perform fuzzy matching of strings.  It is available in the <a href=""http://pypi.python.org/pypi/python-Levenshtein/"" rel=""nofollow"">python-Levenshtein package</a>.  Another popular distance is <a href=""https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance"" rel=""nofollow"">Jaro Winkler's distance</a>, also available in the same package.</p>

<p>Assuming a simple array <code>numpy</code> array:</p>

<pre><code>import numpy as np
import Levenshtein as lv

ar = np.array([
      'string'
    , 'stum'
    , 'Such'
    , 'Say'
    , 'nay'
    , 'powder'
    , 'hiden'
    , 'parrot'
    , 'ming'
    ])
</code></pre>

<p>We define helpers to give us indexes of Levenshtein and Jaro distances, between a string we have and all strings in the array.</p>

<pre><code>def levenshtein(dist, string):
    return map(lambda x: x&lt;dist, map(lambda x: lv.distance(string, x), ar))

def jaro(dist, string):
    return map(lambda x: x&lt;dist, map(lambda x: lv.jaro_winkler(string, x), ar))
</code></pre>

<p>Now, note that Levenshtein distance is an integer value counted in number of characters, whilst Jaro's distance is a floating point value that normally varies between 0 and 1.  Let's test this using <code>np.where</code>:</p>

<pre><code>print ar[np.where(levenshtein(3, 'str'))]
print ar[np.where(levenshtein(5, 'str'))]
print ar[np.where(jaro(0.00000001, 'str'))]
print ar[np.where(jaro(0.9, 'str'))]
</code></pre>

<p>And we get:</p>

<pre><code>['stum']
['string' 'stum' 'Such' 'Say' 'nay' 'ming']
['Such' 'Say' 'nay' 'powder' 'hiden' 'ming']
['string' 'stum' 'Such' 'Say' 'nay' 'powder' 'hiden' 'parrot' 'ming']
</code></pre>
","6327365","","","","","2016-08-17 00:26:04","","","","2","","",""
"38977627","2","","38977457","2016-08-16 14:30:20","","1","","<p>gdata is <a href=""https://developers.google.com/gdata/docs/directory"" rel=""nofollow"">deprecated</a> and does not have support for Python 3.x in the first place. Use any of <a href=""https://developers.google.com/products"" rel=""nofollow"">these</a> APIs.</p>
","4652263","","","","","2016-08-16 14:30:20","","","","0","","",""
"44454088","2","","38977457","2017-06-09 09:24:28","","0","","<p>Shobhit Bhatnagar, try this one - <code>pip install -e git+https://github.com/dvska/gdata-python3#egg=gdata</code></p>
","1303068","","","","","2017-06-09 09:24:28","","","","0","","",""
"38978075","2","","38977472","2016-08-16 14:50:56","","0","","<pre><code>import threading
dt = {}
threading.Thread(target=dt.update, kwargs=dict(out=123)).start()

while 'out' not in dt:
    print('out' in dt)
print(dt)
</code></pre>
","5912296","","5912296","","2016-08-16 15:17:48","2016-08-16 15:17:48","","","","4","","",""
"38978438","2","","38977472","2016-08-16 15:07:22","","1","","<p>You can give your thread instance an optional callback function to call when it's finished.<br>
Note I added a <code>Lock</code> to prevent concurrent printing (which does block).</p>

<pre><code>import threading
import time

print_lock = threading.Lock()  # prevent threads from printing at same time

class TestWorker(threading.Thread):
    def __init__(self, threadID, name, callback=None):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.callback = callback if callback else lambda: None

    def run(self):
        with print_lock:
            print(""Starting "" + self.name)
        time.sleep(3)
        with print_lock:
            print(""Exiting "" + self.name)
        self.callback()

class TestMain:
    def __init__(self):
        self.work_done = False

    def do_work(self):
        thread = TestWorker(1, ""Thread-1"", self.on_work_done)
        thread.start()

    def do_something_else(self):
        with print_lock:
            print(""Something else"")

    def on_work_done(self):
        with print_lock:
            print(""work done"")
        self.work_done = True

main = TestMain()
main.do_work()
while not main.work_done:
    main.do_something_else()
    time.sleep(.5)  # do other stuff...

print('Done')
</code></pre>

<p>Output:</p>

<pre class=""lang-none prettyprint-override""><code>Starting Thread-1
Something else
Something else
Something else
Something else
Something else
Something else
Exiting Thread-1
Something else
work done
Done
</code></pre>
","355230","","","","","2016-08-16 15:07:22","","","","4","","",""
"38980087","2","","38977472","2016-08-16 16:32:32","","1","","<pre><code>import queue
import threading

class SThread(threading.Thread, queue.Queue):
    def __init__(self, queue_out: object):
        threading.Thread.__init__(self)
        queue.Queue.__init__(self)
        self.queue_out = queue_out
        self.setDaemon(True)
        self.start()

    def run(self):
        print('Thread start')
        while True:
            cmd = self.get()
            if cmd is None:
                break  # exit thread
            self.queue_out.put(cmd['target'](*cmd.get('args', ())), **cmd.get('kwargs', {}))
            self.task_done()
        print('Thread stop')

def testFn(a):
    print('+ %s' % a)
    return a

if __name__ == '__main__':
    print('main 1')
    # init
    queue_out = queue.Queue()
    thread = SThread(queue_out)

    # in
    for a in range(5): thread.put(dict(target=testFn, args=(a,)))

    thread.put(None)
    print('main 2')
    # out
    while True:
        try:
            print('- %s' % queue_out.get(timeout=3))
        except queue.Empty:
            break
    print('main 3')
</code></pre>

<p>OUT:</p>

<pre><code>main 1
Thread start
main 2
+ 0
+ 1
+ 2
+ 3
+ 4
Thread stop
- 0
- 1
- 2
- 3
- 4
main 3
</code></pre>
","5912296","","5912296","","2016-08-17 12:11:00","2016-08-17 12:11:00","","","","0","","",""
"38984338","2","","38977525","2016-08-16 20:56:12","","1","","<p>Some details of what you must do may depend on what you want to do with IDLE's Shell once you have it running.  I would like to know more about that.  But let us start simple and make the minimum changes to pyshell.main needed to make it run with other code.  </p>

<p>Note that in 3.6, which I use below, <code>PyShell.py</code> is renamed <code>pyshell.py</code>. Also note that everything here amounts to using IDLE's private internals and is 'use at your own risk'.</p>

<p>I presume you want to run Shell in the same process (and thread) as your tkinter code.  Change the signature to</p>

<pre><code>def main(tkroot=None):
</code></pre>

<p>Change root creation (find <code># setup root</code>) to</p>

<pre><code>if not tkroot:
    root = Tk(className=""Idle"")
    root.withdraw()
else:
    root = tkroot
</code></pre>

<p>In current 3.6, there are a couple more lines to be indented under <code>if not tkroot</code>:</p>

<pre><code>    if use_subprocess and not testing:
        NoDefaultRoot()
</code></pre>

<p>Guard mainloop and destroy (at the end) with</p>

<pre><code>if not tkroot:
    while flist.inversedict:  # keep IDLE running while files are open.
        root.mainloop()
    root.destroy()
# else leave mainloop and destroy to caller of main
</code></pre>

<p>The above adds 'dependency injection' of a root window to the function.  I might add it in 3.6 to make testing (an example of 'other code') easier.</p>

<p>The follow tkinter program now runs, displaying the both the root window and an IDLE shell.</p>

<pre><code>from tkinter import *
from idlelib import pyshell

root = Tk()
Label(root, text='Root id is '+str(id(root))).pack()
root.update()
def later():
    pyshell.main(tkroot=root)
    Label(root, text='Use_subprocess = '+str(pyshell.use_subprocess)).pack()

root.after(0, later)
root.mainloop()
</code></pre>

<p>You should be able to call pyshell.main whenever you want.</p>
","722804","","","","","2016-08-16 20:56:12","","","","0","","",""
"44909825","2","","38978073","2017-07-04 15:35:29","","0","","<p>Using tf.metrics did the trick for me : </p>

<pre><code>#define the method
x = tf.placeholder(tf.int32, )
y = tf.placeholder(tf.int32, )
acc, acc_op = tf.metrics.accuracy(labels=x, predictions=y)
rec, rec_op = tf.metrics.recall(labels=x, predictions=y)
pre, pre_op = tf.metrics.precision(labels=x, predictions=y)

#predict the class using your classifier
scorednn = list(DNNClassifier.predict_classes(input_fn=lambda: input_fn(testing_set)))
scoreArr = np.array(scorednn).astype(int)

#run the session to compare the label with the prediction
sess=tf.Session()
sess.run(tf.global_variables_initializer())
sess.run(tf.local_variables_initializer())
v = sess.run(acc_op, feed_dict={x: testing_set[""target""],y: scoreArr}) #accuracy
r = sess.run(rec_op, feed_dict={x: testing_set[""target""],y: scoreArr}) #recall
p = sess.run(pre_op, feed_dict={x: testing_set[""target""],y: scoreArr}) #precision

print(""accuracy %f"", v)
print(""recall %f"", r)
print(""precision %f"", p)
</code></pre>

<p>Result : </p>

<pre><code>accuracy %f 0.686667
recall %f 0.978723
precision %f 0.824373
</code></pre>

<p>Note : for Accuracy I would use :</p>

<pre><code>accuracy_score = DNNClassifier.evaluate(input_fn=lambda:input_fn(testing_set),steps=1)[""accuracy""]
</code></pre>

<p>As it is simpler and already compute in the evaluate.</p>

<p>Also call variables_initializer if you don't want cumulative result.</p>
","3459612","","","","","2017-07-04 15:35:29","","","","0","","",""
"38978161","2","","38978084","2016-08-16 14:54:35","","1","","<p>If I understand correctly, I think this is what you're looking for:</p>

<pre><code>params = {}

if x:
    params['full_name'] = 'something'
if y:
    params['role'] = 'something else'

an_agent.update(r_agent_id, **params)
</code></pre>

<p><strong>UPDATE</strong></p>

<p>There are other options, assuming you control the code for <code>Agents</code>. E.g., you could redefine the method like this:</p>

<pre><code>def update(self, agent_id, full_name=None, role=None, status=None):
    if full_name is None: full_name = 'none'
    if role is None: role = 'none'
    if status is None: status = 'none'
    ...
</code></pre>

<p>and then always pass all arguments:</p>

<pre><code>full_name = None
role = None
status = None

if x:
    full_name = 'something'
if y:
    role = 'something else'

an_agent.update(r_agent_id, full_name, role, status)
</code></pre>

<p>or perhaps keep the definition of <code>update</code> the same and just initialize your parameters to the string <code>'none'</code>.</p>
","94559","","","","","2016-08-16 14:54:35","","","","3","","",""
"38978254","2","","38978160","2016-08-16 14:58:16","","4","","<p><code>request.get_json()</code> looks for JSON data in the request <em>body</em> (e.g. what a POST request would include). You put the JSON data in the <em>URL query string</em> of a GET request instead.</p>

<p>Your <code>curl</code> command sends your JSON un-escaped, and produces an invalid URL, so the server <em>rightly</em> rejects that:</p>

<pre><code>http://localhost:8080/resources/?{""parameter"": ""xxx""}
</code></pre>

<p>You can't have spaces in a URL, for example. You'd have to use <code>--data-urlencode</code> instead for this to be escaped properly:</p>

<pre><code>$ curl --data-urlencode @conf.json -G http://localhost:8080/resources/
</code></pre>

<p>Note that the <code>Content-Type</code> header is not needed here; you don't have any request body to record the content <em>of</em>.</p>

<p>The adjusted <code>curl</code> command now sends a properly encoded URL:</p>

<pre><code>http://localhost:8080/resources/?%7B%22parameter%22%3A%20%22xxx%22%7D%0A%0A
</code></pre>

<p>Access that data with <code>request.query_string</code>. You will also have to <em>decode</em> the URL encoding again before passing this to <code>json.loads()</code>:</p>

<pre><code>from urllib import unquote

json_raw_data = unquote(request.query_string)
json_data = json.loads(json_raw_data)
</code></pre>

<p>Take into account that many webservers put limits on how long a URL they'll accept. If you are planning on sending more than 4k characters in a URL this way, you really need to reconsider and use <code>POST</code> requests instead. That's 4k with the JSON data <em>URL encoded</em>, which adds a considerable overhead.</p>
","100297","","100297","","2016-08-16 15:04:47","2016-08-16 15:04:47","","","","0","","",""
"38989657","2","","38978160","2016-08-17 06:37:22","","0","","<p>Martijn answer was right with this</p>

<pre><code>$ curl --data-urlencode @conf.json -G http://localhost:8080/resources/
</code></pre>

<p>But you do not need to use <code>urllib</code> to get the args with flask. I would instead on my endpoint just use the following.</p>

<pre><code>@resources.route('/resources')
def test():
    args = request.args
    return args.get('parameter')
</code></pre>

<p>Also I would look at using the <code>flask_testing</code> extension that way you can setup reproducible test cases that exist within the context of the running application.</p>

<pre><code>from flask_testing import TestCase
from app import app

class TestQueryString(TestCase):

    def create_app(self): # Must be implemented
        return app

    def test_json_parse_args(self):
        data = {
            'parameter': 'value'
        }

        r = self.client.get('/resources', query_string=data)
        self.assert200(r)
        self.assertEqual(r.data, 'value')
</code></pre>

<p><a href=""https://pythonhosted.org/Flask-Testing/"" rel=""nofollow"">https://pythonhosted.org/Flask-Testing/</a></p>
","3990806","","3990806","","2016-08-17 06:44:50","2016-08-17 06:44:50","","","","2","","",""
"38984401","2","","38978163","2016-08-16 21:00:59","","0","","<p><em>Seems -2 returns 254 on echo $? in bash.</em></p>

<p>The Bash is interpreting the -2 as 254 probably due to how it handles negative numbers which <em>I believe</em> is by returning 8-bit unsigned integers.  </p>

<p><strong>Soln:</strong> Use a postive integer number > 0 but &lt; 256.  Bash will see a return code > 0 as an error.</p>

<p><em>Does the lock below need to be global? I believe so, in order that it stays in scope until the program finishes.</em></p>

<p><strong>Ans:</strong> If there are no other conflicts with locking the file than I would say that the global lock is fine.</p>
","2079373","","2079373","","2016-08-16 21:21:32","2016-08-16 21:21:32","","","","0","","",""
"38978267","2","","38978174","2016-08-16 14:59:07","","1","","<p>With <code>shell=True</code> the cmd needs to be a string.</p>

<p><code>subprocess.check_call(command, shell=True)</code></p>

<p>where command is of type <code>str</code></p>
","4165324","","","","","2016-08-16 14:59:07","","","","5","","",""
"38998694","2","","38978174","2016-08-17 13:53:52","","0","","<p>Thanks for your help. The final solution is kind of stupid. I started spyder via the anaconda GUI. If I do so the above code does not work.</p>

<p>If I run this directly via the console or start spyder via the console everything is fine. It seems that the bash_profile is not loaded when spyder is loaded but requires the console to do so</p>
","5098883","","","","","2016-08-17 13:53:52","","","","0","","",""
"39120531","2","","38978182","2016-08-24 10:18:04","","1","","<p>Since I wasn't able to implement an Observer to watch widgets like the ttk.Combobox, I've decided to create a workaround. Here are the steps I took, in order to achieve a MVC architecture from Bryan Oakleys example (link is in the question), which refreshes its model class via the controller class, whenever a user takes an action in the view (GUI). </p>

<p><strong>Step 1: Add a model class</strong></p>

<p>First, in order to use a MVC architecture, we have to seperate the code into model, view and control. In this example, model is <code>class Model:</code>, control is <code>class PageControl(tk.Tk):</code> and view are the pages <code>class StartPage(tk.Frame)</code>, <code>PageOne(tk.Frame)</code> and <code>PageTwo(tk.Frame)</code>.</p>

<p><strong>Step 2: Set up your model class</strong></p>

<p>Now we have to decide on which variables we want to have in the model class. In this example, we have directories and keys (status of the comboboxes), which we want to save in dictionaries. After setting them up empty, all we have to do is add setters and getters for each variable, so we can refresh data in model and also retrieve some, if we want. Additionally, we could implement delet methods for each variable, if we wanted to.</p>

<p><strong>Step 3: Add push and pull methods to the control class</strong></p>

<p>Now that there is a model class, we can refrence it via e. g. <code>self.model = Model()</code> in <code>PageControl(tk.Tk)</code> (control). Now we have the basic tools to set data in <code>Model</code> via e. g. <code>self.model.set_keys(self.shared_keys)</code> and also get data from <code>Model</code>. Since we want our control class to do that, we need some methods, that can achieve this. So we add the push and pull methods to the <code>PageControl</code> (e. g. <code>def push_key(self)</code>), which in turn can be refrenced from view (StartPage, PageOne, PageTwo) via controller.</p>

<p><strong>Step 4: Add your widgets to the view class</strong></p>

<p>Now we have to decide on which widgets shall be on which page and what you want them to do. In this example, there are buttons for navigation, which for the sake of the task can be ignored, two comboboxes and a button, which opens a file dialog. </p>

<p>Here, we want the comboboxes to refresh their status whenever it is changed and send the new status via controller to the model. Whereas the <code>Open</code> button of <code>PageOne</code> shall open a file dialog, where the user then selects files he/she wants to open. The directories we got from this interaction then shall be send via controller to model.</p>

<p><strong>Step 5: Get all your functionality into the controller class</strong></p>

<p>Since there is a controller variable, we can use it to refrence methods, which are in the controller class. This way, we can outsource all our methods from the pages into the controller and reference them via self.controller.function_of_controller_class. But we have to be aware, that methods, which are bound to commands via <code>lambda:</code> can't return any values, but they are also not called on programme startup. So keep that in mind.</p>

<p><strong>Step 6: Set up your bindings and wrappers</strong></p>

<p>Here we have to set up the <code>.bind()</code> for our comboboxes. Since the controller allready is set up to store data and the comboboxes have a textvariable, we can use this to gather information about the status of the comboboxes via <code>combobox.bind(&lt;&lt;ComboboxSelect&gt;&gt;)</code>. All we have to do is to set up a wrapper which is called, whenever <code>combobox.bind(&lt;&lt;ComboboxSelect&gt;&gt;)</code> is throwing an event.</p>

<p><strong>Closing statement</strong></p>

<p>Now we have it, a programme based on Bryan Oakleys example of ""How to get variable data from a class"", which utilises a model, which is updated via controller whenever the user takes a corresponding action in the view. Unfortunately it doesn't utilise a Observer class, as first intended, but I'll keep working on it and update this, when I've found a satisfying solution.</p>
","6479274","","","","","2016-08-24 10:18:04","","","","0","","",""
"38981919","2","","38981503","2016-08-16 18:21:19","","2","","<p>If you clean a django form field (using <code>def clean_myfield</code>) you need to return that field</p>

<pre><code>def clean_password(self):
    password = self.cleaned_data.get('password')
    if len(password) &lt;= 8:
        raise forms.ValidationError(""Password must be longer than 8 characters"")
    else:
        print(""password saved"")
    return password  #  &lt;--  add this line
</code></pre>
","3003438","","","","","2016-08-16 18:21:19","","","","2","","",""
"38982236","2","","38981700","2016-08-16 18:40:28","","1","","<p>Put your application name on top in the <code>INSTALLED_APPS</code> list. </p>
","301107","","","","","2016-08-16 18:40:28","","","","0","","",""
"39013958","2","","38981765","2016-08-18 08:59:51","","0","","<p>In the end I managed to import all the dependencies by using the command 'pyi-makespec' which then required an additional step to make the actual exe file. The documentation for pyinstaller is really extensive and accurate. Thanks @Repiklis for your inputs</p>
","6720889","","","","","2016-08-18 08:59:51","","","","0","","",""
"38981970","2","","38981814","2016-08-16 18:23:48","","0","","<p>You could just enumerate the files like so</p>

<pre><code>files = [self.model_file, self.model_file2, self.model_file3]
values = [1 ,5 ,7]
for n in range(len(value)):  
    pickle_model(self.model, files[n]) 
</code></pre>

<p>Does this answer the question?</p>
","5162426","","","","","2016-08-16 18:23:48","","","","1","","",""
"38982181","2","","38981814","2016-08-16 18:36:56","","0","","<p>An elegant way to do it is to iterate through both lists at the same time using <code>zip</code></p>

<pre><code>def run(self):
    self.import_training_data()
    for value,model_file in zip([1, 3, 7],[self.model_file, self.model_file2, self.model_file3]):
        self.extract_variables(value)
        self.train_model()

        pickle_model(self.model, model_file)
</code></pre>

<p>As for the design it could be improved</p>

<p>For instance, define your model files as a list directly:</p>

<pre><code>self.model_list = map(lambda x : os.path.join('/wayfair/mnt/crunch_buckets/central/data_science/customer_style',x),['train_modern.pkl','train_traditional','train_rustic.pkl'])
</code></pre>

<p>Which gives:</p>

<pre><code>def run(self):
    self.import_training_data()
    for value,model_file in zip([1, 3, 7],self.model_file_list):
        self.extract_variables(value)
        self.train_model()
</code></pre>
","6451573","","6451573","","2016-08-16 18:45:53","2016-08-16 18:45:53","","","","1","","",""
"38981959","2","","38981847","2016-08-16 18:22:55","","0","","<p>The easy way to ensure that dependent modules are installed is through <em>pip -r</em>.</p>

<p>Essentially, make a <em>requirements.txt</em> along with your script for users to install the correct modules and versions. </p>

<p>Inside the text file should look like this:</p>

<pre><code>Flask==0.11.1
</code></pre>

<p>You can use:</p>

<pre><code>pip freeze
</code></pre>

<p>To find which modules you have installed</p>

<p>EDIT: This is implied your script is small and not packaged inside a .dmg or .exe file. </p>
","2702180","","","","","2016-08-16 18:22:55","","","","2","","",""
"38982133","2","","38981847","2016-08-16 18:34:20","","0","","<p><code>numpy</code>, <code>scipy</code> takes a long time to install in a virtualenv.  For this reason I would not recommend virtualenv like others have.  You could try <code>pyinstaller</code> to create an OS specific executable.  Haven't tried it with numpy or scipy myself though.</p>

<p><a href=""http://www.pyinstaller.org"" rel=""nofollow"">http://www.pyinstaller.org</a></p>
","2172464","","","","","2016-08-16 18:34:20","","","","0","","",""
"38982172","2","","38981885","2016-08-16 18:36:30","","5","","<p>You can use <code>agg</code> function after the <code>groupby</code>:</p>

<pre><code>df.groupby(['name', 'age'])['phonenumber'].agg({'phonecount': pd.Series.nunique, 'phonenumber': lambda x: ','.join(x)})

#               phonenumber  phonecount
# name  age     
#    A   10   Phone1,Phone2           2
#    B   21 PhoneB1,PhoneB2           2
#    C   23          PhoneC           1
</code></pre>

<p>Or a shorter version according to @root and @Jon Clements:</p>

<pre><code>df.groupby(['name', 'age'])['phonenumber'].agg({'phonecount': 'nunique', 'phonenumber': ','.join})
</code></pre>
","4983450","","4983450","","2016-08-16 18:51:52","2016-08-16 18:51:52","","","","5","","",""
"38983726","2","","38981912","2016-08-16 20:17:00","","1","","<p>Here's a compact vectorized approach without those error checks -</p>

<pre><code>def unique_map_pixels_vectorized(imgs):
    N,H,W = len(imgs), imgs.shape[2], imgs.shape[3]
    img2D = imgs.transpose(0, 2, 3, 1).reshape(-1,3)
    ID = np.ravel_multi_index(img2D.T,img2D.max(0)+1)
    _, firstidx, tags = np.unique(ID,return_index=True,return_inverse=True)
    return tags.reshape(N,H,W), img2D[firstidx]
</code></pre>

<p>Runtime test and verification -</p>

<pre><code>In [24]: # Setup inputs (3x smaller than original ones)
    ...: N,H,W = 200,24,32
    ...: imgs = np.random.randint(0,10,(N,3,H,W))
    ...: 

In [25]: %timeit unique_map_pixels(imgs)
1 loop, best of 3: 2.21 s per loop

In [26]: %timeit unique_map_pixels_vectorized(imgs)
10 loops, best of 3: 37 ms per loop ## 60x speedup!

In [27]: map1,unq1 = unique_map_pixels(imgs)
    ...: map2,unq2 = unique_map_pixels_vectorized(imgs)
    ...: 

In [28]: np.allclose(map1,map2)
Out[28]: True

In [29]: np.allclose(np.array(map(list,unq1)),unq2)
Out[29]: True
</code></pre>
","3293881","","499839","","2016-08-18 18:30:03","2016-08-18 18:30:03","","","","2","","",""
"38988308","2","","38981915","2016-08-17 04:48:41","","3","","<p>You can consider changing your backend to <code>TkAgg</code> in the Python 2 virtualenv by running the following:</p>

<pre><code>sudo apt install python-tk  # install Python 2 bindings for Tk
pip --no-cache-dir install -U --force-reinstall matplotlib  # reinstall matplotlib   
</code></pre>

<p>To confirm the backend is indeed <code>TkAgg</code>, run</p>

<pre><code>python -c 'import matplotlib as mpl; print(mpl.get_backend())'
</code></pre>

<p>and you should see <code>TkAgg</code>.</p>
","486919","","","","","2016-08-17 04:48:41","","","","3","","",""
"38982372","2","","38981977","2016-08-16 18:48:15","","2","","<p>You can try:</p>

<pre><code>df['C'] = df[['A', 'B']].apply(lambda x: x['A'] - pd.DateOffset(months=x['B']), axis=1)
</code></pre>
","2740380","","","","","2016-08-16 18:48:15","","","","0","","",""
"38983098","2","","38981977","2016-08-16 19:36:08","","3","","<p>Here is a vectorized way to compose arrays of dates (NumPy <code>datetime64</code>s) out of
date components (such as years, months, days):</p>

<pre><code>import numpy as np
import pandas as pd

def compose_date(years, months=1, days=1, weeks=None, hours=None, minutes=None,
                 seconds=None, milliseconds=None, microseconds=None, nanoseconds=None):
    years = np.asarray(years) - 1970
    months = np.asarray(months) - 1
    days = np.asarray(days) - 1
    types = ('&lt;M8[Y]', '&lt;m8[M]', '&lt;m8[D]', '&lt;m8[W]', '&lt;m8[h]',
             '&lt;m8[m]', '&lt;m8[s]', '&lt;m8[ms]', '&lt;m8[us]', '&lt;m8[ns]')
    vals = (years, months, days, weeks, hours, minutes, seconds,
            milliseconds, microseconds, nanoseconds)
    return sum(np.asarray(v, dtype=t) for t, v in zip(types, vals)
               if v is not None)

df = pd.DataFrame({'A': pd.date_range(start='1-1-2016',periods=5, freq='M')})
df['B'] = df['A'].dt.month
df['C'] = compose_date(years=df['A'].dt.year, 
                       months=df['A'].dt.month-df['B'], 
                       days=df['A'].dt.day)
print(df)
#            A  B          C
# 0 2016-01-31  1 2015-12-31
# 1 2016-02-29  2 2015-12-29
# 2 2016-03-31  3 2015-12-31
# 3 2016-04-30  4 2015-12-30
# 4 2016-05-31  5 2015-12-31
</code></pre>

<hr>

<pre><code>In [135]: df = pd.DataFrame({'A': pd.date_range(start='1-1-2016', periods=10**3, freq='M')})

In [136]: df['B'] = df['A'].dt.month

In [137]: %timeit compose_date(years=df['A'].dt.year, months=df['A'].dt.month-df['B'], days=df['A'].dt.day)
10 loops, best of 3: 41.2 ms per loop

In [138]: %timeit df[['A', 'B']].apply(lambda x: x['A'] - pd.DateOffset(months=x['B']), axis=1)
10 loops, best of 3: 169 ms per loop
</code></pre>
","190597","","","","","2016-08-16 19:36:08","","","","0","","",""
"38984485","2","","38982002","2016-08-16 21:05:42","","0","","<p>One argument could be</p>

<pre><code>parser.add_argument('-o','--output', default='-')
</code></pre>

<p>and later</p>

<pre><code>if args.output in ['PROMPT']:
    ... input...
</code></pre>

<p>others:</p>

<pre><code>parser.add_argument('--flatten', action='store_true')
parser.add_argument('--fill_form', dest='ftd')
parser.add_argument('--path')

if args.path in ['PROMPT']:
     args.path = input...
</code></pre>
","901925","","","","","2016-08-16 21:05:42","","","","6","","",""
"38982810","2","","38982763","2016-08-16 19:16:13","","-1","","<p>have you tried</p>

<pre><code>if p == ""good"":
</code></pre>

<p>the double equal means the same as.
Also, if you are looking for a helpful free beginner course, try codecademy. They helped me loads learn python</p>
","6710922","","","","","2016-08-16 19:16:13","","","","2","","",""
"38982857","2","","38982763","2016-08-16 19:19:24","","0","","<p>You have to use:</p>

<blockquote>
  <p>If p == 'good':</p>
</blockquote>

<p>The <code>==</code> compares the value of the two. The <code>Is</code> keyword checks for identity by comparing  the memory address. </p>

<p>Hope this explains it enough. 
Hannes</p>
","6456332","","","","","2016-08-16 19:19:24","","","","1","","",""
"38983417","2","","38982776","2016-08-16 19:57:20","","0","","<p>A NumPy solution:</p>

<pre><code>import numpy as np

val = B / len(m) # column sums &lt;= B
assert val * len(m[0]) &gt;= A # row sums &gt;= A

# create array shaped like m, filled with val
arr = np.empty_like(m)
arr[:] = val
</code></pre>

<p>I chose to ignore the original content of <code>m</code> - it's all zero in your example anyway.</p>
","4323","","","","","2016-08-16 19:57:20","","","","1","","",""
"38983968","2","","38982776","2016-08-16 20:32:21","","0","","<pre><code>from random import *

m = [[0,0,0],
    [0,0,0]]
A = 20
B = 25

x = 1     #or other number, not relevant
rows = len(m)
cols = len(m[0])

def runner(list1, a1, b1, x1):
    list1_backup = list(list1)
    rows = len(list1)
    cols = len(list1[0])

    for r in range(rows): 
        while sum(list1[r]) &lt;= a1:  
            c = randint(0, cols-1)
            list1[r][c] += x1

    for c in range(cols): 
        cant = sum([list1[r][c] for r in range(rows)])
        while cant &gt;= b1:
            r = randint(0, rows-1)
            if list1[r][c] &gt;= x1:  #I don't want negatives
                list1[r][c] -= x1
    good_a_int = 0
    for r in range(rows):
        test1 = sum(list1[r]) &gt; a1
        good_a_int += 0 if test1 else 1

    if good_a_int == 0:
        return list1
    else:
        return runner(list1=list1_backup, a1=a1, b1=b1, x1=x1)

m2 = runner(m, A, B, x)
for row in m:
    print ','.join(map(lambda x: ""{:&gt;3}"".format(x), row))
</code></pre>
","4437749","","","","","2016-08-16 20:32:21","","","","0","","",""
"38983999","2","","38982776","2016-08-16 20:34:25","","1","","<p>Something like this should to the trick:</p>

<pre><code>import numpy
from scipy.optimize import linprog

A = 10
B = 20
m = 2
n = m * m

# the coefficients of a linear function to minimize.
# setting this to all ones minimizes the sum of all variable
# values in the matrix, which solves the problem, but see below.
c = numpy.ones(n)

# the constraint matrix.
# This is matrix-multiplied with the current solution candidate
# to form the left hand side of a set of normalized 
# linear inequality constraint equations, i.e.
#
# x_0 * A_ub[0][0] + x_1 * A_ub[0][1] &lt;= b_0
# x_1 * A_ub[1][0] + x_1 * A_ub[1][1] &lt;= b_1
# ...
A_ub = numpy.zeros((2 * m, n))

# row sums. Since the &lt;= inequality is a fixed component,
# we just multiply everthing by (-1), i.e. we demand that
# the negative sums are smaller than the negative limit -A.
#
# Assign row ranges all at once, because numpy can do this.
for r in xrange(0, m):
    A_ub[r][r * m:(r + 1) * m] = -1

# We want that the sum of the x  in each (flattened)
# column is smaller than B
#
# The manual stepping for the column sums in row-major encoding
# is a little bit annoying here.
for r in xrange(0, m):
    for j in xrange(0, m):
        A_ub[r + m][r + m * j] = 1

# the actual upper limits for the normalized inequalities.
b_ub = [-A] * m + [B] * m

# hand the linear program to scipy
solution = linprog(c, A_ub=A_ub, b_ub=b_ub)

# bring the solution into the desired matrix form
print numpy.reshape(solution.x, (m, m))
</code></pre>

<p><strong>Caveats</strong></p>

<ul>
<li>I use <code>&lt;=</code>, not <code>&lt;</code> as indicated in your question, because that's what numpy supports.</li>
<li>This minimizes the total sum of all values in the target vector.
For your use case, you probably want to minimize the distance
to the original sample, which the linear program cannot handle, since neither the squared error nor the absolute difference can be expressed using a linear combination (which is what c stands for). For that, you will probably need to go to full <a href=""https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html#scipy.optimize.minimize"" rel=""nofollow""><code>minimize()</code></a>. </li>
</ul>

<p>Still, this should get you rough idea.</p>
","3191557","","3191557","","2016-08-16 20:56:50","2016-08-16 20:56:50","","","","2","","",""
"38982984","2","","38982784","2016-08-16 19:28:11","","0","","<p>Edit: Also, your server isn't accepting/listing for connections</p>

<p>You should make the server multithreaded so that it can send and receive at the same time. Here's how it might look:</p>

<pre><code>import socket
import os
from threading import Thread
import thread

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind((host,port))
    s.listen(10)
    serverThreads = []

    while True:
        print ""Server is listening for connections...""
        client, address = s.accept()
        serverThreads.append(Thread(target=runserver, args=(client,address)).start())
    s.close()

def runserver(client, address):
    clients = set()
    lockClients = threading.Lock()
    print (""Connection from: "" + address)
    with lockClients:
        clients.add(client)
    try:    
        while True:
            data = client.recv(1024)
            if data:
                print data.decode()
                with lockClients:
                    for c in clients:
                        c.sendall(data)
            else:
                break
    finally:
        with lockClients:
            clients.remove(client)
            client.close()
</code></pre>

<p>When you send a string over TCP you need to encode it to bytes. So your client file should look like this instead:</p>

<pre><code>def run(self):
    self._client.send(('Welcome to the chatroom!').encode())
    self._name = self._client.recv(BUFSIZE).decode()
    self._client.send(str(self._record),CODE)
    while True:
        message = self._client.recv(BUFSIZE).decode()
        if not message:
            print('Client disconnected')
            self._client.close()
            break
        else:
            message=self._name +'' + \
                    ctime()+'\n'+message
            self._record.add(message)
            self._client.send(self._record.encode())
</code></pre>

<p>I much prefer the <code>.encode()</code> and <code>.decode()</code> syntax as it makes the code a little more readable IMO.</p>
","1425140","","1425140","","2016-08-16 19:40:56","2016-08-16 19:40:56","","","","0","","",""
"38982989","2","","38982807","2016-08-16 19:28:55","","4","","<p>When you ""run Flask"" you are actually running Werkzeug's development WSGI server, and passing your Flask app as the WSGI callable.</p>

<p>The development server is not intended for use in production.  It is not designed to be particularly efficient, stable, or secure.</p>

<p>Replace the Werkzeug dev server with a production-ready WSGI server such as Gunicorn or uWSGI when moving to production, no matter where the app will be available.</p>

<hr>

<p>The answer is similar for ""should I use a web server"".  WSGI servers happen to have HTTP servers but they will not be as good as a dedicated production HTTP server (Nginx, Apache, etc.).</p>

<hr>

<p>Flask <a href=""http://flask.pocoo.org/docs/dev/deploying/"" rel=""nofollow noreferrer"">documents</a> how to deploy in various ways. Many hosting providers also have documentation about deploying Python or Flask.</p>
","400617","","400617","","2017-06-15 13:03:15","2017-06-15 13:03:15","","","","2","","",""
"38984367","2","","38982807","2016-08-16 20:58:27","","1","","<p>Presumably you already have a Flask app object and routes set up, but if you create the app like this:</p>

<pre><code>import flask

app = flask.Flask(__name__)
</code></pre>

<p>then set up your <code>@app.route()</code>s, and then when you want to start the app:</p>

<pre><code>import gevent

app_server = gevent.wsgi.WSGIServer((host, port), app)
app_server.serve_forever()
</code></pre>

<p>Then you can just run your application directly rather than having to tell gunicorn or uWSGI or anything else to run it for you.</p>

<p>I had a case where I wanted the utility of flask to build a web application (a REST API service) and found the inability to compose flask with other non-flask, non-web-service elements a problem. I eventually found <code>gevent.wsgi.WSGIServer</code> and it was just what I needed. After the call to <code>app_server.serve_forever()</code>, you can call <code>app_server.stop()</code> when your application wants to exit.</p>

<p>In my deployment, my application is listening on localhost: using flask and gevent, and then I have nginx reverse-proxying HTTPS requests on another port and forwarding them to my flask service on localhost.</p>
","6723538","","","","","2016-08-16 20:58:27","","","","2","","",""
"39173449","2","","38986113","2016-08-26 19:25:58","","0","","<pre><code>class rscan(object):

    state = {'online': [], 'offline': []} # Dictionary with list
    ips = [] # Should be filled by function after taking range

    # Amount of pings at the time
    thread_count = 8

    # Lock object to prevent race conditions
    lock = threading.Lock()

    # Using Windows ping command
    def ping(self, ip):
        answer = subprocess.call(['ping','-n','1',ip],stdout = open('1.txt','w'))
        return answer == 0 and ip


    def pop_queue(self):
        ip = None

        self.lock.acquire() # lock !!!
        if self.ips:
            ip = self.ips.pop()

        self.lock.release()

        return ip


    def noqueue(self):
        while True:
            ip = self.pop_queue()

            if not ip:
                return None

            result = 'online' if self.ping(ip) else 'offline'
            self.state[result].append(ip) ### check again


    def start(self):
        threads = []

        for i in range(self.thread_count):

            t = threading.Thread(target=self.noqueue)
            t.start()
            threads.append(t)

        # Wait for all threads

        [ t.join() for t in threads ]

        return self.state

    def rng(self, frm, to, ip3):
        self.frm = frm
        self.to = to
        self.ip3 = ip3
        for i in range(frm, to):
            ip = ip3 + str(i)
            self.ips.append(ip)


if __name__== '__main__':
    scant = rscan()
    scant.thread_count = 8
</code></pre>

<p>edited a bit class i have found also used threads instead of Async &amp; await</p>

<p>Credit: <a href=""http://blog.boa.nu/2012/10/python-threading-example-creating-pingerpy.html"" rel=""nofollow"">http://blog.boa.nu/2012/10/python-threading-example-creating-pingerpy.html</a></p>
","5680356","","","","","2016-08-26 19:25:58","","","","0","","",""
"39112179","2","","38986117","2016-08-23 23:24:51","","0","","<p>I sometimes get this if I'm copying/pasting from a source that has a different indentation size than that of the jupyter notebook. In your screenshot it looks like a small indent size so this seems like the likely culprit. Try highlighting the full block of indented code and hitting <code>ctrl+[</code> then <code>ctrl+]</code> (this unindents the selected lines of code, then reindents them using the jupyter indent size). </p>

<p>If this doesn't work, you might try checking to see if there are any custom indentation settings specified in either "".jupyter/nbconfig/notebook.json"" or "".jupyter/custom/custom.js"" (... or whatever the Windows equivalents are).</p>

<p>In "".jupyter/nbconfig/notebook.json"", I have the indentUnit set to 4 spaces (and have also enabled linewrapping).</p>

<pre><code>{
  ""CodeCell"": {
    ""cm_config"": {
      ""indentUnit"": 4,
      ""lineWrapping"":true
    }
  }
}
</code></pre>

<p>Most editors allow you to set your indent size (Atom, sublime text, etc.) so you can avoid this issue in the future by making sure you have the same indent size everywhere you're swapping code to/from (assuming this is what's causing the red highlighting). Python's default is 4 so def recommend sticking with that. </p>
","6588147","","","","","2016-08-23 23:24:51","","","","1","","",""
"38986284","2","","38986202","2016-08-17 00:08:45","","2","","<p>As I understand it, you are matching on the first field and the file is sorted.  In that case, try:</p>

<pre><code>$ awk 'NR&gt;1{printf ""%s%s"",($1==last?"" "":""\n""),$0}; NR==1{printf ""%s"",$0} {last=$1} END{print""""}' file
ALI P 18:00:40.583 0.0 ALI S 18:00:58.188 1.4
BRD Pg 18:00:48.918 0.4 BRD Sg 18:01:09.437 -1.8
GAN Pn 18:00:58.207 -0.0 GAN Sn 18:01:27.791 0.1
GLB P 18:00:27.265 -0.4 GLB S 18:00:34.187 0.1
GOB S 18:01:13.638 -0.6
IML Pg 18:00:52.264 -0.6
</code></pre>

<h3>How it works</h3>

<ul>
<li><p><code>NR==1{printf ""%s"",$0}</code></p>

<p>For the first line, we print it with no trailing newline.</p></li>
<li><p><code>NR&gt;1{printf ""%s%s"",($1==last?"" "":""\n""),$0}</code></p>

<p>For lines after the first, we print a space if the first fields match or a newline if they don't, followed by the line.</p>

<p>The tricky-looking part here is the ternary statement <code>$1==last?"" "":""\n""</code>.  This just tests to see if the first field is equal to the last first field.  If it is, it returns the string after the <code>?</code>.  If it isn't, it returns the string after the <code>:</code>.</p></li>
<li><p><code>last=$1</code></p>

<p>We update the variable <code>last</code> to the most recent first field.</p></li>
<li><p><code>END{print""""}</code></p>

<p>After we have finished reading the file and to make sure that we have a complete final line, we print a newline.</p></li>
</ul>
","3030305","","3030305","","2016-08-17 00:18:47","2016-08-17 00:18:47","","","","2","","",""
"38986768","2","","38986202","2016-08-17 01:21:20","","1","","<p>another <code>awk</code></p>

<pre><code>$ awk '{a[$1]=a[$1]?a[$1] FS $0:$0} 
    END{for(k in a) print a[k] | ""sort"" }' file | column -t

ALI  P   18:00:40.583  0.0   ALI  S   18:00:58.188  1.4
BRD  Pg  18:00:48.918  0.4   BRD  Sg  18:01:09.437  -1.8
GAN  Pn  18:00:58.207  -0.0  GAN  Sn  18:01:27.791  0.1
GLB  P   18:00:27.265  -0.4  GLB  S   18:00:34.187  0.1
GOB  S   18:01:13.638  -0.6
IML  Pg  18:00:52.264  -0.6
</code></pre>

<p>accumulate records with the same key, print at the end and sort (by the key), <code>column</code> for prettying.  Doesn't require the keys to be contiguous or sorted.</p>
","1435869","","1435869","","2016-08-17 02:06:15","2016-08-17 02:06:15","","","","0","","",""
"38993617","2","","38986202","2016-08-17 10:06:31","","1","","<p>This could be approached in Python as follows:</p>

<pre><code>from itertools import groupby

data = """"""ALI P 18:00:40.583 0.0
ALI S 18:00:58.188 1.4
BRD Pg 18:00:48.918 0.4
BRD Sg 18:01:09.437 -1.8
GAN Pn 18:00:58.207 -0.0
GAN Sn 18:01:27.791 0.1
GLB P 18:00:27.265 -0.4
GLB S 18:00:34.187 0.1
GOB S 18:01:13.638 -0.6
IML Pg 18:00:52.264 -0.6""""""    

print '\n'.join(' '.join(g) for k,g in groupby(data.splitlines(), key=lambda x: x.split()[0]))
</code></pre>

<p>This would display:</p>

<pre><code>ALI P 18:00:40.583 0.0 ALI S 18:00:58.188 1.4
BRD Pg 18:00:48.918 0.4 BRD Sg 18:01:09.437 -1.8
GAN Pn 18:00:58.207 -0.0 GAN Sn 18:01:27.791 0.1
GLB P 18:00:27.265 -0.4 GLB S 18:00:34.187 0.1
GOB S 18:01:13.638 -0.6
IML Pg 18:00:52.264 -0.6    
</code></pre>
","4985733","","","","","2016-08-17 10:06:31","","","","0","","",""
"38986230","2","","38986205","2016-08-17 00:01:55","","2","","<p>You can use <a href=""https://docs.python.org/3/library/re.html#re.split"" rel=""nofollow""><code>re.split()</code></a> using a <em>positive lookbehind</em> to <code>AM</code> or <code>PM</code> having an optional <code>-</code> and a space character as a delimiter:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; s = ""8:30 AM- 10:00 PM Subject: Math""
&gt;&gt;&gt; re.split(r""(?&lt;=AM|PM)-?\s"", s)
['8:30 AM', '10:00 PM', 'Subject: Math']
</code></pre>
","771848","","","","","2016-08-17 00:01:55","","","","0","","",""
"39050639","2","","38986217","2016-08-20 04:59:49","","1","","<p>Try downloading the appropriate wheel from <a href=""http://www.lfd.uci.edu/~gohlke/pythonlibs/#yappi"" rel=""nofollow"">here</a>.</p>

<p>Then use <code>pip install [package]</code>.</p>
","5671364","","","","","2016-08-20 04:59:49","","","","0","","",""
"39009987","2","","38986225","2016-08-18 04:24:24","","0","","<p>Rather than continue banging my head on the wall with this, I opted to set the created_at time in the model rather than worry about it elsewhere. </p>

<p>Set the attribute to have <code>(default=timezone.now)</code> and that cured my woes.</p>
","2731086","","","","","2016-08-18 04:24:24","","","","0","","",""
"39058506","2","","38986235","2016-08-20 20:38:37","","8","","<p>Spacy gives you all of that with just using <code>en_nlp = spacy.load('en'); doc=en_nlp(sentence)</code>. The <a href=""https://spacy.io/docs/#getting-started"" rel=""noreferrer"">documentation</a> gives you details about how to access each of the elements.</p>

<p>An example is given below:</p>

<pre><code>In [1]: import spacy
   ...: en_nlp = spacy.load('en')

In [2]: en_doc = en_nlp(u'Hello, world. Here are two sentences.')
</code></pre>

<p>Sentences can be obtained by using <code>doc.sents</code>:</p>

<pre><code>In [4]: list(en_doc.sents)
Out[4]: [Hello, world., Here are two sentences.]
</code></pre>

<p>Noun chunks are given by <code>doc.noun_chunks</code>:</p>

<pre><code>In [6]: list(en_doc.noun_chunks)
Out[6]: [two sentences]
</code></pre>

<p><a href=""https://spacy.io/docs/#examples-entities"" rel=""noreferrer"">Named entity</a> is given by <code>doc.ents</code>:</p>

<pre><code>In [11]: [(ent, ent.label_) for ent in en_doc.ents]
Out[11]: [(two, u'CARDINAL')]
</code></pre>

<p>Tokenization: You can iterate over the doc to get tokens. <code>token.orth_</code> gives str of the token.</p>

<pre><code>In [12]: [tok.orth_ for tok in en_doc]
Out[12]: [u'Hello', u',', u'world', u'.', u'Here', u'are', u'two', u'sentences', u'.']
</code></pre>

<p>POS is given by <code>token.tag_</code>:</p>

<pre><code>In [13]: [tok.tag_ for tok in en_doc]
Out[13]: [u'UH', u',', u'NN', u'.', u'RB', u'VBP', u'CD', u'NNS', u'.']
</code></pre>

<p>Lemmatization:</p>

<pre><code>In [15]: [tok.lemma_ for tok in en_doc]
Out[15]: [u'hello', u',', u'world', u'.', u'here', u'be', u'two', u'sentence', u'.']
</code></pre>

<p>Dependency parsing. You can traverse the parse tree by using <code>token.dep_</code> <code>token.rights</code> or <code>token.lefts</code>. You can write a function to print dependencies:</p>

<pre><code>In [19]: for token in en_doc:
    ...:     print(token.orth_, token.dep_, token.head.orth_, [t.orth_ for t in token.lefts], [t.orth_ for t in token.rights])
    ...:     
(u'Hello', u'ROOT', u'Hello', [], [u',', u'world', u'.'])
(u',', u'punct', u'Hello', [], [])
(u'world', u'npadvmod', u'Hello', [], [])
...
</code></pre>

<p>For more details please consult the spacy documentation.</p>
","3450064","","3450064","","2016-08-23 16:05:15","2016-08-23 16:05:15","","","","0","","",""
"44858602","2","","38986235","2017-07-01 07:46:21","","0","","<p>They've updated the spacy version to spacy-alpha V2.0.0.</p>

<p>You can check it here for the new documentation<a href=""http://alpha.spacy.io/"" rel=""nofollow noreferrer"" title=""Alpha-Spacy""> Here</a></p>
","","user8218582","","","","2017-07-01 07:46:21","","","","0","","",""
"38986278","2","","38986244","2016-08-17 00:08:03","","1","","<p>You have to iterate through the entire list, which is O(n) time, and then insert each into a set, which is O(1) time. So the overall time complexity is O(n), where n is the length of the list.</p>

<p>No other space other than the set being created or the list being used is needed.</p>
","6713790","","","","","2016-08-17 00:08:03","","","","0","","",""
"38986289","2","","38986244","2016-08-17 00:09:32","","1","","<p>Converting a list to a set requires that every item in the list be visited once, O(n). Inserting an element into a set is O(1), so the overall time complexity would be O(n).</p>

<p>Space required for the new set is less than or equal to the length of the list, so that is also O(n).</p>

<p>Here's a good <a href=""https://wiki.python.org/moin/TimeComplexity"" rel=""nofollow"">reference</a> for Python data structures.</p>
","21945","","21945","","2016-08-17 00:44:36","2016-08-17 00:44:36","","","","0","","",""
"38986305","2","","38986261","2016-08-17 00:11:19","","1","","<p>You can just have a nested dictionary:</p>

<pre><code>collection.update_one({'_id': md5_hash}, 
                      {'$addToSet': {'offset': {src_id: offset}}})
</code></pre>

<p>Or, you can dynamically make the field via string formatting or concatenation:</p>

<pre><code>collection.update_one({'_id': md5_hash}, 
                      {'$addToSet': {'offset.%s' % src_id: offset}})
</code></pre>
","771848","","","","","2016-08-17 00:11:19","","","","0","","",""
"38986421","2","","38986341","2016-08-17 00:29:56","","1","","<p>At the time of passing the parameters, the parameters are not initialised</p>

<pre><code>&gt;&gt;&gt; def a(b=1,c=b):
...     print(c,b)
... 
Traceback (most recent call last):
    File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
NameError: name 'b' is not defined
</code></pre>

<p>so you need to send len of myByteArray as another variable.</p>

<p>So what you could do is,</p>

<pre><code>def circularFind(myByteArray, searchVal, start=0, end=-1):
    if end == -1:
        end = len(myByteArray)
    #reset of code here.
</code></pre>
","5096669","","","","","2016-08-17 00:29:56","","","","0","","",""
"38986430","2","","38986341","2016-08-17 00:31:38","","1","","<p>Python default arguments are evaluated when the function is defined. Rather, you want something like this:</p>

<pre><code>def circularFind(myByteArray, searchVal, start=0, end=None):
    """"""
    Return the first-encountered index in bytearray where searchVal 
    is found, searching to the right, in incrementing-index order, and
    wrapping over the top and back to the beginning if index end &lt; 
    index start
    """"""
    if end is None:
        end = len(myByteArray)
    # continue doing what you were doing
</code></pre>
","5014455","","","","","2016-08-17 00:31:38","","","","0","","",""
"38986374","2","","38986342","2016-08-17 00:22:35","","0","","<p>Something like this should do the trick:</p>

<pre><code>def my_ord(c):
  alphabet = ""abcdefghijklmnopqrstuvwxyz0123456789 .,?!""
  return alphabet.index(c)
</code></pre>
","24998","","","","","2016-08-17 00:22:35","","","","0","","",""
"38986375","2","","38986342","2016-08-17 00:22:36","","0","","<p>You can create a <code>dict</code> to map from characters to indices and then do lookups into that. This will avoid repeatedly searching the string as other answers are suggesting (which is <code>O(n)</code>) and instead give <code>O(1)</code> lookup time with respect to the alphabet:</p>

<pre><code>my_ord_dict = {c : i for i, c in enumerate(alphabet)}
my_ord_dict['0'] # 26
</code></pre>

<p>At that point you can easily wrap it in a function:</p>

<pre><code>def my_ord(c):
    return my_ord_dict['0']
</code></pre>

<p>Or use the bound method directly</p>

<pre><code>my_ord = my_ord_dict.__getitem__
</code></pre>

<p>But you don't want to change the name that refers to a builtin function, that'll confuse everyone else trying to use it that can see your change. If you are really trying to hurt yourself you can replace <code>my_ord</code> with <code>ord</code> in the above.</p>
","1013719","","1013719","","2016-08-17 01:50:21","2016-08-17 01:50:21","","","","0","","",""
"38986376","2","","38986342","2016-08-17 00:22:41","","2","","<p>You don't.</p>

<p>You're going about this the wrong way: you're making the mistake</p>

<blockquote>
  <p>This existing thing doesn't meet my needs. I want to make it meet my needs!</p>
</blockquote>

<p>instead, the way to go about the problem is</p>

<blockquote>
  <p>This existing thing doesn't meet my needs. I need a thing that does meet my needs!</p>
</blockquote>

<p>Once you realize that, the problem is now pretty straightforward. e.g.</p>

<pre><code>DEFAULT_ALPHABET = ""abcdefghijklmnopqrstuvwxyz0123456789 .,?!""
def myord(x, alphabet=DEFAULT_ALPHABET):
    return alphabet.find(x)
</code></pre>
","1084944","","","","","2016-08-17 00:22:41","","","","0","","",""
"38986388","2","","38986342","2016-08-17 00:25:14","","0","","<p>If i've understood correctly, this is what you want:</p>

<pre><code>alphabet = ""abcdefghijklmnopqrstuvwxyz0123456789 .,?!""

def crypt(c, key=97):
    return ord(c)-key

def decrypt(c, key=97):
    return chr(c+key)

dst = [crypt(c) for c in alphabet]
src = [decrypt(c) for c in dst]
print dst
print ''.join(src)
</code></pre>
","3809375","","","","","2016-08-17 00:25:14","","","","0","","",""
"38986385","2","","38986343","2016-08-17 00:24:28","","0","","<p>Assuming both Latitude and Longitude are Integers:</p>

<pre><code>'&lt;a href=""http://maps.google.com/maps?z=12&amp;t=m&amp;q=loc:'+str(p['latitude'])+'+'+str(p['longitude'])+'""&gt;Click Here&lt;/a&gt;'
</code></pre>

<p>Try This.</p>

<p>Your mistake is that you are not concatenating the strings properly.</p>
","5096669","","","","","2016-08-17 00:24:28","","","","1","","",""
"38986563","2","","38986344","2016-08-17 00:50:47","","0","","<p>First of all, I'm guessing that you didn't really want to print that <strong>y</strong> value of 10; that you really wanted the base-10 reduction to 0.  Note that you have an extra character in the pyramid base.</p>

<p>Do <em>not</em> change the value of a loop parameter while you're inside the loop.  Specifically, don't change y within the <strong>for y</strong> loop.</p>

<p>Get rid of <strong>c</strong>; you can derive it from the other values.</p>

<p>For flexibility, make your upper limit a parameter: you have two constants (6 and 7) that depend on one concept (row limit).</p>

<p>Here's my version:</p>

<pre><code>row_limit = 7

for y in range(1, row_limit):
    print()
    print((row_limit-y-1) * "" "", end="""")

    for x in range(y, 2*y):
        print(x%10, end="""")

    for x in range(2*(y-1), y-1, -1):
        print(x%10, end="""")

print()
</code></pre>

<p>Output:</p>

<pre><code>     1
    232
   34543
  4567654
 567898765
67890109876
</code></pre>

<hr>

<p>If you really want to push things, you can shorten the loops with string concatenation and comprehension, but it's likely harder to read for you.</p>

<pre><code>for y in range(1, row_limit):
    print()
    print((row_limit-y-1) * "" "" + ''.join([str(x%10) for x in range(y, 2*y)]) + \
              ''.join([str(x%10) for x in range(2*(y-1), y-1, -1)]), end="""")

print()
</code></pre>

<p>Each of the loops is turned into a list comprehension, such as:</p>

<pre><code>[str(x%10) for x in range(y, 2*y)]
</code></pre>

<p>Then, this list of characters is joined with no interstitial character; this forms half of the row.  The second half of the row is the other loop (counting down).  In front of all this, I concatenate the proper number of spaces.</p>

<p>Frankly, I prefer my first form.</p>
","4785185","","4785185","","2016-08-17 00:58:41","2016-08-17 00:58:41","","","","0","","",""
"38986584","2","","38986344","2016-08-17 00:53:55","","0","","<p>Here's my implementation.</p>

<p><strong>Python 2</strong>:</p>

<pre><code>def print_triangle(n):
    for row_num in xrange(1, n + 1):
        numbers = [str(num % 10) for num in xrange(row_num, 2 * row_num)]
        num_string = ''.join(numbers + list(reversed(numbers))[1:])
        print '{}{}'.format(' ' * (n - row_num), num_string)
</code></pre>

<p><strong>Python 3</strong>:</p>

<pre><code>def print_triangle(n):
    for row_num in range(1, n + 1):
        numbers = [str(num % 10) for num in range(row_num, 2 * row_num)]
        num_string = ''.join(numbers + list(reversed(numbers))[1:])
        print('{}{}'.format(' ' * (n - row_num), num_string))
</code></pre>

<p><strong>Input</strong>:</p>

<pre><code>print_triangle(5)
print_triangle(6)
print_triangle(7)
</code></pre>

<p><strong>Output</strong>:</p>

<pre><code>    1
   232
  34543
 4567654
567898765
     1
    232
   34543
  4567654
 567898765
67890109876
      1
     232
    34543
   4567654
  567898765
 67890109876
7890123210987
</code></pre>
","1603840","","","","","2016-08-17 00:53:55","","","","0","","",""
"38986383","2","","38986369","2016-08-17 00:23:38","","0","","<p>Here are the constants in case you need it </p>

<pre><code>#! /usr/bin/env python
# -*- coding: utf-8 -*-

#Nombres para etiquetas login local y remoto
MY_PORT_NUMBER_TITLE = ""Cual es mi puerto?""
OTHER_PORT_NUMBER_TITLE = ""Cual es el puerto de contacto?""
OTHER_IP_NUMBER_TITLE = ""Cual es la direccion ip de contacto?""
LOGIN_TITLE = ""Acceder""

#Nombres para las etiquetas del chat
CONVERSATION_TITLE = ""Conversacion""
SEND_TITLE = ""Responder""

#Titulo de las ventans GUI
LOGIN_WINDOW = ""Login""
CHAT_WINDOW = ""Chat""

#Modos de acceso  al chat, local o remoto
LOCAL = ""Local""
REMOTE = ""Remote""

#Mensajes de error
WARNING = ""¬°Alerta!""
MISSING_MESSAGE = ""No hay ningun mensaje para enviar""

#Localhost
LOCALHOST = ""localhost""
DEFAULT_PORT = 5000
LOCALHOST_CLIENT = ""http://localhost:""
</code></pre>
","6308651","","","","","2016-08-17 00:23:38","","","","1","","",""
"39010456","2","","38986403","2016-08-18 05:18:21","","0","","<p>The line <code>json=data</code> should have been <code>data=data</code>. The json attribute accepts a dictionary, which that <code>data</code> string is not. Here is what working code looks like:</p>

<pre><code>import json
import requests
url = 'https://inputtools.google.com/request?itc=ja-t-i0-handwrit&amp;app=demopage'

data = '{""app_version"":0.4,""api_level"":""537.36"",""device"":""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"",""input_type"":0,""options"":""enable_pre_space"",""requests"":[{""writing_guide"":{""writing_area_width"":200,""writing_area_height"":200},""pre_context"":"""",""max_num_results"":1,""max_completions"":0,""ink"":[[[100,100],[20,180],[0,1]],[[20,180],[100,100],[2,3]]]}]}'

headers = {'content-type': 'application/json'}

r = requests.post(url, json=data, headers=headers)
print r.json() 
</code></pre>
","2250799","","","","","2016-08-18 05:18:21","","","","0","","",""
"38986732","2","","38986427","2016-08-17 01:16:02","","0","","<p>Simplest way is to form them into another DataFrame. Use <code>pd.concat</code></p>

<pre><code>frames, names = [], []

grouped = df.groupby(pd.TimeGrouper(""5Min""), as_index=False)
for name, group in grouped:
    names.extend([name])
    frames.extend([group])

pd.concat(frames, keys=names)
</code></pre>
","3765319","","","","","2016-08-17 01:16:02","","","","0","","",""
"38989448","2","","38986427","2016-08-17 06:25:13","","0","","<p>This is the best I could come up with for now.</p>

<pre><code>df.set_index('Time').groupby(pd.TimeGrouper('5T')) \
    .apply(lambda df: df.reset_index()).unstack() \
    .resample('5T').last().stack(dropna=False)
</code></pre>
","2336654","","","","","2016-08-17 06:25:13","","","","0","","",""
"38986607","2","","38986525","2016-08-17 00:58:13","","2","","<p>It looks like the <code>points</code> variable is not increased. Something like this might work in your inner loop:</p>

<pre><code>    while points &lt; score_limit:
        points = random.choice(quest_list)(points)
        time.sleep(2)
        print(""Current score:"", points, ""points"")
</code></pre>

<p>I'm assuming that <code>quest_list</code> is a list of functions, and you're passing the <code>points</code> value as an argument? To make this example work, you'll also want to return the points from the function returned by the <code>quest_list</code> that's called. A perhaps cleaner way to build this would be to return only the points generated by the quest. Then you could do something like:</p>

<pre><code>        quest = random.choice(quest_list)
        points += quest()
</code></pre>

<p>Unless <code>points</code> is a mutable data structure, it won't change the value. You can read more about that in <a href=""https://stackoverflow.com/questions/15148496/python-passing-an-integer-by-reference"">this StackOverflow question</a>. </p>
","1021177","","-1","","2017-05-23 12:08:34","2016-08-17 00:58:13","","","","0","","",""
"38986561","2","","38986527","2016-08-17 00:50:39","","6","","<p>Check out <a href=""https://pypi.python.org/pypi/astral/1.2"" rel=""noreferrer"">astral</a>. Here's a slightly modified <a href=""http://pythonhosted.org/astral/#example"" rel=""noreferrer"">example from their docs</a>:</p>

<pre><code>&gt;&gt;&gt; from astral import Astral
&gt;&gt;&gt; city_name = 'London'
&gt;&gt;&gt; a = Astral()
&gt;&gt;&gt; a.solar_depression = 'civil'
&gt;&gt;&gt; city = a[city_name]
&gt;&gt;&gt; sun = city.sun(date=datetime.date(2009, 4, 22), local=True)

&gt;&gt;&gt; if (sun['sunrise'] &lt; T &lt; sun['sunset']) and (light &lt; threshold):
&gt;&gt;&gt;    notifyUser()
</code></pre>

<p>If you use something like this example, please remember to change the <code>city_name</code> and date provided to <code>city.sun</code>.</p>
","1021177","","","","","2016-08-17 00:50:39","","","","1","","",""
"39268611","2","","39267793","2016-09-01 10:06:55","","0","","<p>I suspect that your inner class should be called <code>Meta</code>, not <code>meta</code>.</p>
","104349","","","","","2016-09-01 10:06:55","","","","2","","",""
"41006261","2","","39660132","2016-12-06 22:40:49","","0","","<p>first, do: pip install pygame
second: make sure you have a correct import statement on top of your main app module.</p>
","2362362","","","","","2016-12-06 22:40:49","","","","3","","",""
"39869400","2","","39867462","2016-10-05 08:50:15","","0","","<p>You can simply put your variable in place of the hardcoded string like this:</p>

<pre><code>{% set lang = 'python' %}
{% highlight lang %}
  from fridge import Beer
  glass = Beer(lt=500)
  glass.drink()
{% endhighlight %}
</code></pre>

<p>You haven't showed us your for-loop, but in principle you can do the same thing in the for-loop too:</p>

<pre><code>{% for lang in ['python', 'ruby', 'scheme'] %}
  {% highlight lang %}
  from fridge import Beer
  {% endhighlight %}
{% endfor %}
</code></pre>
","4241180","","4241180","","2016-10-05 09:13:57","2016-10-05 09:13:57","","","","2","","",""
"41554451","2","","39867464","2017-01-09 18:24:08","","0","","<p>Below is a simple solution for a red left button, a green right button and an ""Exit"" button to quit the program.  I've rearranged the rectangles that represent the buttons such that P1 is the lower left corner and P2 is the upper right corner.  This simplifies the test to see if the clicked point was inside the button.  (You can make the code more sophisticated to remove this assumption.)</p>

<pre><code>from graphics import *

WINDOW_WIDTH, WINDOW_HEIGHT = 200, 150

win = GraphWin(""Simple Breakout"", WINDOW_WIDTH, WINDOW_HEIGHT)

def buttons():
    left = Rectangle(Point(25, 55), Point(55, 85))  # points are ordered ll, ur
    right = Rectangle(Point(145, 55), Point(175, 85))
    quit = Rectangle(Point(85, 116), Point(115, 146))

    left.setFill(""red"")
    right.setFill(""green"")
    text = Text(Point(100, 133), ""Exit"")
    text.draw(win)

    left.draw(win)
    right.draw(win)
    quit.draw(win)

    return left, right, quit

def inside(point, rectangle):
    """""" Is point inside rectangle? """"""

    ll = rectangle.getP1()  # assume p1 is ll (lower left)
    ur = rectangle.getP2()  # assume p2 is ur (upper right)

    return ll.getX() &lt; point.getX() &lt; ur.getX() and ll.getY() &lt; point.getY() &lt; ur.getY()

left, right, quit = buttons()

centerPoint = Point(WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2)
text = Text(centerPoint, """")
text.draw(win)

while True:
    clickPoint = win.getMouse()

    if clickPoint is None:  # so we can substitute checkMouse() for getMouse()
        text.setText("""")
    elif inside(clickPoint, left):
        text.setText(""left"")
    elif inside(clickPoint, right):
        text.setText(""right"")
    elif inside(clickPoint, quit):
        break
    else:
        text.setText("""")

win.close()
</code></pre>

<p>If you click the red or green buttons, you'll get ""left"" or ""right"" printed in the center of the window, otherwise no text appears:</p>

<p><a href=""https://i.stack.imgur.com/zGl30.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zGl30.png"" alt=""enter image description here""></a></p>
","5771269","","","","","2017-01-09 18:24:08","","","","0","","",""
"40018429","2","","40018348","2016-10-13 10:26:37","","1","","<p>Have a look at BeautifulSoup: <a href=""https://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">https://www.crummy.com/software/BeautifulSoup/</a></p>

<p>You can request a website and then read the HTML source code from it:</p>

<pre><code>import requests
from bs4 import BeautifulSoup

r = requests.get(YourURL)

soup = BeautifulSoup(r.content)
print soup.prettify()
</code></pre>

<p>If you want to read JavaScript, look into Headless Browsers.</p>
","3984496","","3984496","","2016-10-13 10:45:58","2016-10-13 10:45:58","","","","0","","",""
"41790252","2","","40018351","2017-01-22 11:20:35","","1","","<p>I'm author of tabula-py. I guess you would like to extract image based PDF, but tabula-py isn't a tool for OCR. It is assumed to extract text embedded PDF.</p>

<p>I think you should try OCR tools such as <a href=""https://cloud.google.com/vision/"" rel=""nofollow noreferrer"">Google Cloud Vision API</a>.</p>
","3762316","","","","","2017-01-22 11:20:35","","","","0","","",""
"41791796","2","","40018351","2017-01-22 13:59:36","","0","","<p>Just to add to what Chezou has said: Google Could Vision OCR does not support PDFs directly. You would first need to extract the pages (as images) with a tool like <a href=""https://www.ghostscript.com/"" rel=""nofollow noreferrer"">Ghostscript</a> and then send the image of each page to the API. But if your PDF has three pages or less, you can use the free <a href=""https://ocr.space/ocrapi"" rel=""nofollow noreferrer"">OCR.space PDF OCR</a> api, which can take the whole PDF document as input.</p>
","7400159","","","","","2017-01-22 13:59:36","","","","0","","",""